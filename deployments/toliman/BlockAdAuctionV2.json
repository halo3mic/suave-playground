{
  "address": "0xa60F1B5cB70c0523A086BbCbe132C8679085ea0E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "boostRelayUrl_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "PeekerReverted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "SuaveError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "SuaveErrorWithData",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.DataId",
          "name": "dataId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "allowedPeekers",
          "type": "address[]"
        }
      ],
      "name": "DataRecordEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "extra",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockLimit",
          "type": "uint256"
        }
      ],
      "name": "RequestAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "egp",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "blockHash",
          "type": "string"
        }
      ],
      "name": "RequestIncluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RequestRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "extra",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parentBeaconBlockRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "fillPending",
              "type": "bool"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        }
      ],
      "name": "buildBlock",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "builderCall",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "includedRequestB",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "pendingRemovalsB",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ConfidentialControl.UnlockArgs",
          "name": "uArgs",
          "type": "tuple"
        }
      ],
      "name": "buildCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "builder",
      "outputs": [
        {
          "internalType": "contract Builder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "blockLimit",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "extra",
          "type": "string"
        }
      ],
      "name": "buyAd",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "extra",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "blockLimit",
              "type": "uint256"
            },
            {
              "internalType": "Suave.DataId",
              "name": "paymentBidId",
              "type": "bytes16"
            }
          ],
          "internalType": "struct BlockAdAuctionV2.AdRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ConfidentialControl.UnlockArgs",
          "name": "uArgs",
          "type": "tuple"
        }
      ],
      "name": "buyAdCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nextHash",
          "type": "bytes32"
        },
        {
          "internalType": "Suave.DataId",
          "name": "sBidId",
          "type": "bytes16"
        }
      ],
      "name": "ccCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confidentialConstructor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.DataId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.DataId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.DataRecord",
          "name": "dataRecord",
          "type": "tuple"
        }
      ],
      "name": "emitDataRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchConfidentialBundleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "extra",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "blockLimit",
          "type": "uint256"
        },
        {
          "internalType": "Suave.DataId",
          "name": "paymentBidId",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaeec93dc07c856e8a491f8b057d71e443b92146744f3efac166236823ecf6445",
  "receipt": {
    "to": null,
    "from": "0x16f2Aa8dF055b6e672b93Ded41FecCCabAB565B0",
    "contractAddress": "0xa60F1B5cB70c0523A086BbCbe132C8679085ea0E",
    "transactionIndex": 0,
    "gasUsed": "7480871",
    "logsBloom": "0x
    "blockHash": "0xf14ac001d26acd9596b9420dd2bff9c7d20be7dc6a3cf2ef38d2e636edd37cf7",
    "transactionHash": "0xaeec93dc07c856e8a491f8b057d71e443b92146744f3efac166236823ecf6445",
    "logs": [],
    "blockNumber": 423895,
    "cumulativeGasUsed": "7480871",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://0xafa4c6985aa049fb79dd37010438cfebeb0f2bd42b115b89dd678dab0670c1de38da0c4e9138c9290a398ecd9a0b3110@boost-relay-holesky.flashbots.net"
  ],
  "numDeployments": 1,
  "solcInputHash": "d905e4247eb39dfb087c87496090958a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"boostRelayUrl_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"PeekerReverted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"SuaveError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SuaveErrorWithData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.DataId\",\"name\":\"dataId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"}],\"name\":\"DataRecordEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"}],\"name\":\"RequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"egp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"blockHash\",\"type\":\"string\"}],\"name\":\"RequestIncluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RequestRemoved\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extra\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentBeaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"fillPending\",\"type\":\"bool\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"buildBlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"builderCall\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"includedRequestB\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pendingRemovalsB\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ConfidentialControl.UnlockArgs\",\"name\":\"uArgs\",\"type\":\"tuple\"}],\"name\":\"buildCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"builder\",\"outputs\":[{\"internalType\":\"contract Builder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blockLimit\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"}],\"name\":\"buyAd\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"},{\"internalType\":\"Suave.DataId\",\"name\":\"paymentBidId\",\"type\":\"bytes16\"}],\"internalType\":\"struct BlockAdAuctionV2.AdRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ConfidentialControl.UnlockArgs\",\"name\":\"uArgs\",\"type\":\"tuple\"}],\"name\":\"buyAdCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"},{\"internalType\":\"Suave.DataId\",\"name\":\"sBidId\",\"type\":\"bytes16\"}],\"name\":\"ccCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confidentialConstructor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.DataId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.DataId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.DataRecord\",\"name\":\"dataRecord\",\"type\":\"tuple\"}],\"name\":\"emitDataRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchConfidentialBundleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"},{\"internalType\":\"Suave.DataId\",\"name\":\"paymentBidId\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/blockad/BlockAdV2.sol\":\"BlockAdAuctionV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/blockad/BlockAdV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { AnyBundleContract, Suave } from \\\"../standard_peekers/bids.sol\\\";\\nimport { ConfidentialControl } from \\\"./lib/ConfidentialControl.sol\\\";\\nimport { DynamicUintArray } from \\\"./lib/Utils.sol\\\";\\nimport { Builder } from \\\"./lib/Builder.sol\\\";\\n\\n\\ncontract BlockAdAuctionV2 is AnyBundleContract, ConfidentialControl {\\n\\tusing DynamicUintArray for bytes;\\n\\n\\tstruct AdRequest {\\n\\t\\tuint id;\\n\\t\\tstring extra;\\n\\t\\tuint blockLimit;\\n\\t\\tSuave.DataId paymentBidId;\\n\\t}\\n\\tstruct Offer {\\n\\t\\tuint id;\\n\\t\\tstring extra;\\n\\t\\tuint64 egp;\\n\\t\\tbytes paymentBundle;\\n\\t}\\n\\n\\tevent RequestAdded(uint indexed id, string extra, uint blockLimit);\\n\\tevent RequestRemoved(uint indexed id);\\n\\tevent RequestIncluded(uint indexed id, uint64 egp, string blockHash);\\n\\n\\tstring internal constant PB_NAMESPACE = \\\"blockad:v0:paymentBundle\\\";\\n\\tstring internal constant EB_NAMESPACE = \\\"default:v0:ethBundles\\\";\\n\\tstring internal constant EB_SIM_NAMESPACE = \\\"default:v0:ethBundleSimResults\\\";\\n\\tBuilder public builder;\\n\\tAdRequest[] public requests;\\n\\tuint public nextId;\\n\\n\\t/**********************************************************************\\n\\t *                           \\u26d3\\ufe0f ON-CHAIN METHODS                       *\\n\\t ***********************************************************************/\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tbuilder = new Builder(boostRelayUrl_);\\n\\t}\\n\\n\\tfunction buyAdCallback(AdRequest calldata request, UnlockArgs calldata uArgs) external unlock(uArgs) {\\n\\t\\trequests.push(request);\\n\\t\\tnextId++;\\n\\t\\temit RequestAdded(request.id, request.extra, request.blockLimit);\\n\\t}\\n\\n\\tfunction buildCallback(\\n\\t\\tbytes memory builderCall,\\n\\t\\tbytes memory includedRequestB,\\n\\t\\tbytes memory pendingRemovalsB,\\n\\t\\tUnlockArgs calldata uArgs\\n\\t) external unlock(uArgs) {\\n\\t\\tif (pendingRemovalsB.length > 0) {\\n\\t\\t\\tremoveRequests(pendingRemovalsB.export());\\n\\t\\t}\\n\\t\\tstring memory blockHash = handleBuilderCallback(address(builder), builderCall);\\n\\t\\thandleIncludedRequest(includedRequestB, blockHash);\\n\\t}\\n\\n\\tfunction requestsLength() public view returns (uint) {\\n\\t\\treturn requests.length;\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udd12 CONFIDENTIAL METHODS                      *\\n\\t ***********************************************************************/\\n\\n\\tfunction confidentialConstructor() public view override onlyConfidential returns (bytes memory) {\\n\\t\\treturn ConfidentialControl.confidentialConstructor();\\n\\t}\\n\\n\\tfunction buyAd(uint64 blockLimit, string memory extra) external onlyConfidential returns (bytes memory) {\\n\\t\\tbytes memory paymentBundle = this.fetchConfidentialBundleData();\\n\\t\\t(,uint64 egp) = simulateBundleSafe(paymentBundle, true);\\n\\t\\tcrequire(egp > 0, \\\"egp too low\\\");\\n\\t\\tSuave.DataId paymentBidId = storePaymentBundle(paymentBundle);\\n\\t\\tAdRequest memory request = AdRequest(nextId, extra, blockLimit, paymentBidId);\\n\\t\\treturn abi.encodeWithSelector(this.buyAdCallback.selector, request, getUnlockPair());\\n\\t}\\n\\n\\tfunction buildBlock(\\n\\t\\tSuave.BuildBlockArgs memory blockArgs,\\n\\t\\tuint64 blockHeight\\n\\t) public onlyConfidential returns (bytes memory) {\\n\\t\\tcrequire(requests.length > 0, \\\"No requests\\\");\\n\\t\\t(Offer memory bestOffer, bytes memory removals) = filterOffers(blockHeight);\\n\\t\\tcrequire(bestOffer.egp > 0, \\\"No valid offers\\\");\\n\\n\\t\\tstoreBundleInPool(blockHeight, bestOffer);\\n\\t\\tblockArgs.extra = bytes(bestOffer.extra);\\n\\t\\t// Expect flow is ordered by egp; if one wants to fail payment they need higher egp\\n\\t\\tbytes memory externalCallback = builder.buildFromPool(blockArgs, blockHeight);\\n\\n\\t\\treturn\\n\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\tthis.buildCallback.selector,\\n\\t\\t\\t\\texternalCallback,\\n\\t\\t\\t\\tabi.encode(bestOffer.id, bestOffer.egp),\\n\\t\\t\\t\\tremovals,\\n\\t\\t\\t\\tgetUnlockPair()\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udee0\\ufe0f INTERNAL METHODS                          *\\n\\t ***********************************************************************/\\n\\n\\tfunction removeRequests(uint[] memory pendingRemovals) internal {\\n\\t\\t// Assume that the pendingRemovals were added in ascending order\\n\\t\\t// Assume that pendingRemovals.length <= requests.length\\n\\t\\tfor (uint i = pendingRemovals.length; i > 0; --i) {\\n\\t\\t\\tuint indexToRemove = pendingRemovals[i - 1];\\n\\t\\t\\tuint requestId = requests[indexToRemove].id;\\n\\t\\t\\tif (indexToRemove < requests.length - 1) {\\n\\t\\t\\t\\trequests[indexToRemove] = requests[requests.length - 1];\\n\\t\\t\\t}\\n\\t\\t\\trequests.pop();\\n\\t\\t\\temit RequestRemoved(requestId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction handleIncludedRequest(bytes memory includedRequestB, string memory blockHash) internal {\\n\\t\\t(uint id, uint64 egp) = abi.decode(includedRequestB, (uint, uint64));\\n\\t\\temit RequestIncluded(id, egp, blockHash);\\n\\t}\\n\\n\\tfunction handleBuilderCallback(address target, bytes memory data) internal returns (string memory) {\\n\\t\\t(bool success, bytes memory res) = target.call(data);\\n\\t\\tcrequire(success, \\\"External call failed\\\");\\n\\t\\treturn abi.decode(res, (string));\\n\\t}\\n\\n\\tfunction storePaymentBundle(bytes memory paymentBundle) internal view returns (Suave.DataId) {\\n\\t\\taddress[] memory peekers = new address[](1);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tSuave.DataRecord memory paymentBid = Suave.newDataRecord(0, peekers, peekers, PB_NAMESPACE);\\n\\t\\tSuave.confidentialStore(paymentBid.id, PB_NAMESPACE, paymentBundle);\\n\\t\\treturn paymentBid.id;\\n\\t}\\n\\n\\tfunction filterOffers(uint blockHeight) internal view returns (Offer memory bestOffer, bytes memory removals) {\\n\\t\\tfor (uint i; i < requests.length; ++i) {\\n\\t\\t\\tAdRequest memory request = requests[i];\\n\\t\\t\\tif (request.blockLimit < blockHeight) {\\n\\t\\t\\t\\tremovals = removals.append(i);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tbytes memory paymentBundle = Suave.confidentialRetrieve(request.paymentBidId, PB_NAMESPACE);\\n\\t\\t\\t(bool success, uint64 egp) = simulateBundleSafe(paymentBundle, false);\\n\\t\\t\\tif (!success || egp == 0) {\\n\\t\\t\\t\\tremovals = removals.append(i);\\n\\t\\t\\t} else if (egp > bestOffer.egp) {\\n\\t\\t\\t\\tbestOffer = Offer(request.id, request.extra, egp, paymentBundle);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction storeBundleInPool(uint64 blockHeight, Offer memory bestOffer) internal view {\\n\\t\\taddress[] memory allowedPeekers = new address[](3);\\n\\t\\tallowedPeekers[0] = address(builder);\\n\\t\\tallowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\t\\tallowedPeekers[2] = address(this);\\n\\t\\tSuave.DataRecord memory paymentBundleBid = Suave.newDataRecord(\\n\\t\\t\\tblockHeight, \\n\\t\\t\\tallowedPeekers, \\n\\t\\t\\tallowedPeekers, \\n\\t\\t\\tEB_NAMESPACE\\n\\t\\t);\\n\\t\\tSuave.confidentialStore(paymentBundleBid.id, EB_NAMESPACE, bestOffer.paymentBundle);\\n\\t\\tSuave.confidentialStore(paymentBundleBid.id, EB_SIM_NAMESPACE, abi.encode(bestOffer.egp));\\n\\t}\\n}\\n\",\"keccak256\":\"0xb86119584a051b85338532cf92a2dbd58c334e632ef1962c3da0434f11eec203\",\"license\":\"MIT\"},\"contracts/blockad/lib/Builder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { EthBlockContract, Suave } from \\\"../../standard_peekers/bids.sol\\\";\\nimport { SuaveContract } from \\\"./SuaveContract.sol\\\";\\n\\n\\ncontract Builder is EthBlockContract, SuaveContract {\\n\\tstring constant BB_NAMESPACE = \\\"blockad:v0:builderBid\\\";\\n\\tstring boostRelayUrl;\\n\\n\\tevent RelaySubmission(bytes32 bidId);\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tboostRelayUrl = boostRelayUrl_;\\n\\t}\\n\\n\\tfunction buildAndEmitCallback(string memory blockHash, bytes32 id) external returns (string memory) {\\n\\t\\temit RelaySubmission(id);\\n\\t\\treturn blockHash;\\n\\t}\\n\\n\\tfunction buildAndEmit(\\n\\t\\tSuave.BuildBlockArgs memory blockArgs,\\n\\t\\tuint64 blockHeight,\\n\\t\\tSuave.DataId[] memory bids,\\n\\t\\tstring memory\\n\\t) public virtual override onlyConfidential returns (bytes memory) {\\n\\t\\t(,bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, boostRelayUrl); // Also submits to relay\\n\\t\\tstring memory blockHash = extractBlockHash(builderBid, blockArgs.slot);\\n\\t\\treturn abi.encodeWithSelector(this.buildAndEmitCallback.selector, blockHash, keccak256(builderBid));\\n\\t}\\n\\n\\tfunction submitBlock(uint slot) external view onlyConfidential returns (bytes memory) {\\n\\t\\tbytes memory builderBid = Suave.confidentialInputs();\\n\\t\\tsubmitToRelay(builderBid);\\n\\t\\tstring memory blockHash = extractBlockHash(builderBid, slot);\\n\\t\\treturn abi.encodeWithSelector(this.buildAndEmitCallback.selector, blockHash, keccak256(builderBid));\\n\\t}\\n\\n\\tfunction submitToRelay(bytes memory builderBid) internal view {\\n\\t\\t(bool success, bytes memory data) = Suave.SUBMIT_ETH_BLOCK_TO_RELAY\\n\\t\\t\\t.staticcall(abi.encode(boostRelayUrl, builderBid));\\n\\t\\tif (!success) {\\n\\t\\t\\trevert SuaveErrorWithData(string(data), builderBid);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction storeBuilderBid(Suave.DataId blockBidId, bytes memory builderBid) internal view {\\n\\t\\taddress[] memory peekers = new address[](1);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tSuave.confidentialStore(blockBidId, BB_NAMESPACE, builderBid);\\n\\t}\\n\\n\\t// Extract block-hash from stringified SubmitBlockRequest JSON object - method will fail if the struct changes!\\n\\t// todo: extract the hash via solady: builderBidParsed.at('\\\"message\\\"').at('\\\"block_hash\\\"').value()\\n\\tfunction extractBlockHash(bytes memory builderBid, uint slot) public pure returns (string memory) {\\n\\t\\tuint resultBytesLen = 64;\\n\\t\\tuint offset = 121 + decLen(slot);\\n\\t\\tbytes memory result = new bytes(resultBytesLen);\\n\\t\\tassembly {\\n\\t\\t\\tfor { let i:=32 } lt(i, add(resultBytesLen, 32)) { i:=add(i, 32) } {\\n\\t\\t\\t\\tmstore(add(result, i), mload(add(builderBid, add(offset, i))))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\tfunction decLen(uint num) internal pure returns (uint count) {\\n\\t\\tassembly {\\n\\t\\t\\tfor { let dec := 10 } true { dec := mul(dec, 10) } {\\n\\t\\t\\t\\tcount := add(count, 1)\\n\\t\\t\\t\\tswitch lt(num, dec)\\n\\t\\t\\t\\t\\tcase 1 { break }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0xe4734565cccb30134b7d51edddbe6240d5e9b400091e1dd5869e18004b7de99e\",\"license\":\"MIT\"},\"contracts/blockad/lib/ConfidentialControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { SuaveContract, Suave } from \\\"./SuaveContract.sol\\\";\\n\\n\\nabstract contract ConfidentialControl is SuaveContract {\\n\\tstruct UnlockArgs {\\n\\t\\tbytes32 key;\\n\\t\\tbytes32 nextHash;\\n\\t}\\n\\n\\tmodifier unlock(UnlockArgs calldata unlockPair) {\\n\\t\\tcrequire(isValidKey(unlockPair.key), \\\"Invalid key\\\");\\n\\t\\t_;\\n\\t\\tpresentHash = unlockPair.nextHash;\\n\\t\\tnonce++;\\n\\t}\\n\\n\\tstring internal constant S_NAMESPACE = \\\"blockad:v0:secret\\\";\\n\\tSuave.DataId internal secretBidId;\\n\\tbytes32 internal presentHash;\\n\\tuint internal nonce;\\n\\n\\t/**********************************************************************\\n\\t *                           \\u26d3\\ufe0f ON-CHAIN METHODS                       *\\n\\t ***********************************************************************/\\n\\n\\tfunction ccCallback(bytes32 nextHash, Suave.DataId sBidId) external {\\n\\t\\tcrequire(!isInitialized(), \\\"Already initialized\\\");\\n\\t\\tpresentHash = nextHash;\\n\\t\\tsecretBidId = sBidId;\\n\\t}\\n\\n\\tfunction isInitialized() public view returns (bool) {\\n\\t\\treturn presentHash != 0;\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udd12 CONFIDENTIAL METHODS                      *\\n\\t ***********************************************************************/\\n\\n\\tfunction confidentialConstructor() public view virtual onlyConfidential returns (bytes memory) {\\n\\t\\tcrequire(!isInitialized(), \\\"Already initialized\\\");\\n\\t\\tbytes memory secret = Suave.confidentialInputs();\\n\\t\\tSuave.DataId sBidId = storeSecret(secret);\\n\\t\\tbytes32 nextHash = makeHash(abi.decode(secret, (bytes32)), nonce);\\n\\t\\treturn abi.encodeWithSelector(this.ccCallback.selector, nextHash, sBidId);\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udee0\\ufe0f INTERNAL METHODS                          *\\n\\t ***********************************************************************/\\n\\n\\tfunction storeSecret(bytes memory secret) internal view returns (Suave.DataId) {\\n\\t\\taddress[] memory peekers = new address[](3);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tpeekers[1] = Suave.FETCH_DATA_RECORDS;\\n\\t\\tpeekers[2] = Suave.CONFIDENTIAL_RETRIEVE;\\n\\t\\tSuave.DataRecord memory secretBid = Suave.newDataRecord(0, peekers, peekers, S_NAMESPACE);\\n\\t\\tSuave.confidentialStore(secretBid.id, S_NAMESPACE, secret);\\n\\t\\treturn secretBid.id;\\n\\t}\\n\\n\\tfunction isValidKey(bytes32 key) internal view returns (bool) {\\n\\t\\treturn keccak256(abi.encode(key)) == presentHash;\\n\\t}\\n\\n\\tfunction getUnlockPair() internal view returns (UnlockArgs memory) {\\n\\t\\treturn UnlockArgs(getKey(nonce), getHash(nonce + 1));\\n\\t}\\n\\n\\tfunction getHash(uint _nonce) internal view returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(getKey(_nonce)));\\n\\t}\\n\\n\\tfunction getKey(uint _nonce) internal view returns (bytes32) {\\n\\t\\treturn makeKey(getSecret(), _nonce);\\n\\t}\\n\\n\\tfunction makeHash(bytes32 secret, uint _nonce) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(makeKey(secret, _nonce)));\\n\\t}\\n\\n\\tfunction makeKey(bytes32 secret, uint _nonce) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(secret, _nonce));\\n\\t}\\n\\n\\tfunction getSecret() internal view returns (bytes32) {\\n\\t\\tbytes memory secretB = Suave.confidentialRetrieve(secretBidId, S_NAMESPACE);\\n\\t\\treturn abi.decode(secretB, (bytes32));\\n\\t}\\n}\\n\",\"keccak256\":\"0x49ac0b4b3dbbe2e58f29454ae8586b6bf97105ad52d2b001867b4930da959217\",\"license\":\"MIT\"},\"contracts/blockad/lib/SuaveContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { Suave } from \\\"../../standard_peekers/bids.sol\\\";\\n\\n\\nabstract contract SuaveContract {\\n\\terror SuaveError(string message);\\n\\terror SuaveErrorWithData(string message, bytes data);\\n\\n\\tmodifier onlyConfidential() {\\n\\t\\tcrequire(Suave.isConfidential(), \\\"Not confidential\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction simulateBundleSafe(bytes memory bundle, bool doRevert) internal view returns (bool valid, uint64 egp) {\\n\\t\\t(bool success, bytes memory d) = Suave.SIMULATE_BUNDLE.staticcall{ gas: 20_000 }(abi.encode(bundle));\\n\\t\\tcrequire(!doRevert || success, string(d));\\n\\t\\tif (success) {\\n\\t\\t\\treturn (true, abi.decode(d, (uint64)));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction crequire(bool condition, string memory message) internal pure {\\n\\t\\tif (!condition) {\\n\\t\\t\\trevert SuaveError(message);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x64eb01469afe18f29050571acd52ee35faca1da2c00a87e01d5ea0fdbcdf4bec\",\"license\":\"MIT\"},\"contracts/blockad/lib/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n\\nlibrary DynamicUintArray {\\n\\tfunction append(bytes memory a, uint e) internal pure returns (bytes memory) {\\n\\t\\treturn bytes.concat(a, TypeConversion.toBytes(e));\\n\\t}\\n\\n\\tfunction export(bytes memory a) internal pure returns (uint[] memory) {\\n\\t\\treturn TypeConversion.toUints(a);\\n\\t}\\n}\\n\\nlibrary TypeConversion {\\n\\tfunction toBytes(uint x) internal pure returns (bytes memory y) {\\n\\t\\ty = new bytes(32);\\n\\t\\tassembly {\\n\\t\\t\\tmstore(add(y, 32), x)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction toUint(bytes memory x, uint offset) internal pure returns (uint y) {\\n\\t\\tassembly {\\n\\t\\t\\ty := mload(add(x, offset))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction toUints(bytes memory xs) internal pure returns (uint[] memory ys) {\\n\\t\\tys = new uint[](xs.length / 32);\\n\\t\\tfor (uint i = 0; i < xs.length / 32; i++) {\\n\\t\\t\\tys[i] = toUint(xs, i * 32 + 32);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xec09eed9c1d6d24228b0473b9614be28b428ed832808ac3a75ffbcb444ac54af\",\"license\":\"MIT\"},\"contracts/libraries/Suave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.8;\\n\\nlibrary Suave {\\n    error PeekerReverted(address, bytes);\\n\\n    enum CryptoSignature {\\n        SECP256,\\n        BLS\\n    }\\n\\n    type DataId is bytes16;\\n\\n    struct BuildBlockArgs {\\n        uint64 slot;\\n        bytes proposerPubkey;\\n        bytes32 parent;\\n        uint64 timestamp;\\n        address feeRecipient;\\n        uint64 gasLimit;\\n        bytes32 random;\\n        Withdrawal[] withdrawals;\\n        bytes extra;\\n        bytes32 parentBeaconBlockRoot;\\n        bool fillPending;\\n    }\\n\\n    struct DataRecord {\\n        DataId id;\\n        DataId salt;\\n        uint64 decryptionCondition;\\n        address[] allowedPeekers;\\n        address[] allowedStores;\\n        string version;\\n    }\\n\\n    struct HttpRequest {\\n        string url;\\n        string method;\\n        string[] headers;\\n        bytes body;\\n        bool withFlashbotsSignature;\\n    }\\n\\n    struct SimulateTransactionResult {\\n        uint64 egp;\\n        SimulatedLog[] logs;\\n        bool success;\\n        string error;\\n    }\\n\\n    struct SimulatedLog {\\n        bytes data;\\n        address addr;\\n        bytes32[] topics;\\n    }\\n\\n    struct Withdrawal {\\n        uint64 index;\\n        uint64 validator;\\n        address Address;\\n        uint64 amount;\\n    }\\n\\n    address public constant ANYALLOWED = 0xC8df3686b4Afb2BB53e60EAe97EF043FE03Fb829;\\n\\n    address public constant IS_CONFIDENTIAL_ADDR = 0x0000000000000000000000000000000042010000;\\n\\n    address public constant BUILD_ETH_BLOCK = 0x0000000000000000000000000000000042100001;\\n\\n    address public constant CONFIDENTIAL_INPUTS = 0x0000000000000000000000000000000042010001;\\n\\n    address public constant CONFIDENTIAL_RETRIEVE = 0x0000000000000000000000000000000042020001;\\n\\n    address public constant CONFIDENTIAL_STORE = 0x0000000000000000000000000000000042020000;\\n\\n    address public constant DO_HTTPREQUEST = 0x0000000000000000000000000000000043200002;\\n\\n    address public constant ETHstaticcall = 0x0000000000000000000000000000000042100003;\\n\\n    address public constant EXTRACT_HINT = 0x0000000000000000000000000000000042100037;\\n\\n    address public constant FETCH_DATA_RECORDS = 0x0000000000000000000000000000000042030001;\\n\\n    address public constant FILL_MEV_SHARE_BUNDLE = 0x0000000000000000000000000000000043200001;\\n\\n    address public constant NEW_BUILDER = 0x0000000000000000000000000000000053200001;\\n\\n    address public constant NEW_DATA_RECORD = 0x0000000000000000000000000000000042030000;\\n\\n    address public constant PRIVATE_KEY_GEN = 0x0000000000000000000000000000000053200003;\\n\\n    address public constant SIGN_ETH_TRANSACTION = 0x0000000000000000000000000000000040100001;\\n\\n    address public constant SIGN_MESSAGE = 0x0000000000000000000000000000000040100003;\\n\\n    address public constant SIMULATE_BUNDLE = 0x0000000000000000000000000000000042100000;\\n\\n    address public constant SIMULATE_TRANSACTION = 0x0000000000000000000000000000000053200002;\\n\\n    address public constant SUBMIT_BUNDLE_JSON_RPC = 0x0000000000000000000000000000000043000001;\\n\\n    address public constant SUBMIT_ETH_BLOCK_TO_RELAY = 0x0000000000000000000000000000000042100002;\\n\\n    // Returns whether execution is off- or on-chain\\n    function isConfidential() internal view returns (bool b) {\\n        (bool success, bytes memory isConfidentialBytes) = IS_CONFIDENTIAL_ADDR.staticcall(\\\"\\\");\\n        if (!success) {\\n            revert PeekerReverted(IS_CONFIDENTIAL_ADDR, isConfidentialBytes);\\n        }\\n        assembly {\\n            // Load the length of data (first 32 bytes)\\n            let len := mload(isConfidentialBytes)\\n            // Load the data after 32 bytes, so add 0x20\\n            b := mload(add(isConfidentialBytes, 0x20))\\n        }\\n    }\\n\\n    function buildEthBlock(BuildBlockArgs memory blockArgs, DataId dataId, string memory namespace)\\n        internal\\n        view\\n        returns (bytes memory, bytes memory)\\n    {\\n        (bool success, bytes memory data) = BUILD_ETH_BLOCK.staticcall(abi.encode(blockArgs, dataId, namespace));\\n        if (!success) {\\n            revert PeekerReverted(BUILD_ETH_BLOCK, data);\\n        }\\n\\n        return abi.decode(data, (bytes, bytes));\\n    }\\n\\n    function confidentialInputs() internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_INPUTS.staticcall(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_INPUTS, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialRetrieve(DataId dataId, string memory key) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_RETRIEVE.staticcall(abi.encode(dataId, key));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_RETRIEVE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStore(DataId dataId, string memory key, bytes memory value) internal view {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE.staticcall(abi.encode(dataId, key, value));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE, data);\\n        }\\n    }\\n\\n    function doHTTPRequest(HttpRequest memory request) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = DO_HTTPREQUEST.staticcall(abi.encode(request));\\n        if (!success) {\\n            revert PeekerReverted(DO_HTTPREQUEST, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function ethstaticcall(address contractAddr, bytes memory input1) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = ETHstaticcall.staticcall(abi.encode(contractAddr, input1));\\n        if (!success) {\\n            revert PeekerReverted(ETHstaticcall, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function extractHint(bytes memory bundleData) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = EXTRACT_HINT.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(EXTRACT_HINT, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function fetchDataRecords(uint64 cond, string memory namespace) internal view returns (DataRecord[] memory) {\\n        (bool success, bytes memory data) = FETCH_DATA_RECORDS.staticcall(abi.encode(cond, namespace));\\n        if (!success) {\\n            revert PeekerReverted(FETCH_DATA_RECORDS, data);\\n        }\\n\\n        return abi.decode(data, (DataRecord[]));\\n    }\\n\\n    function fillMevShareBundle(DataId dataId) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = FILL_MEV_SHARE_BUNDLE.staticcall(abi.encode(dataId));\\n        if (!success) {\\n            revert PeekerReverted(FILL_MEV_SHARE_BUNDLE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function newBuilder() internal view returns (string memory) {\\n        (bool success, bytes memory data) = NEW_BUILDER.staticcall(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(NEW_BUILDER, data);\\n        }\\n\\n        return abi.decode(data, (string));\\n    }\\n\\n    function newDataRecord(\\n        uint64 decryptionCondition,\\n        address[] memory allowedPeekers,\\n        address[] memory allowedStores,\\n        string memory dataType\\n    ) internal view returns (DataRecord memory) {\\n        (bool success, bytes memory data) =\\n            NEW_DATA_RECORD.staticcall(abi.encode(decryptionCondition, allowedPeekers, allowedStores, dataType));\\n        if (!success) {\\n            revert PeekerReverted(NEW_DATA_RECORD, data);\\n        }\\n\\n        return abi.decode(data, (DataRecord));\\n    }\\n\\n    function privateKeyGen(CryptoSignature crypto) internal view returns (string memory) {\\n        (bool success, bytes memory data) = PRIVATE_KEY_GEN.staticcall(abi.encode(crypto));\\n        if (!success) {\\n            revert PeekerReverted(PRIVATE_KEY_GEN, data);\\n        }\\n\\n        return abi.decode(data, (string));\\n    }\\n\\n    function signEthTransaction(bytes memory txn, string memory chainId, string memory signingKey)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory data) = SIGN_ETH_TRANSACTION.staticcall(abi.encode(txn, chainId, signingKey));\\n        if (!success) {\\n            revert PeekerReverted(SIGN_ETH_TRANSACTION, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function signMessage(bytes memory digest, CryptoSignature crypto, string memory signingKey)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SIGN_MESSAGE.staticcall(abi.encode(digest, crypto, signingKey));\\n        if (!success) {\\n            revert PeekerReverted(SIGN_MESSAGE, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function simulateBundle(bytes memory bundleData) internal view returns (uint64) {\\n        (bool success, bytes memory data) = SIMULATE_BUNDLE.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_BUNDLE, data);\\n        }\\n\\n        return abi.decode(data, (uint64));\\n    }\\n\\n    function simulateTransaction(string memory sessionid, bytes memory txn)\\n        internal\\n        view\\n        returns (SimulateTransactionResult memory)\\n    {\\n        (bool success, bytes memory data) = SIMULATE_TRANSACTION.staticcall(abi.encode(sessionid, txn));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_TRANSACTION, data);\\n        }\\n\\n        return abi.decode(data, (SimulateTransactionResult));\\n    }\\n\\n    function submitBundleJsonRPC(string memory url, string memory method, bytes memory params)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_BUNDLE_JSON_RPC.staticcall(abi.encode(url, method, params));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_BUNDLE_JSON_RPC, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function submitEthBlockToRelay(string memory relayUrl, bytes memory builderBid) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_ETH_BLOCK_TO_RELAY.staticcall(abi.encode(relayUrl, builderBid));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_ETH_BLOCK_TO_RELAY, data);\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0x54efb1edf83132bf4b1c7d1df6b370c57a8d2ad7c77c690bcd146df2d8c6d224\",\"license\":\"UNLICENSED\"},\"contracts/standard_peekers/bids.sol\":{\"content\":\"pragma solidity ^0.8.8;\\n\\nimport \\\"../libraries/Suave.sol\\\";\\n\\ncontract AnyBundleContract {\\n    event DataRecordEvent(Suave.DataId dataId, uint64 decryptionCondition, address[] allowedPeekers);\\n\\n    function fetchConfidentialBundleData() public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        bytes memory confidentialInputs = Suave.confidentialInputs();\\n        return abi.decode(confidentialInputs, (bytes));\\n    }\\n\\n    function emitDataRecord(Suave.DataRecord calldata dataRecord) public {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n    }\\n}\\n\\ncontract BundleContract is AnyBundleContract {\\n    function newBundle(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores\\n    ) external payable returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        bytes memory bundleData = this.fetchConfidentialBundleData();\\n\\n        uint64 egp = Suave.simulateBundle(bundleData);\\n\\n        Suave.DataRecord memory dataRecord =\\n            Suave.newDataRecord(decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"default:v0:ethBundles\\\");\\n\\n        Suave.confidentialStore(dataRecord.id, \\\"default:v0:ethBundles\\\", bundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"default:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\n        return emitAndReturn(dataRecord, bundleData);\\n    }\\n\\n    function emitAndReturn(Suave.DataRecord memory dataRecord, bytes memory) internal virtual returns (bytes memory) {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(dataRecord));\\n    }\\n}\\n\\ncontract EthBundleSenderContract is BundleContract {\\n    string[] public builderUrls;\\n\\n    constructor(string[] memory builderUrls_) {\\n        builderUrls = builderUrls_;\\n    }\\n\\n    function emitAndReturn(Suave.DataRecord memory dataRecord, bytes memory bundleData)\\n        internal\\n        virtual\\n        override\\n        returns (bytes memory)\\n    {\\n        for (uint256 i = 0; i < builderUrls.length; i++) {\\n            Suave.submitBundleJsonRPC(builderUrls[i], \\\"eth_sendBundle\\\", bundleData);\\n        }\\n\\n        return BundleContract.emitAndReturn(dataRecord, bundleData);\\n    }\\n}\\n\\ncontract MevShareContract is AnyBundleContract {\\n    event HintEvent(Suave.DataId dataId, bytes hint);\\n\\n    event MatchEvent(Suave.DataId matchDataId, bytes matchHint);\\n\\n    function newTransaction(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores\\n    ) external payable returns (bytes memory) {\\n        // 0. check confidential execution\\n        require(Suave.isConfidential());\\n\\n        // 1. fetch bundle data\\n        bytes memory bundleData = this.fetchConfidentialBundleData();\\n\\n        // 2. sim bundle\\n        uint64 egp = Suave.simulateBundle(bundleData);\\n\\n        // 3. extract hint\\n        bytes memory hint = Suave.extractHint(bundleData);\\n\\n        // // 4. store bundle and sim results\\n        Suave.DataRecord memory dataRecord = Suave.newDataRecord(\\n            decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"mevshare:v0:unmatchedBundles\\\"\\n        );\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundles\\\", bundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(egp));\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit HintEvent(dataRecord.id, hint);\\n\\n        // // 5. return \\\"callback\\\" to emit hint onchain\\n        return bytes.concat(this.emitDataRecordAndHint.selector, abi.encode(dataRecord, hint));\\n    }\\n\\n    function emitDataRecordAndHint(Suave.DataRecord calldata dataRecord, bytes memory hint) public {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit HintEvent(dataRecord.id, hint);\\n    }\\n\\n    function newMatch(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores,\\n        Suave.DataId sharedataId\\n    ) external payable returns (bytes memory) {\\n        // WARNING : this function will copy the original mev share bid\\n        // into a new key with potentially different permsissions\\n\\n        require(Suave.isConfidential());\\n        // 1. fetch confidential data\\n        bytes memory matchBundleData = this.fetchConfidentialBundleData();\\n\\n        // 2. sim match alone for validity\\n        uint64 egp = Suave.simulateBundle(matchBundleData);\\n\\n        // 3. extract hint\\n        bytes memory matchHint = Suave.extractHint(matchBundleData);\\n\\n        Suave.DataRecord memory dataRecord = Suave.newDataRecord(\\n            decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"mevshare:v0:matchDataRecords\\\"\\n        );\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundles\\\", matchBundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(0));\\n\\n        //4. merge data records\\n        Suave.DataId[] memory dataRecords = new Suave.DataId[](2);\\n        dataRecords[0] = sharedataId;\\n        dataRecords[1] = dataRecord.id;\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:mergedDataRecords\\\", abi.encode(dataRecords));\\n\\n        return emitMatchDataRecordAndHint(dataRecord, matchHint);\\n    }\\n\\n    function emitMatchDataRecordAndHint(Suave.DataRecord memory dataRecord, bytes memory matchHint)\\n        internal\\n        virtual\\n        returns (bytes memory)\\n    {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit MatchEvent(dataRecord.id, matchHint);\\n\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(dataRecord));\\n    }\\n}\\n\\ncontract MevShareBundleSenderContract is MevShareContract {\\n    string[] public builderUrls;\\n\\n    constructor(string[] memory builderUrls_) {\\n        builderUrls = builderUrls_;\\n    }\\n\\n    function emitMatchDataRecordAndHint(Suave.DataRecord memory dataRecord, bytes memory matchHint)\\n        internal\\n        virtual\\n        override\\n        returns (bytes memory)\\n    {\\n        bytes memory bundleData = Suave.fillMevShareBundle(dataRecord.id);\\n        for (uint256 i = 0; i < builderUrls.length; i++) {\\n            Suave.submitBundleJsonRPC(builderUrls[i], \\\"mev_sendBundle\\\", bundleData);\\n        }\\n\\n        return MevShareContract.emitMatchDataRecordAndHint(dataRecord, matchHint);\\n    }\\n}\\n\\n/* Not tested or implemented on the precompile side */\\nstruct EgpRecordPair {\\n    uint64 egp; // in wei, beware overflow\\n    Suave.DataId dataId;\\n}\\n\\ncontract EthBlockContract is AnyBundleContract {\\n    event BuilderBoostBidEvent(Suave.DataId dataId, bytes builderBid);\\n\\n    function idsEqual(Suave.DataId _l, Suave.DataId _r) public pure returns (bool) {\\n        bytes memory l = abi.encodePacked(_l);\\n        bytes memory r = abi.encodePacked(_r);\\n        for (uint256 i = 0; i < l.length; i++) {\\n            if (bytes(l)[i] != r[i]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function buildMevShare(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        Suave.DataRecord[] memory allShareMatchDataRecords =\\n            Suave.fetchDataRecords(blockHeight, \\\"mevshare:v0:matchDataRecords\\\");\\n        Suave.DataRecord[] memory allShareUserDataRecords =\\n            Suave.fetchDataRecords(blockHeight, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\n        if (allShareUserDataRecords.length == 0) {\\n            revert Suave.PeekerReverted(address(this), \\\"no data records\\\");\\n        }\\n\\n        Suave.DataRecord[] memory allRecords = new Suave.DataRecord[](allShareUserDataRecords.length);\\n        for (uint256 i = 0; i < allShareUserDataRecords.length; i++) {\\n            // TODO: sort matches by egp first!\\n            Suave.DataRecord memory dataRecordToInsert = allShareUserDataRecords[i]; // will be updated with the best match if any\\n            for (uint256 j = 0; j < allShareMatchDataRecords.length; j++) {\\n                // TODO: should be done once at the start and sorted\\n                Suave.DataId[] memory mergeddataIds = abi.decode(\\n                    Suave.confidentialRetrieve(allShareMatchDataRecords[j].id, \\\"mevshare:v0:mergedDataRecords\\\"),\\n                    (Suave.DataId[])\\n                );\\n                if (idsEqual(mergeddataIds[0], allShareUserDataRecords[i].id)) {\\n                    dataRecordToInsert = allShareMatchDataRecords[j];\\n                    break;\\n                }\\n            }\\n            allRecords[i] = dataRecordToInsert;\\n        }\\n\\n        EgpRecordPair[] memory bidsByEGP = new EgpRecordPair[](allRecords.length);\\n        for (uint256 i = 0; i < allRecords.length; i++) {\\n            bytes memory simResults = Suave.confidentialRetrieve(allRecords[i].id, \\\"mevshare:v0:ethBundleSimResults\\\");\\n            uint64 egp = abi.decode(simResults, (uint64));\\n            bidsByEGP[i] = EgpRecordPair(egp, allRecords[i].id);\\n        }\\n\\n        // Bubble sort, cause why not\\n        uint256 n = bidsByEGP.length;\\n        for (uint256 i = 0; i < n - 1; i++) {\\n            for (uint256 j = i + 1; j < n; j++) {\\n                if (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n                    EgpRecordPair memory temp = bidsByEGP[i];\\n                    bidsByEGP[i] = bidsByEGP[j];\\n                    bidsByEGP[j] = temp;\\n                }\\n            }\\n        }\\n\\n        Suave.DataId[] memory alldataIds = new Suave.DataId[](allRecords.length);\\n        for (uint256 i = 0; i < bidsByEGP.length; i++) {\\n            alldataIds[i] = bidsByEGP[i].dataId;\\n        }\\n\\n        return buildAndEmit(blockArgs, blockHeight, alldataIds, \\\"mevshare:v0\\\");\\n    }\\n\\n    function buildFromPool(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        Suave.DataRecord[] memory allRecords = Suave.fetchDataRecords(blockHeight, \\\"default:v0:ethBundles\\\");\\n        if (allRecords.length == 0) {\\n            revert Suave.PeekerReverted(address(this), \\\"no data records\\\");\\n        }\\n\\n        EgpRecordPair[] memory bidsByEGP = new EgpRecordPair[](allRecords.length);\\n        for (uint256 i = 0; i < allRecords.length; i++) {\\n            bytes memory simResults = Suave.confidentialRetrieve(allRecords[i].id, \\\"default:v0:ethBundleSimResults\\\");\\n            uint64 egp = abi.decode(simResults, (uint64));\\n            bidsByEGP[i] = EgpRecordPair(egp, allRecords[i].id);\\n        }\\n\\n        // Bubble sort, cause why not\\n        uint256 n = bidsByEGP.length;\\n        for (uint256 i = 0; i < n - 1; i++) {\\n            for (uint256 j = i + 1; j < n; j++) {\\n                if (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n                    EgpRecordPair memory temp = bidsByEGP[i];\\n                    bidsByEGP[i] = bidsByEGP[j];\\n                    bidsByEGP[j] = temp;\\n                }\\n            }\\n        }\\n\\n        Suave.DataId[] memory alldataIds = new Suave.DataId[](allRecords.length);\\n        for (uint256 i = 0; i < bidsByEGP.length; i++) {\\n            alldataIds[i] = bidsByEGP[i].dataId;\\n        }\\n\\n        return buildAndEmit(blockArgs, blockHeight, alldataIds, \\\"\\\");\\n    }\\n\\n    function buildAndEmit(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory records,\\n        string memory relayUrl\\n    ) public virtual returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        (Suave.DataRecord memory blockBid, bytes memory builderBid) =\\n            this.doBuild(blockArgs, blockHeight, records, relayUrl);\\n\\n        emit BuilderBoostBidEvent(blockBid.id, builderBid);\\n        emit DataRecordEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n        return bytes.concat(this.emitBuilderBidAndBid.selector, abi.encode(blockBid, builderBid));\\n    }\\n\\n    function doBuild(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory records,\\n        string memory relayUrl\\n    ) public view returns (Suave.DataRecord memory, bytes memory) {\\n        address[] memory allowedPeekers = new address[](2);\\n        allowedPeekers[0] = address(this);\\n        allowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\n        Suave.DataRecord memory blockBid =\\n            Suave.newDataRecord(blockHeight, allowedPeekers, allowedPeekers, \\\"default:v0:mergedDataRecords\\\");\\n        Suave.confidentialStore(blockBid.id, \\\"default:v0:mergedDataRecords\\\", abi.encode(records));\\n\\n        (bytes memory builderBid, bytes memory payload) = Suave.buildEthBlock(blockArgs, blockBid.id, relayUrl);\\n        Suave.confidentialStore(blockBid.id, \\\"default:v0:builderPayload\\\", payload); // only through this.unlock\\n\\n        return (blockBid, builderBid);\\n    }\\n\\n    function emitBuilderBidAndBid(Suave.DataRecord memory dataRecord, bytes memory builderBid)\\n        public\\n        returns (Suave.DataRecord memory, bytes memory)\\n    {\\n        emit BuilderBoostBidEvent(dataRecord.id, builderBid);\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        return (dataRecord, builderBid);\\n    }\\n\\n    function unlock(Suave.DataId dataId, bytes memory signedBlindedHeader) public view returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        // TODO: verify the header is correct\\n        // TODO: incorporate protocol name\\n        bytes memory payload = Suave.confidentialRetrieve(dataId, \\\"default:v0:builderPayload\\\");\\n        return payload;\\n    }\\n}\\n\\ncontract EthBlockBidSenderContract is EthBlockContract {\\n    string boostRelayUrl;\\n\\n    constructor(string memory boostRelayUrl_) {\\n        boostRelayUrl = boostRelayUrl_;\\n    }\\n\\n    function buildAndEmit(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory dataRecords,\\n        string memory namespace\\n    ) public virtual override returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        (Suave.DataRecord memory blockDataRecord, bytes memory builderBid) =\\n            this.doBuild(blockArgs, blockHeight, dataRecords, namespace);\\n        Suave.submitEthBlockToRelay(boostRelayUrl, builderBid);\\n\\n        emit DataRecordEvent(blockDataRecord.id, blockDataRecord.decryptionCondition, blockDataRecord.allowedPeekers);\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(blockDataRecord));\\n    }\\n}\\n\",\"keccak256\":\"0xe6f47cee3c14410f8ee686e33e07f4352fb3d9c3b5bc71bc3662f72b973ea5f8\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063bb7bae0a1161008c578063ee2cc36411610066578063ee2cc36414610203578063fd38f21d1461021f578063ff4aec7d1461024f578063ffbbfcb01461026d576100cf565b8063bb7bae0a146101ad578063bcbb3597146101c9578063d7e84fbf146101e5576100cf565b8063060b0d17146100d4578063392e53cd1461010457806361b8ce8c1461012257806364e65a62146101405780637e48532c1461015c57806381d12c581461017a575b600080fd5b6100ee60048036038101906100e99190612704565b61028b565b6040516100fb91906127e8565b60405180910390f35b61010c6104fc565b6040516101199190612819565b60405180910390f35b61012a61050c565b604051610137919061284d565b60405180910390f35b61015a6004803603810190610155919061288c565b610512565b005b6101646105df565b60405161017191906127e8565b60405180910390f35b610194600480360381019061018f9190612973565b610634565b6040516101a49493929190612a42565b60405180910390f35b6101c760048036038101906101c29190612aba565b610709565b005b6101e360048036038101906101de9190612b19565b610784565b005b6101ed6107f6565b6040516101fa9190612bc1565b60405180910390f35b61021d60048036038101906102189190612bfb565b61081c565b005b61023960048036038101906102349190612cf8565b610934565b60405161024691906127e8565b60405180910390f35b610257610b2e565b60405161026491906127e8565b60405180910390f35b610275610b67565b604051610282919061284d565b60405180910390f35b60606102d3610298610b74565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c3c565b61031a6000600480549050116040518060400160405280600b81526020017f4e6f207265717565737473000000000000000000000000000000000000000000815250610c3c565b6000806103308467ffffffffffffffff16610c82565b915091506103846000836040015167ffffffffffffffff16116040518060400160405280600f81526020017f4e6f2076616c6964206f66666572730000000000000000000000000000000000815250610c3c565b61038e8483610ed9565b81602001518561010001819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dac44aef87876040518363ffffffff1660e01b81526004016103fb929190612fea565b6000604051808303816000875af115801561041a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610443919061308a565b90506364e65a6260e01b81846000015185604001516040516020016104699291906130d3565b60405160208183030381529060405284610481611134565b604051602401610494949392919061312b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935050505092915050565b60008060001b6001541415905090565b60055481565b8061055e6105238260000135611176565b6040518060400160405280600b81526020017f496e76616c6964206b6579000000000000000000000000000000000000000000815250610c3c565b60008351111561057a57610579610574846111aa565b6111bc565b5b60006105a8600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876113b6565b90506105b48582611484565b508060200135600181905550600260008154809291906105d3906131b4565b91905055505050505050565b60606106276105ec610b74565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c3c565b61062f6114df565b905090565b6004818154811061064457600080fd5b906000526020600020906004020160009150905080600001549080600101805461066d9061322b565b80601f01602080910402602001604051908101604052809291908181526020018280546106999061322b565b80156106e65780601f106106bb576101008083540402835291602001916106e6565b820191906000526020600020905b8154815290600101906020018083116106c957829003601f168201915b5050505050908060020154908060030160009054906101000a900460801b905084565b6107506107146104fc565b156040518060400160405280601381526020017f416c726561647920696e697469616c697a656400000000000000000000000000815250610c3c565b81600181905550806000806101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055505050565b7ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb478160000160208101906107b8919061325c565b8260400160208101906107cb9190613289565b8380606001906107db91906132c5565b6040516107eb94939291906133dc565b60405180910390a150565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8061086861082d8260000135611176565b6040518060400160405280600b81526020017f496e76616c6964206b6579000000000000000000000000000000000000000000815250610c3c565b600483908060018154018082558091505060019003906000526020600020906004020160009091909190915081816108a091906138a6565b5050600560008154809291906108b5906131b4565b919050555082600001357fbf51327c63fb3c8741d4233ae0315e3e1a74641532f4e59c307f72314a3462358480602001906108f091906134d0565b8660400135604051610904939291906138e1565b60405180910390a280602001356001819055506002600081548092919061092a906131b4565b9190505550505050565b606061097c610941610b74565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c3c565b60003073ffffffffffffffffffffffffffffffffffffffff1663ff4aec7d6040518163ffffffff1660e01b81526004016000604051808303816000875af11580156109cb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109f4919061308a565b90506000610a0382600161162a565b915050610a5260008267ffffffffffffffff16116040518060400160405280600b81526020017f65677020746f6f206c6f77000000000000000000000000000000000000000000815250610c3c565b6000610a5d83611705565b90506000604051806080016040528060055481526020018781526020018867ffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff1916815250905063ee2cc36460e01b81610ab4611134565b604051602401610ac59291906139de565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505094505050505092915050565b6060610b38610b74565b610b4157600080fd5b6000610b4b61183b565b905080806020019051810190610b61919061308a565b91505090565b6000600480549050905090565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff16604051610ba090613a3f565b600060405180830381855afa9150503d8060008114610bdb576040519150601f19603f3d011682016040523d82523d6000602084013e610be0565b606091505b509150915081610c2d576342010000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610c24929190613a63565b60405180910390fd5b80516020820151935050505090565b81610c7e57806040517f0c25cd98000000000000000000000000000000000000000000000000000000008152600401610c759190613a93565b60405180910390fd5b5050565b610c8a612052565b606060005b600480549050811015610ed357600060048281548110610cb257610cb1613ab5565b5b906000526020600020906004020160405180608001604052908160008201548152602001600182018054610ce59061322b565b80601f0160208091040260200160405190810160405280929190818152602001828054610d119061322b565b8015610d5e5780601f10610d3357610100808354040283529160200191610d5e565b820191906000526020600020905b815481529060010190602001808311610d4157829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152505090508481604001511015610dd757610dcf828461191290919063ffffffff16565b925050610ec2565b6000610e1c82606001516040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c650000000000000000815250611946565b9050600080610e2c83600061162a565b91509150811580610e47575060008167ffffffffffffffff16145b15610e6657610e5f858761191290919063ffffffff16565b9550610ebd565b866040015167ffffffffffffffff168167ffffffffffffffff161115610ebc57604051806080016040528085600001518152602001856020015181526020018267ffffffffffffffff1681526020018481525096505b5b505050505b80610ecc906131b4565b9050610c8f565b50915091565b6000600367ffffffffffffffff811115610ef657610ef561221e565b5b604051908082528060200260200182016040528015610f245781602001602082028036833780820191505090505b509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110610f5e57610f5d613ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634210000181600181518110610fb157610fb0613ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050308160028151811061100057610fff613ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600061107d8483846040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c65730000000000000000000000815250611a2d565b90506110c781600001516040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152508560600151611b33565b61112e81600001516040518060400160405280601e81526020017f64656661756c743a76303a65746842756e646c6553696d526573756c74730000815250856040015160405160200161111a9190613ae4565b604051602081830303815290604052611b33565b50505050565b61113c612084565b6040518060400160405280611152600254611c16565b815260200161116e60016002546111699190613aff565b611c30565b815250905090565b60006001548260405160200161118c9190613b64565b60405160208183030381529060405280519060200120149050919050565b60606111b582611c68565b9050919050565b6000815190505b60008111156113b2576000826001836111dc9190613b7f565b815181106111ed576111ec613ab5565b5b6020026020010151905060006004828154811061120d5761120c613ab5565b5b906000526020600020906004020160000154905060016004805490506112339190613b7f565b821015611304576004600160048054905061124e9190613b7f565b8154811061125f5761125e613ab5565b5b90600052602060002090600402016004838154811061128157611280613ab5565b5b90600052602060002090600402016000820154816000015560018201816001019080546112ad9061322b565b6112b89291906120a4565b50600282015481600201556003820160009054906101000a900460801b8160030160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055509050505b600480548061131657611315613bb3565b5b60019003818190600052602060002090600402016000808201600090556001820160006113439190612131565b60028201600090556003820160006101000a8154906fffffffffffffffffffffffffffffffff021916905550509055807f5fa4d8243d9549d33d615899224efcef51bfcacb970a31f68862ce74c858dbf060405160405180910390a25050806113ab90613be2565b90506111c3565b5050565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516113e09190613c3c565b6000604051808303816000865af19150503d806000811461141d576040519150601f19603f3d011682016040523d82523d6000602084013e611422565b606091505b5091509150611466826040518060400160405280601481526020017f45787465726e616c2063616c6c206661696c6564000000000000000000000000815250610c3c565b8080602001905181019061147a9190613cc3565b9250505092915050565b6000808380602001905181019061149b9190613d36565b91509150817f91badfc611f9ad79e4d6a58176e5c4cedc4f8ed9001447825f503e792bbf09e282856040516114d1929190613d76565b60405180910390a250505050565b60606115276114ec610b74565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c3c565b61156e6115326104fc565b156040518060400160405280601381526020017f416c726561647920696e697469616c697a656400000000000000000000000000815250610c3c565b600061157861183b565b9050600061158582611d33565b905060006115a8838060200190518101906115a09190613dbb565b600254611f0f565b905063bb7bae0a60e01b81836040516024016115c5929190613de8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935050505090565b600080600080634210000073ffffffffffffffffffffffffffffffffffffffff16614e208760405160200161165f91906127e8565b60405160208183030381529060405260405161167b9190613c3c565b6000604051808303818686fa925050503d80600081146116b7576040519150601f19603f3d011682016040523d82523d6000602084013e6116bc565b606091505b50915091506116d48515806116ce5750825b82610c3c565b81156116fb576001818060200190518101906116f09190613e11565b9350935050506116fe565b50505b9250929050565b600080600167ffffffffffffffff8111156117235761172261221e565b5b6040519080825280602002602001820160405280156117515781602001602082028036833780820191505090505b509050308160008151811061176957611768613ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006117e7600083846040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c650000000000000000815250611a2d565b905061182d81600001516040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c65000000000000000081525086611b33565b806000015192505050919050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff1660405160200160405160208183030381529060405260405161187d9190613c3c565b600060405180830381855afa9150503d80600081146118b8576040519150601f19603f3d011682016040523d82523d6000602084013e6118bd565b606091505b50915091508161190a576342010001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611901929190613a63565b60405180910390fd5b809250505090565b60608261191e83611f49565b60405160200161192f929190613e3e565b604051602081830303815290604052905092915050565b6060600080634202000173ffffffffffffffffffffffffffffffffffffffff168585604051602001611979929190613e62565b6040516020818303038152906040526040516119959190613c3c565b600060405180830381855afa9150503d80600081146119d0576040519150601f19603f3d011682016040523d82523d6000602084013e6119d5565b606091505b509150915081611a22576342020001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611a19929190613a63565b60405180910390fd5b809250505092915050565b611a35612171565b600080634203000073ffffffffffffffffffffffffffffffffffffffff1687878787604051602001611a6a9493929190613f18565b604051602081830303815290604052604051611a869190613c3c565b600060405180830381855afa9150503d8060008114611ac1576040519150601f19603f3d011682016040523d82523d6000602084013e611ac6565b606091505b509150915081611b13576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611b0a929190613a63565b60405180910390fd5b80806020019051810190611b279190614153565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001611b669392919061419c565b604051602081830303815290604052604051611b829190613c3c565b600060405180830381855afa9150503d8060008114611bbd576040519150601f19603f3d011682016040523d82523d6000602084013e611bc2565b606091505b509150915081611c0f576342020000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611c06929190613a63565b60405180910390fd5b5050505050565b6000611c29611c23611fa6565b83612011565b9050919050565b6000611c3b82611c16565b604051602001611c4b9190613b64565b604051602081830303815290604052805190602001209050919050565b606060208251611c789190614210565b67ffffffffffffffff811115611c9157611c9061221e565b5b604051908082528060200260200182016040528015611cbf5781602001602082028036833780820191505090505b50905060005b60208351611cd39190614210565b811015611d2d57611cfb8360208084611cec9190614241565b611cf69190613aff565b612044565b828281518110611d0e57611d0d613ab5565b5b6020026020010181815250508080611d25906131b4565b915050611cc5565b50919050565b600080600367ffffffffffffffff811115611d5157611d5061221e565b5b604051908082528060200260200182016040528015611d7f5781602001602082028036833780820191505090505b5090503081600081518110611d9757611d96613ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634203000181600181518110611dea57611de9613ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634202000181600281518110611e3d57611e3c613ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000611ebb600083846040518060400160405280601181526020017f626c6f636b61643a76303a736563726574000000000000000000000000000000815250611a2d565b9050611f0181600001516040518060400160405280601181526020017f626c6f636b61643a76303a73656372657400000000000000000000000000000081525086611b33565b806000015192505050919050565b6000611f1b8383612011565b604051602001611f2b9190613b64565b60405160208183030381529060405280519060200120905092915050565b6060602067ffffffffffffffff811115611f6657611f6561221e565b5b6040519080825280601f01601f191660200182016040528015611f985781602001600182028036833780820191505090505b509050816020820152919050565b600080611ff560008054906101000a900460801b6040518060400160405280601181526020017f626c6f636b61643a76303a736563726574000000000000000000000000000000815250611946565b90508080602001905181019061200b9190613dbb565b91505090565b6000828260405160200161202692919061429b565b60405160208183030381529060405280519060200120905092915050565b600081830151905092915050565b60405180608001604052806000815260200160608152602001600067ffffffffffffffff168152602001606081525090565b604051806040016040528060008019168152602001600080191681525090565b8280546120b09061322b565b90600052602060002090601f0160209004810192826120d25760008555612120565b82601f106120e35780548555612120565b8280016001018555821561212057600052602060002091601f016020900482015b8281111561211f578254825591600101919060010190612104565b5b50905061212d91906121d7565b5090565b50805461213d9061322b565b6000825580601f1061214f575061216e565b601f01602090049060005260206000209081019061216d91906121d7565b5b50565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b5b808211156121f05760008160009055506001016121d8565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122568261220d565b810181811067ffffffffffffffff821117156122755761227461221e565b5b80604052505050565b60006122886121f4565b9050612294828261224d565b919050565b600080fd5b600067ffffffffffffffff82169050919050565b6122bb8161229e565b81146122c657600080fd5b50565b6000813590506122d8816122b2565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156123035761230261221e565b5b61230c8261220d565b9050602081019050919050565b82818337600083830152505050565b600061233b612336846122e8565b61227e565b905082815260208101848484011115612357576123566122e3565b5b612362848285612319565b509392505050565b600082601f83011261237f5761237e6122de565b5b813561238f848260208601612328565b91505092915050565b6000819050919050565b6123ab81612398565b81146123b657600080fd5b50565b6000813590506123c8816123a2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123f9826123ce565b9050919050565b612409816123ee565b811461241457600080fd5b50565b60008135905061242681612400565b92915050565b600067ffffffffffffffff8211156124475761244661221e565b5b602082029050602081019050919050565b600080fd5b60006080828403121561247357612472612208565b5b61247d608061227e565b9050600061248d848285016122c9565b60008301525060206124a1848285016122c9565b60208301525060406124b584828501612417565b60408301525060606124c9848285016122c9565b60608301525092915050565b60006124e86124e38461242c565b61227e565b9050808382526020820190506080840283018581111561250b5761250a612458565b5b835b818110156125345780612520888261245d565b84526020840193505060808101905061250d565b5050509392505050565b600082601f830112612553576125526122de565b5b81356125638482602086016124d5565b91505092915050565b60008115159050919050565b6125818161256c565b811461258c57600080fd5b50565b60008135905061259e81612578565b92915050565b600061016082840312156125bb576125ba612208565b5b6125c661016061227e565b905060006125d6848285016122c9565b600083015250602082013567ffffffffffffffff8111156125fa576125f9612299565b5b6126068482850161236a565b602083015250604061261a848285016123b9565b604083015250606061262e848285016122c9565b606083015250608061264284828501612417565b60808301525060a0612656848285016122c9565b60a08301525060c061266a848285016123b9565b60c08301525060e082013567ffffffffffffffff81111561268e5761268d612299565b5b61269a8482850161253e565b60e08301525061010082013567ffffffffffffffff8111156126bf576126be612299565b5b6126cb8482850161236a565b610100830152506101206126e1848285016123b9565b610120830152506101406126f78482850161258f565b6101408301525092915050565b6000806040838503121561271b5761271a6121fe565b5b600083013567ffffffffffffffff81111561273957612738612203565b5b612745858286016125a4565b9250506020612756858286016122c9565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561279a57808201518184015260208101905061277f565b838111156127a9576000848401525b50505050565b60006127ba82612760565b6127c4818561276b565b93506127d481856020860161277c565b6127dd8161220d565b840191505092915050565b6000602082019050818103600083015261280281846127af565b905092915050565b6128138161256c565b82525050565b600060208201905061282e600083018461280a565b92915050565b6000819050919050565b61284781612834565b82525050565b6000602082019050612862600083018461283e565b92915050565b600080fd5b60006040828403121561288357612882612868565b5b81905092915050565b60008060008060a085870312156128a6576128a56121fe565b5b600085013567ffffffffffffffff8111156128c4576128c3612203565b5b6128d08782880161236a565b945050602085013567ffffffffffffffff8111156128f1576128f0612203565b5b6128fd8782880161236a565b935050604085013567ffffffffffffffff81111561291e5761291d612203565b5b61292a8782880161236a565b925050606061293b8782880161286d565b91505092959194509250565b61295081612834565b811461295b57600080fd5b50565b60008135905061296d81612947565b92915050565b600060208284031215612989576129886121fe565b5b60006129978482850161295e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006129c7826129a0565b6129d181856129ab565b93506129e181856020860161277c565b6129ea8161220d565b840191505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000612a2c826129f5565b9050919050565b612a3c81612a21565b82525050565b6000608082019050612a57600083018761283e565b8181036020830152612a6981866129bc565b9050612a78604083018561283e565b612a856060830184612a33565b95945050505050565b612a97816129f5565b8114612aa257600080fd5b50565b600081359050612ab481612a8e565b92915050565b60008060408385031215612ad157612ad06121fe565b5b6000612adf858286016123b9565b9250506020612af085828601612aa5565b9150509250929050565b600060c08284031215612b1057612b0f612868565b5b81905092915050565b600060208284031215612b2f57612b2e6121fe565b5b600082013567ffffffffffffffff811115612b4d57612b4c612203565b5b612b5984828501612afa565b91505092915050565b6000819050919050565b6000612b87612b82612b7d846123ce565b612b62565b6123ce565b9050919050565b6000612b9982612b6c565b9050919050565b6000612bab82612b8e565b9050919050565b612bbb81612ba0565b82525050565b6000602082019050612bd66000830184612bb2565b92915050565b600060808284031215612bf257612bf1612868565b5b81905092915050565b60008060608385031215612c1257612c116121fe565b5b600083013567ffffffffffffffff811115612c3057612c2f612203565b5b612c3c85828601612bdc565b9250506020612c4d8582860161286d565b9150509250929050565b600067ffffffffffffffff821115612c7257612c7161221e565b5b612c7b8261220d565b9050602081019050919050565b6000612c9b612c9684612c57565b61227e565b905082815260208101848484011115612cb757612cb66122e3565b5b612cc2848285612319565b509392505050565b600082601f830112612cdf57612cde6122de565b5b8135612cef848260208601612c88565b91505092915050565b60008060408385031215612d0f57612d0e6121fe565b5b6000612d1d858286016122c9565b925050602083013567ffffffffffffffff811115612d3e57612d3d612203565b5b612d4a85828601612cca565b9150509250929050565b612d5d8161229e565b82525050565b600082825260208201905092915050565b6000612d7f82612760565b612d898185612d63565b9350612d9981856020860161277c565b612da28161220d565b840191505092915050565b612db681612398565b82525050565b612dc5816123ee565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b608082016000820151612e0d6000850182612d54565b506020820151612e206020850182612d54565b506040820151612e336040850182612dbc565b506060820151612e466060850182612d54565b50505050565b6000612e588383612df7565b60808301905092915050565b6000602082019050919050565b6000612e7c82612dcb565b612e868185612dd6565b9350612e9183612de7565b8060005b83811015612ec2578151612ea98882612e4c565b9750612eb483612e64565b925050600181019050612e95565b5085935050505092915050565b612ed88161256c565b82525050565b600061016083016000830151612ef76000860182612d54565b5060208301518482036020860152612f0f8282612d74565b9150506040830151612f246040860182612dad565b506060830151612f376060860182612d54565b506080830151612f4a6080860182612dbc565b5060a0830151612f5d60a0860182612d54565b5060c0830151612f7060c0860182612dad565b5060e083015184820360e0860152612f888282612e71565b915050610100830151848203610100860152612fa48282612d74565b915050610120830151612fbb610120860182612dad565b50610140830151612fd0610140860182612ecf565b508091505092915050565b612fe48161229e565b82525050565b600060408201905081810360008301526130048185612ede565b90506130136020830184612fdb565b9392505050565b600061302d613028846122e8565b61227e565b905082815260208101848484011115613049576130486122e3565b5b61305484828561277c565b509392505050565b600082601f830112613071576130706122de565b5b815161308184826020860161301a565b91505092915050565b6000602082840312156130a05761309f6121fe565b5b600082015167ffffffffffffffff8111156130be576130bd612203565b5b6130ca8482850161305c565b91505092915050565b60006040820190506130e8600083018561283e565b6130f56020830184612fdb565b9392505050565b6040820160008201516131126000850182612dad565b5060208201516131256020850182612dad565b50505050565b600060a082019050818103600083015261314581876127af565b9050818103602083015261315981866127af565b9050818103604083015261316d81856127af565b905061317c60608301846130fc565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131bf82612834565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131f1576131f0613185565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061324357607f821691505b602082108103613256576132556131fc565b5b50919050565b600060208284031215613272576132716121fe565b5b600061328084828501612aa5565b91505092915050565b60006020828403121561329f5761329e6121fe565b5b60006132ad848285016122c9565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126132e2576132e16132b6565b5b80840192508235915067ffffffffffffffff821115613304576133036132bb565b5b6020830192506020820236038313156133205761331f6132c0565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b600061334f8383612dbc565b60208301905092915050565b600061336a6020840184612417565b905092915050565b6000602082019050919050565b600061338b8385613328565b935061339682613339565b8060005b858110156133cf576133ac828461335b565b6133b68882613343565b97506133c183613372565b92505060018101905061339a565b5085925050509392505050565b60006060820190506133f16000830187612a33565b6133fe6020830186612fdb565b818103604083015261341181848661337f565b905095945050505050565b6000813561342981612947565b80915050919050565b60008160001b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61346b84613432565b9350801983169250808416831791505092915050565b600061349c61349761349284612834565b612b62565b612834565b9050919050565b6000819050919050565b6134b682613481565b6134c96134c2826134a3565b835461343f565b8255505050565b600080833560016020038436030381126134ed576134ec6132b6565b5b80840192508235915067ffffffffffffffff82111561350f5761350e6132bb565b5b60208301925060018202360383131561352b5761352a6132c0565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026135a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613563565b6135aa8683613563565b95508019841693508086168417925050509392505050565b6135cb83613481565b6135df6135d7826134a3565b848454613570565b825550505050565b600090565b6135f46135e7565b6135ff8184846135c2565b505050565b5b81811015613623576136186000826135ec565b600181019050613605565b5050565b601f821115613668576136398161353e565b61364284613553565b81016020851015613651578190505b61366561365d85613553565b830182613604565b50505b505050565b600082821c905092915050565b600061368b6000198460080261366d565b1980831691505092915050565b60006136a4838361367a565b9150826002028217905092915050565b6136be8383613533565b67ffffffffffffffff8111156136d7576136d661221e565b5b6136e1825461322b565b6136ec828285613627565b6000601f83116001811461371b5760008415613709578287013590505b6137138582613698565b86555061377b565b601f1984166137298661353e565b60005b828110156137515784890135825560018201915060208501945060208101905061372c565b8683101561376e578489013561376a601f89168261367a565b8355505b6001600288020188555050505b50505050505050565b61378f8383836136b4565b505050565b600081356137a181612a8e565b80915050919050565b60006fffffffffffffffffffffffffffffffff6137c684613432565b9350801983169250808416831791505092915050565b60008160801c9050919050565b60006137f4826137dc565b9050919050565b61380482612a21565b613817613810826137e9565b83546137aa565b8255505050565b6000810160008301806138308161341c565b905061383c81846134ad565b505050600181016020830161385181856134d0565b61385c818386613784565b505050506002810160408301806138728161341c565b905061387e81846134ad565b50505060038101606083018061389381613794565b905061389f81846137fb565b5050505050565b6138b0828261381e565b5050565b60006138c083856129ab565b93506138cd838584612319565b6138d68361220d565b840190509392505050565b600060408201905081810360008301526138fc8185876138b4565b905061390b602083018461283e565b949350505050565b61391c81612834565b82525050565b600082825260208201905092915050565b600061393e826129a0565b6139488185613922565b935061395881856020860161277c565b6139618161220d565b840191505092915050565b61397581612a21565b82525050565b60006080830160008301516139936000860182613913565b50602083015184820360208601526139ab8282613933565b91505060408301516139c06040860182613913565b5060608301516139d3606086018261396c565b508091505092915050565b600060608201905081810360008301526139f8818561397b565b9050613a0760208301846130fc565b9392505050565b600081905092915050565b50565b6000613a29600083613a0e565b9150613a3482613a19565b600082019050919050565b6000613a4a82613a1c565b9150819050919050565b613a5d816123ee565b82525050565b6000604082019050613a786000830185613a54565b8181036020830152613a8a81846127af565b90509392505050565b60006020820190508181036000830152613aad81846129bc565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082019050613af96000830184612fdb565b92915050565b6000613b0a82612834565b9150613b1583612834565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b4a57613b49613185565b5b828201905092915050565b613b5e81612398565b82525050565b6000602082019050613b796000830184613b55565b92915050565b6000613b8a82612834565b9150613b9583612834565b925082821015613ba857613ba7613185565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613bed82612834565b915060008203613c0057613bff613185565b5b600182039050919050565b6000613c1682612760565b613c208185613a0e565b9350613c3081856020860161277c565b80840191505092915050565b6000613c488284613c0b565b915081905092915050565b6000613c66613c6184612c57565b61227e565b905082815260208101848484011115613c8257613c816122e3565b5b613c8d84828561277c565b509392505050565b600082601f830112613caa57613ca96122de565b5b8151613cba848260208601613c53565b91505092915050565b600060208284031215613cd957613cd86121fe565b5b600082015167ffffffffffffffff811115613cf757613cf6612203565b5b613d0384828501613c95565b91505092915050565b600081519050613d1b81612947565b92915050565b600081519050613d30816122b2565b92915050565b60008060408385031215613d4d57613d4c6121fe565b5b6000613d5b85828601613d0c565b9250506020613d6c85828601613d21565b9150509250929050565b6000604082019050613d8b6000830185612fdb565b8181036020830152613d9d81846129bc565b90509392505050565b600081519050613db5816123a2565b92915050565b600060208284031215613dd157613dd06121fe565b5b6000613ddf84828501613da6565b91505092915050565b6000604082019050613dfd6000830185613b55565b613e0a6020830184612a33565b9392505050565b600060208284031215613e2757613e266121fe565b5b6000613e3584828501613d21565b91505092915050565b6000613e4a8285613c0b565b9150613e568284613c0b565b91508190509392505050565b6000604082019050613e776000830185612a33565b8181036020830152613e8981846129bc565b90509392505050565b600081519050919050565b6000819050602082019050919050565b6000602082019050919050565b6000613ec582613e92565b613ecf8185613328565b9350613eda83613e9d565b8060005b83811015613f0b578151613ef28882613343565b9750613efd83613ead565b925050600181019050613ede565b5085935050505092915050565b6000608082019050613f2d6000830187612fdb565b8181036020830152613f3f8186613eba565b90508181036040830152613f538185613eba565b90508181036060830152613f6781846129bc565b905095945050505050565b600081519050613f8181612a8e565b92915050565b600067ffffffffffffffff821115613fa257613fa161221e565b5b602082029050602081019050919050565b600081519050613fc281612400565b92915050565b6000613fdb613fd684613f87565b61227e565b90508083825260208201905060208402830185811115613ffe57613ffd612458565b5b835b8181101561402757806140138882613fb3565b845260208401935050602081019050614000565b5050509392505050565b600082601f830112614046576140456122de565b5b8151614056848260208601613fc8565b91505092915050565b600060c0828403121561407557614074612208565b5b61407f60c061227e565b9050600061408f84828501613f72565b60008301525060206140a384828501613f72565b60208301525060406140b784828501613d21565b604083015250606082015167ffffffffffffffff8111156140db576140da612299565b5b6140e784828501614031565b606083015250608082015167ffffffffffffffff81111561410b5761410a612299565b5b61411784828501614031565b60808301525060a082015167ffffffffffffffff81111561413b5761413a612299565b5b61414784828501613c95565b60a08301525092915050565b600060208284031215614169576141686121fe565b5b600082015167ffffffffffffffff81111561418757614186612203565b5b6141938482850161405f565b91505092915050565b60006060820190506141b16000830186612a33565b81810360208301526141c381856129bc565b905081810360408301526141d781846127af565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061421b82612834565b915061422683612834565b925082614236576142356141e1565b5b828204905092915050565b600061424c82612834565b915061425783612834565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156142905761428f613185565b5b828202905092915050565b60006040820190506142b06000830185613b55565b6142bd602083018461283e565b939250505056fea264697066735822122060e9f8af68dd1013024df43fe243acfa638efde6de95381e4be49304a2db2bb464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1370,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "secretBidId",
        "offset": 0,
        "slot": "0",
        "type": "t_userDefinedValueType(DataId)2627"
      },
      {
        "astId": 1372,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "presentHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 1374,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 473,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "builder",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Builder)1329"
      },
      {
        "astId": 477,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "requests",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(AdRequest)432_storage)dyn_storage"
      },
      {
        "astId": 479,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "nextId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_struct(AdRequest)432_storage)dyn_storage": {
        "base": "t_struct(AdRequest)432_storage",
        "encoding": "dynamic_array",
        "label": "struct BlockAdAuctionV2.AdRequest[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Builder)1329": {
        "encoding": "inplace",
        "label": "contract Builder",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AdRequest)432_storage": {
        "encoding": "inplace",
        "label": "struct BlockAdAuctionV2.AdRequest",
        "members": [
          {
            "astId": 424,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 426,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "extra",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 428,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "blockLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 431,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "paymentBidId",
            "offset": 0,
            "slot": "3",
            "type": "t_userDefinedValueType(DataId)2627"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(DataId)2627": {
        "encoding": "inplace",
        "label": "Suave.DataId",
        "numberOfBytes": "16"
      }
    }
  }
}