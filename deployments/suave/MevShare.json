{
  "address": "0x73b647cbA2FE75Ba05B8e12ef8F8D6327D6367bF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "PeekerReverted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "bidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "allowedPeekers",
          "type": "address[]"
        }
      ],
      "name": "BidEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "bidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "hint",
          "type": "bytes"
        }
      ],
      "name": "HintEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "matchBidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "matchHint",
          "type": "bytes"
        }
      ],
      "name": "MatchEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.BidId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "bid",
          "type": "tuple"
        }
      ],
      "name": "emitBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.BidId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "bid",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "hint",
          "type": "bytes"
        }
      ],
      "name": "emitBidAndHint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchBidConfidentialBundleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "bidAllowedPeekers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "bidAllowedStores",
          "type": "address[]"
        }
      ],
      "name": "newBid",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "bidAllowedPeekers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "bidAllowedStores",
          "type": "address[]"
        },
        {
          "internalType": "Suave.BidId",
          "name": "shareBidId",
          "type": "bytes16"
        }
      ],
      "name": "newMatch",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xba1a4a232bc41e203213eb400c1a809c667b6ac13615b06b996a4d915e2d69c9",
  "receipt": {
    "to": null,
    "from": "0x19E7E376E7C213B7E7e7e46cc70A5dD086DAff2A",
    "contractAddress": "0x73b647cbA2FE75Ba05B8e12ef8F8D6327D6367bF",
    "transactionIndex": 0,
    "gasUsed": "1861396",
    "logsBloom": "0x
    "blockHash": "0x53912ae071561ce937bb5ea959d1aaeeb3bb281585518384a6743d36f3a1e457",
    "transactionHash": "0xba1a4a232bc41e203213eb400c1a809c667b6ac13615b06b996a4d915e2d69c9",
    "logs": [],
    "blockNumber": 8,
    "cumulativeGasUsed": "1861396",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d6b180daf224b44ac97681366a14abd3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"PeekerReverted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"bidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"}],\"name\":\"BidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"bidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hint\",\"type\":\"bytes\"}],\"name\":\"HintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"matchBidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"matchHint\",\"type\":\"bytes\"}],\"name\":\"MatchEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.BidId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"emitBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.BidId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hint\",\"type\":\"bytes\"}],\"name\":\"emitBidAndHint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchBidConfidentialBundleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"bidAllowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bidAllowedStores\",\"type\":\"address[]\"}],\"name\":\"newBid\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"bidAllowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bidAllowedStores\",\"type\":\"address[]\"},{\"internalType\":\"Suave.BidId\",\"name\":\"shareBidId\",\"type\":\"bytes16\"}],\"name\":\"newMatch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standard_peekers/bids.sol\":\"MevShareBidContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Suave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.8;\\n\\nlibrary Suave {\\n    error PeekerReverted(address, bytes);\\n\\n    type BidId is bytes16;\\n\\n    struct Bid {\\n        BidId id;\\n        BidId salt;\\n        uint64 decryptionCondition;\\n        address[] allowedPeekers;\\n        address[] allowedStores;\\n        string version;\\n    }\\n\\n    struct BuildBlockArgs {\\n        uint64 slot;\\n        bytes proposerPubkey;\\n        bytes32 parent;\\n        uint64 timestamp;\\n        address feeRecipient;\\n        uint64 gasLimit;\\n        bytes32 random;\\n        Withdrawal[] withdrawals;\\n    }\\n\\n    struct Withdrawal {\\n        uint64 index;\\n        uint64 validator;\\n        address Address;\\n        uint64 amount;\\n    }\\n\\n    address public constant IS_CONFIDENTIAL_ADDR = 0x0000000000000000000000000000000042010000;\\n\\n    address public constant BUILD_ETH_BLOCK = 0x0000000000000000000000000000000042100001;\\n\\n    address public constant CONFIDENTIAL_INPUTS = 0x0000000000000000000000000000000042010001;\\n\\n    address public constant CONFIDENTIAL_STORE_RETRIEVE = 0x0000000000000000000000000000000042020001;\\n\\n    address public constant CONFIDENTIAL_STORE_STORE = 0x0000000000000000000000000000000042020000;\\n\\n    address public constant ETHCALL = 0x0000000000000000000000000000000042100003;\\n\\n    address public constant EXTRACT_HINT = 0x0000000000000000000000000000000042100037;\\n\\n    address public constant FETCH_BIDS = 0x0000000000000000000000000000000042030001;\\n\\n    address public constant FILL_MEV_SHARE_BUNDLE = 0x0000000000000000000000000000000043200001;\\n\\n    address public constant NEW_BID = 0x0000000000000000000000000000000042030000;\\n\\n    address public constant SIGN_ETH_TRANSACTION = 0x0000000000000000000000000000000040100001;\\n\\n    address public constant SIMULATE_BUNDLE = 0x0000000000000000000000000000000042100000;\\n\\n    address public constant SUBMIT_BUNDLE_JSON_RPC = 0x0000000000000000000000000000000043000001;\\n\\n    address public constant SUBMIT_ETH_BLOCK_BID_TO_RELAY = 0x0000000000000000000000000000000042100002;\\n\\n    // Returns whether execution is off- or on-chain\\n    function isConfidential() internal view returns (bool b) {\\n        (bool success, bytes memory isConfidentialBytes) = IS_CONFIDENTIAL_ADDR.staticcall(\\\"\\\");\\n        if (!success) {\\n            revert PeekerReverted(IS_CONFIDENTIAL_ADDR, isConfidentialBytes);\\n        }\\n        assembly {\\n            // Load the length of data (first 32 bytes)\\n            let len := mload(isConfidentialBytes)\\n            // Load the data after 32 bytes, so add 0x20\\n            b := mload(add(isConfidentialBytes, 0x20))\\n        }\\n    }\\n\\n    function buildEthBlock(BuildBlockArgs memory blockArgs, BidId bidId, string memory namespace)\\n        internal\\n        view\\n        returns (bytes memory, bytes memory)\\n    {\\n        (bool success, bytes memory data) = BUILD_ETH_BLOCK.staticcall(abi.encode(blockArgs, bidId, namespace));\\n        if (!success) {\\n            revert PeekerReverted(BUILD_ETH_BLOCK, data);\\n        }\\n\\n        return abi.decode(data, (bytes, bytes));\\n    }\\n\\n    function confidentialInputs() internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_INPUTS.staticcall(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_INPUTS, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStoreRetrieve(BidId bidId, string memory key) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE_RETRIEVE.staticcall(abi.encode(bidId, key));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE_RETRIEVE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStoreStore(BidId bidId, string memory key, bytes memory data1) internal view {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE_STORE.staticcall(abi.encode(bidId, key, data1));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE_STORE, data);\\n        }\\n    }\\n\\n    function ethcall(address contractAddr, bytes memory input1) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = ETHCALL.staticcall(abi.encode(contractAddr, input1));\\n        if (!success) {\\n            revert PeekerReverted(ETHCALL, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function extractHint(bytes memory bundleData) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = EXTRACT_HINT.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(EXTRACT_HINT, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function fetchBids(uint64 cond, string memory namespace) internal view returns (Bid[] memory) {\\n        (bool success, bytes memory data) = FETCH_BIDS.staticcall(abi.encode(cond, namespace));\\n        if (!success) {\\n            revert PeekerReverted(FETCH_BIDS, data);\\n        }\\n\\n        return abi.decode(data, (Bid[]));\\n    }\\n\\n    function fillMevShareBundle(BidId bidId) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = FILL_MEV_SHARE_BUNDLE.staticcall(abi.encode(bidId));\\n        if (!success) {\\n            revert PeekerReverted(FILL_MEV_SHARE_BUNDLE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function newBid(\\n        uint64 decryptionCondition,\\n        address[] memory allowedPeekers,\\n        address[] memory allowedStores,\\n        string memory bidType\\n    ) internal view returns (Bid memory) {\\n        (bool success, bytes memory data) =\\n            NEW_BID.staticcall(abi.encode(decryptionCondition, allowedPeekers, allowedStores, bidType));\\n        if (!success) {\\n            revert PeekerReverted(NEW_BID, data);\\n        }\\n\\n        return abi.decode(data, (Bid));\\n    }\\n\\n    function signEthTransaction(bytes memory txn, string memory chainId, string memory signingKey)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory data) = SIGN_ETH_TRANSACTION.staticcall(abi.encode(txn, chainId, signingKey));\\n        if (!success) {\\n            revert PeekerReverted(SIGN_ETH_TRANSACTION, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function simulateBundle(bytes memory bundleData) internal view returns (uint64) {\\n        (bool success, bytes memory data) = SIMULATE_BUNDLE.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_BUNDLE, data);\\n        }\\n\\n        return abi.decode(data, (uint64));\\n    }\\n\\n    function submitBundleJsonRPC(string memory url, string memory method, bytes memory params)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_BUNDLE_JSON_RPC.staticcall(abi.encode(url, method, params));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_BUNDLE_JSON_RPC, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function submitEthBlockBidToRelay(string memory relayUrl, bytes memory builderBid)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_ETH_BLOCK_BID_TO_RELAY.staticcall(abi.encode(relayUrl, builderBid));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_ETH_BLOCK_BID_TO_RELAY, data);\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0x460f8be1e207256e1967bacae080847e8f87dff74a6ebf9fffe3fb181e0d8c86\",\"license\":\"UNLICENSED\"},\"contracts/standard_peekers/bids.sol\":{\"content\":\"pragma solidity ^0.8.8;\\n\\nimport \\\"../libraries/Suave.sol\\\";\\n\\ncontract AnyBidContract {\\n\\n\\tevent BidEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tuint64 decryptionCondition,\\n\\t\\taddress[] allowedPeekers\\n\\t);\\n\\n\\tfunction fetchBidConfidentialBundleData() public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\t\\t\\n\\t\\tbytes memory confidentialInputs = Suave.confidentialInputs();\\n\\t\\treturn abi.decode(confidentialInputs, (bytes));\\n\\t}\\n\\n\\t// Bids to this contract should not be trusted!\\n\\tfunction emitBid(Suave.Bid calldata bid) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t}\\n}\\n\\ncontract BundleBidContract is AnyBidContract {\\n\\n\\tfunction newBid(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores) external payable returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tbytes memory bundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\tuint64 egp = Suave.simulateBundle(bundleData);\\n\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"default:v0:ethBundles\\\");\\n\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"default:v0:ethBundles\\\", bundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"default:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\n\\t\\treturn emitAndReturn(bid, bundleData);\\n\\t}\\n\\n\\tfunction emitAndReturn(Suave.Bid memory bid, bytes memory) internal virtual returns (bytes memory) {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(bid));\\n\\t}\\n}\\n\\ncontract EthBundleSenderContract is BundleBidContract {\\n\\tstring[] public builderUrls;\\n\\n\\tconstructor(string[] memory builderUrls_) {\\n\\t\\tbuilderUrls = builderUrls_;\\n\\t}\\n\\n\\tfunction emitAndReturn(Suave.Bid memory bid, bytes memory bundleData) internal virtual override returns (bytes memory) {\\n\\t\\tfor (uint i = 0; i < builderUrls.length; i++) {\\n\\t\\t\\tSuave.submitBundleJsonRPC(builderUrls[i], \\\"eth_sendBundle\\\", bundleData);\\n\\t\\t}\\n\\n\\t\\treturn BundleBidContract.emitAndReturn(bid, bundleData);\\n\\t}\\n}\\n\\ncontract MevShareBidContract is AnyBidContract {\\n\\n\\tevent HintEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tbytes hint\\n\\t);\\n\\n\\tevent MatchEvent(\\n\\t\\tSuave.BidId matchBidId,\\n\\t\\tbytes matchHint\\n\\t);\\n\\n\\tfunction newBid(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores) external payable returns (bytes memory) {\\n\\t\\t// 0. check confidential execution\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t// 1. fetch bundle data\\n\\t\\tbytes memory bundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\t// 2. sim bundle\\n\\t\\tuint64 egp = Suave.simulateBundle(bundleData);\\n\\t\\t\\n\\t\\t// 3. extract hint\\n\\t\\tbytes memory hint = Suave.extractHint(bundleData);\\n\\t\\t\\n\\t\\t// // 4. store bundle and sim results\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundles\\\", bundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit HintEvent(bid.id, hint);\\n\\n\\t\\t// // 5. return \\\"callback\\\" to emit hint onchain\\n\\t\\treturn bytes.concat(this.emitBidAndHint.selector, abi.encode(bid, hint));\\n\\t}\\n\\n\\tfunction emitBidAndHint(Suave.Bid calldata bid, bytes memory hint) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit HintEvent(bid.id, hint);\\n\\t}\\n\\n\\tfunction newMatch(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores, Suave.BidId shareBidId) external payable returns (bytes memory) {\\n\\t\\t// WARNING : this function will copy the original mev share bid\\n\\t\\t// into a new key with potentially different permsissions\\n\\t\\t\\n\\t\\trequire(Suave.isConfidential());\\n\\t\\t// 1. fetch confidential data\\n\\t\\tbytes memory matchBundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\t// 2. sim match alone for validity\\n\\t\\tuint64 egp = Suave.simulateBundle(matchBundleData);\\n\\n\\t\\t// 3. extract hint\\n\\t\\tbytes memory matchHint = Suave.extractHint(matchBundleData);\\n\\t\\t\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"mevshare:v0:matchBids\\\");\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundles\\\", matchBundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(0));\\n\\n\\t\\t//4. merge bids\\n\\t\\tSuave.BidId[] memory bids = new Suave.BidId[](2);\\n\\t\\tbids[0] = shareBidId;\\n\\t\\tbids[1] = bid.id;\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:mergedBids\\\", abi.encode(bids));\\n\\n\\t\\treturn emitMatchBidAndHint(bid, matchHint);\\n\\t}\\n\\n\\tfunction emitMatchBidAndHint(Suave.Bid memory bid, bytes memory matchHint) internal virtual returns (bytes memory) {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit MatchEvent(bid.id, matchHint);\\n\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(bid));\\n\\t}\\n}\\n\\ncontract MevShareBundleSenderContract is MevShareBidContract {\\n\\tstring[] public builderUrls;\\n\\n\\tconstructor(string[] memory builderUrls_) {\\n\\t\\tbuilderUrls = builderUrls_;\\n\\t}\\n\\n\\tfunction emitMatchBidAndHint(Suave.Bid memory bid, bytes memory matchHint) internal virtual override returns (bytes memory) {\\n\\t\\tbytes memory bundleData = Suave.fillMevShareBundle(bid.id);\\n\\t\\tfor (uint i = 0; i < builderUrls.length; i++) {\\n\\t\\t\\tSuave.submitBundleJsonRPC(builderUrls[i], \\\"mev_sendBundle\\\", bundleData);\\n\\t\\t}\\n\\n\\t\\treturn MevShareBidContract.emitMatchBidAndHint(bid, matchHint);\\n\\t}\\n}\\n\\n/* Not tested or implemented on the precompile side */\\nstruct EgpBidPair {\\n\\tuint64 egp; // in wei, beware overflow\\n\\tSuave.BidId bidId;\\n}\\n\\ncontract EthBlockBidContract is AnyBidContract {\\n\\n\\tevent BuilderBoostBidEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tbytes builderBid\\n\\t);\\n\\t\\n\\tfunction idsEqual(Suave.BidId _l, Suave.BidId _r) public pure returns (bool) {\\n\\t\\tbytes memory l = abi.encodePacked(_l);\\n\\t\\tbytes memory r = abi.encodePacked(_r);\\n\\t\\tfor (uint i = 0; i < l.length; i++) {\\n\\t\\t\\tif (bytes(l)[i] != r[i]) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction buildMevShare(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tSuave.Bid[] memory allShareMatchBids = Suave.fetchBids(blockHeight, \\\"mevshare:v0:matchBids\\\");\\n\\t\\tSuave.Bid[] memory allShareUserBids = Suave.fetchBids(blockHeight, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\n\\t\\tif (allShareUserBids.length == 0) {\\n\\t\\t\\trevert Suave.PeekerReverted(address(this), \\\"no bids\\\");\\n\\t\\t}\\n\\n\\t\\tSuave.Bid[] memory allBids = new Suave.Bid[](allShareUserBids.length);\\n\\t\\tfor (uint i = 0; i < allShareUserBids.length; i++) {\\n\\t\\t\\t// TODO: sort matches by egp first!\\n\\t\\t\\tSuave.Bid memory bidToInsert = allShareUserBids[i]; // will be updated with the best match if any\\n\\t\\t\\tfor (uint j = 0; j < allShareMatchBids.length; j++) {\\n\\t\\t\\t\\t// TODO: should be done once at the start and sorted\\n\\t\\t\\t\\tSuave.BidId[] memory mergedBidIds = abi.decode(Suave.confidentialStoreRetrieve(allShareMatchBids[j].id, \\\"mevshare:v0:mergedBids\\\"), (Suave.BidId[]));\\n\\t\\t\\t\\tif (idsEqual(mergedBidIds[0], allShareUserBids[i].id)) {\\n\\t\\t\\t\\t\\tbidToInsert = allShareMatchBids[j];\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tallBids[i] = bidToInsert;\\n\\t\\t}\\n\\n\\t\\tEgpBidPair[] memory bidsByEGP = new EgpBidPair[](allBids.length);\\n\\t\\tfor (uint i = 0; i < allBids.length; i++) {\\n\\t\\t\\tbytes memory simResults = Suave.confidentialStoreRetrieve(allBids[i].id, \\\"mevshare:v0:ethBundleSimResults\\\");\\n\\t\\t\\tuint64 egp = abi.decode(simResults, (uint64));\\n\\t\\t\\tbidsByEGP[i] = EgpBidPair(egp, allBids[i].id);\\n\\t\\t}\\n\\n\\t\\t// Bubble sort, cause why not\\n\\t\\tuint n = bidsByEGP.length;\\n\\t\\tfor (uint i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint j = i + 1; j < n; j++) {\\n\\t\\t\\t\\tif (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n\\t\\t\\t\\t\\tEgpBidPair memory temp = bidsByEGP[i];\\n\\t\\t\\t\\t\\tbidsByEGP[i] = bidsByEGP[j];\\n\\t\\t\\t\\t\\tbidsByEGP[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tSuave.BidId[] memory allBidIds = new Suave.BidId[](allBids.length);\\n\\t\\tfor (uint i = 0; i < bidsByEGP.length; i++) {\\n\\t\\t\\tallBidIds[i] = bidsByEGP[i].bidId;\\n\\t\\t}\\n\\n\\t\\treturn buildAndEmit(blockArgs, blockHeight, allBidIds, \\\"mevshare:v0\\\");\\n\\t}\\n\\n\\tfunction buildFromPool(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tSuave.Bid[] memory allBids = Suave.fetchBids(blockHeight, \\\"default:v0:ethBundles\\\");\\n\\t\\tif (allBids.length == 0) {\\n\\t\\t\\trevert Suave.PeekerReverted(address(this), \\\"no bids\\\");\\n\\t\\t}\\n\\n\\t\\tEgpBidPair[] memory bidsByEGP = new EgpBidPair[](allBids.length);\\n\\t\\tfor (uint i = 0; i < allBids.length; i++) {\\n\\t\\t\\tbytes memory simResults = Suave.confidentialStoreRetrieve(allBids[i].id, \\\"default:v0:ethBundleSimResults\\\");\\n\\t\\t\\tuint64 egp = abi.decode(simResults, (uint64));\\n\\t\\t\\tbidsByEGP[i] = EgpBidPair(egp, allBids[i].id);\\n\\t\\t}\\n\\n\\t\\t// Bubble sort, cause why not\\n\\t\\tuint n = bidsByEGP.length;\\n\\t\\tfor (uint i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint j = i + 1; j < n; j++) {\\n\\t\\t\\t\\tif (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n\\t\\t\\t\\t\\tEgpBidPair memory temp = bidsByEGP[i];\\n\\t\\t\\t\\t\\tbidsByEGP[i] = bidsByEGP[j];\\n\\t\\t\\t\\t\\tbidsByEGP[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tSuave.BidId[] memory allBidIds = new Suave.BidId[](allBids.length);\\n\\t\\tfor (uint i = 0; i < bidsByEGP.length; i++) {\\n\\t\\t\\tallBidIds[i] = bidsByEGP[i].bidId;\\n\\t\\t}\\n\\n\\t\\treturn buildAndEmit(blockArgs, blockHeight, allBidIds, \\\"\\\");\\n\\t}\\n\\n\\tfunction buildAndEmit(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public virtual returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t(Suave.Bid memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\n\\t\\temit BuilderBoostBidEvent(blockBid.id, builderBid);\\n\\t\\temit BidEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBuilderBidAndBid.selector, abi.encode(blockBid, builderBid));\\n\\t}\\n\\n\\tfunction doBuild(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public view returns (Suave.Bid memory, bytes memory) {\\n\\t\\taddress[] memory allowedPeekers = new address[](2);\\n\\t\\tallowedPeekers[0] = address(this);\\n\\t\\tallowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\n\\t\\tSuave.Bid memory blockBid = Suave.newBid(blockHeight, allowedPeekers, allowedPeekers, \\\"default:v0:mergedBids\\\");\\n\\t\\tSuave.confidentialStoreStore(blockBid.id, \\\"default:v0:mergedBids\\\", abi.encode(bids));\\n\\t\\t \\n\\t\\t(bytes memory builderBid, bytes memory payload) = Suave.buildEthBlock(blockArgs, blockBid.id, namespace);\\n\\t\\tSuave.confidentialStoreStore(blockBid.id, \\\"default:v0:builderPayload\\\", payload); // only through this.unlock\\n\\n\\t\\treturn (blockBid, builderBid);\\n\\t}\\n\\n\\tfunction emitBuilderBidAndBid(Suave.Bid memory bid, bytes memory builderBid) public returns (Suave.Bid memory, bytes memory) {\\n\\t\\temit BuilderBoostBidEvent(bid.id, builderBid);\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\treturn (bid, builderBid);\\n\\t}\\n\\n\\tfunction unlock(Suave.BidId bidId, bytes memory signedBlindedHeader) public view returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t// TODO: verify the header is correct\\n\\t\\t// TODO: incorporate protocol name\\n\\t\\tbytes memory payload = Suave.confidentialStoreRetrieve(bidId, \\\"default:v0:builderPayload\\\");\\n\\t\\treturn payload;\\n\\t}\\n}\\n\\ncontract EthBlockBidSenderContract is EthBlockBidContract {\\n\\tstring boostRelayUrl;\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tboostRelayUrl = boostRelayUrl_;\\n\\t}\\n\\n\\tfunction buildAndEmit(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public virtual override returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t(Suave.Bid memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\t\\tSuave.submitEthBlockBidToRelay(boostRelayUrl, builderBid);\\n\\n\\t\\temit BidEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(blockBid));\\n\\t}\\n}\\n\",\"keccak256\":\"0xbab84bf129a4a440e11b51d569e08138678b41cf7c389adf0ff5cd6e8fd8ca50\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506120ca806100206000396000f3fe60806040526004361061004a5760003560e01c8063236eb5a71461004f57806389026c111461007f57806392f07a58146100a8578063c0b9d287146100d3578063d8f55db9146100fc575b600080fd5b610069600480360381019061006491906110df565b61012c565b60405161007691906111f2565b60405180910390f35b34801561008b57600080fd5b506100a660048036038101906100a191906112ed565b6103a9565b005b3480156100b457600080fd5b506100bd610471565b6040516100ca91906111f2565b60405180910390f35b3480156100df57600080fd5b506100fa60048036038101906100f59190611365565b6104aa565b005b61011660048036038101906101119190611406565b610521565b60405161012391906111f2565b60405180910390f35b6060610136610824565b61013f57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561018957600080fd5b505af115801561019d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101c69190611515565b905060006101d3826108ec565b905060006101e0836109e3565b905060006102258888886040518060400160405280601c81526020017f6d657673686172653a76303a756e6d61746368656442756e646c657300000000815250610ad8565b905061026b81600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610bde565b6102ce81600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c747300815250856040516020016102ba919061156d565b604051602081830303815290604052610bde565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001518260400151836060015160405161030d93929190611667565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395081600001518360405161034a9291906116a5565b60405180910390a16389026c1160e01b818360405160200161036d92919061184e565b60405160208183030381529060405260405160200161038d92919061190e565b6040516020818303038152906040529450505050509392505050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e82600001356fffffffffffffffffffffffffffffffff19168360400160208101906103f59190611936565b8480606001906104059190611972565b6040516104159493929190611a60565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395082600001356fffffffffffffffffffffffffffffffff1916826040516104659291906116a5565b60405180910390a15050565b606061047b610824565b61048457600080fd5b600061048e610cc1565b9050808060200190518101906104a49190611515565b91505090565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001356fffffffffffffffffffffffffffffffff19168260400160208101906104f69190611936565b8380606001906105069190611972565b6040516105169493929190611a60565b60405180910390a150565b606061052b610824565b61053457600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561057e57600080fd5b505af1158015610592573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105bb9190611515565b905060006105c8826108ec565b905060006105d5836109e3565b9050600061061a8989896040518060400160405280601581526020017f6d657673686172653a76303a6d61746368426964730000000000000000000000815250610ad8565b905061066081600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610bde565b6106c481600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c74730081525060006040516020016106b09190611af2565b604051602081830303815290604052610bde565b6000600267ffffffffffffffff8111156106e1576106e0610f3e565b5b60405190808252806020026020018201604052801561070f5781602001602082028036833780820191505090505b509050868160008151811061072757610726611b0d565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505081600001518160018151811061077457610773611b0d565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505061080b82600001516040518060400160405280601681526020017f6d657673686172653a76303a6d65726765644269647300000000000000000000815250836040516020016107f79190611beb565b604051602081830303815290604052610bde565b6108158284610d98565b95505050505050949350505050565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff1660405161085090611c33565b600060405180830381855afa9150503d806000811461088b576040519150601f19603f3d011682016040523d82523d6000602084013e610890565b606091505b5091509150816108dd576342010000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016108d4929190611c57565b60405180910390fd5b80516020820151935050505090565b6000806000634210000073ffffffffffffffffffffffffffffffffffffffff168460405160200161091d91906111f2565b6040516020818303038152906040526040516109399190611c87565b600060405180830381855afa9150503d8060008114610974576040519150601f19603f3d011682016040523d82523d6000602084013e610979565b606091505b5091509150816109c6576342100000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016109bd929190611c57565b60405180910390fd5b808060200190518101906109da9190611cb3565b92505050919050565b60606109ed610824565b6109f657600080fd5b600080634210003773ffffffffffffffffffffffffffffffffffffffff1684604051602001610a2591906111f2565b604051602081830303815290604052604051610a419190611c87565b600060405180830381855afa9150503d8060008114610a7c576040519150601f19603f3d011682016040523d82523d6000602084013e610a81565b606091505b509150915081610ace576342100037816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610ac5929190611c57565b60405180910390fd5b8092505050919050565b610ae0610e6e565b600080634203000073ffffffffffffffffffffffffffffffffffffffff1687878787604051602001610b159493929190611d2a565b604051602081830303815290604052604051610b319190611c87565b600060405180830381855afa9150503d8060008114610b6c576040519150601f19603f3d011682016040523d82523d6000602084013e610b71565b606091505b509150915081610bbe576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610bb5929190611c57565b60405180910390fd5b80806020019051810190610bd29190611fe4565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001610c119392919061202d565b604051602081830303815290604052604051610c2d9190611c87565b600060405180830381855afa9150503d8060008114610c68576040519150601f19603f3d011682016040523d82523d6000602084013e610c6d565b606091505b509150915081610cba576342020000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610cb1929190611c57565b60405180910390fd5b5050505050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff16604051602001604051602081830303815290604052604051610d039190611c87565b600060405180830381855afa9150503d8060008114610d3e576040519150601f19603f3d011682016040523d82523d6000602084013e610d43565b606091505b509150915081610d90576342010001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610d87929190611c57565b60405180910390fd5b809250505090565b60607f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e836000015184604001518560600151604051610dd993929190611667565b60405180910390a17fafa6f6affefc1010901fc56588695137d9939d2d8b34b30abee96af800a1adc2836000015183604051610e169291906116a5565b60405180910390a163c0b9d28760e01b83604051602001610e379190612072565b604051602081830303815290604052604051602001610e5792919061190e565b604051602081830303815290604052905092915050565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b610f0581610ee8565b8114610f1057600080fd5b50565b600081359050610f2281610efc565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f7682610f2d565b810181811067ffffffffffffffff82111715610f9557610f94610f3e565b5b80604052505050565b6000610fa8610ed4565b9050610fb48282610f6d565b919050565b600067ffffffffffffffff821115610fd457610fd3610f3e565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101582610fea565b9050919050565b6110258161100a565b811461103057600080fd5b50565b6000813590506110428161101c565b92915050565b600061105b61105684610fb9565b610f9e565b9050808382526020820190506020840283018581111561107e5761107d610fe5565b5b835b818110156110a757806110938882611033565b845260208401935050602081019050611080565b5050509392505050565b600082601f8301126110c6576110c5610f28565b5b81356110d6848260208601611048565b91505092915050565b6000806000606084860312156110f8576110f7610ede565b5b600061110686828701610f13565b935050602084013567ffffffffffffffff81111561112757611126610ee3565b5b611133868287016110b1565b925050604084013567ffffffffffffffff81111561115457611153610ee3565b5b611160868287016110b1565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156111a4578082015181840152602081019050611189565b838111156111b3576000848401525b50505050565b60006111c48261116a565b6111ce8185611175565b93506111de818560208601611186565b6111e781610f2d565b840191505092915050565b6000602082019050818103600083015261120c81846111b9565b905092915050565b600080fd5b600060c0828403121561122f5761122e611214565b5b81905092915050565b600080fd5b600067ffffffffffffffff82111561125857611257610f3e565b5b61126182610f2d565b9050602081019050919050565b82818337600083830152505050565b600061129061128b8461123d565b610f9e565b9050828152602081018484840111156112ac576112ab611238565b5b6112b784828561126e565b509392505050565b600082601f8301126112d4576112d3610f28565b5b81356112e484826020860161127d565b91505092915050565b6000806040838503121561130457611303610ede565b5b600083013567ffffffffffffffff81111561132257611321610ee3565b5b61132e85828601611219565b925050602083013567ffffffffffffffff81111561134f5761134e610ee3565b5b61135b858286016112bf565b9150509250929050565b60006020828403121561137b5761137a610ede565b5b600082013567ffffffffffffffff81111561139957611398610ee3565b5b6113a584828501611219565b91505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6113e3816113ae565b81146113ee57600080fd5b50565b600081359050611400816113da565b92915050565b600080600080608085870312156114205761141f610ede565b5b600061142e87828801610f13565b945050602085013567ffffffffffffffff81111561144f5761144e610ee3565b5b61145b878288016110b1565b935050604085013567ffffffffffffffff81111561147c5761147b610ee3565b5b611488878288016110b1565b9250506060611499878288016113f1565b91505092959194509250565b60006114b86114b38461123d565b610f9e565b9050828152602081018484840111156114d4576114d3611238565b5b6114df848285611186565b509392505050565b600082601f8301126114fc576114fb610f28565b5b815161150c8482602086016114a5565b91505092915050565b60006020828403121561152b5761152a610ede565b5b600082015167ffffffffffffffff81111561154957611548610ee3565b5b611555848285016114e7565b91505092915050565b61156781610ee8565b82525050565b6000602082019050611582600083018461155e565b92915050565b6000611593826113ae565b9050919050565b6115a381611588565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6115de8161100a565b82525050565b60006115f083836115d5565b60208301905092915050565b6000602082019050919050565b6000611614826115a9565b61161e81856115b4565b9350611629836115c5565b8060005b8381101561165a57815161164188826115e4565b975061164c836115fc565b92505060018101905061162d565b5085935050505092915050565b600060608201905061167c600083018661159a565b611689602083018561155e565b818103604083015261169b8184611609565b9050949350505050565b60006040820190506116ba600083018561159a565b81810360208301526116cc81846111b9565b90509392505050565b6116de81611588565b82525050565b6116ed81610ee8565b82525050565b600082825260208201905092915050565b600061170f826115a9565b61171981856116f3565b9350611724836115c5565b8060005b8381101561175557815161173c88826115e4565b9750611747836115fc565b925050600181019050611728565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b600061178982611762565b611793818561176d565b93506117a3818560208601611186565b6117ac81610f2d565b840191505092915050565b600060c0830160008301516117cf60008601826116d5565b5060208301516117e260208601826116d5565b5060408301516117f560408601826116e4565b506060830151848203606086015261180d8282611704565b915050608083015184820360808601526118278282611704565b91505060a083015184820360a0860152611841828261177e565b9150508091505092915050565b6000604082019050818103600083015261186881856117b7565b9050818103602083015261187c81846111b9565b90509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6118cc6118c782611885565b6118b1565b82525050565b600081905092915050565b60006118e88261116a565b6118f281856118d2565b9350611902818560208601611186565b80840191505092915050565b600061191a82856118bb565b60048201915061192a82846118dd565b91508190509392505050565b60006020828403121561194c5761194b610ede565b5b600061195a84828501610f13565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261198f5761198e611963565b5b80840192508235915067ffffffffffffffff8211156119b1576119b0611968565b5b6020830192506020820236038313156119cd576119cc61196d565b5b509250929050565b6000819050919050565b60006119ee6020840184611033565b905092915050565b6000602082019050919050565b6000611a0f83856115b4565b9350611a1a826119d5565b8060005b85811015611a5357611a3082846119df565b611a3a88826115e4565b9750611a45836119f6565b925050600181019050611a1e565b5085925050509392505050565b6000606082019050611a75600083018761159a565b611a82602083018661155e565b8181036040830152611a95818486611a03565b905095945050505050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611adc611ad7611ad284611aa0565b611ab7565b611aaa565b9050919050565b611aec81611ac1565b82525050565b6000602082019050611b076000830184611ae3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611b7483836116d5565b60208301905092915050565b6000602082019050919050565b6000611b9882611b3c565b611ba28185611b47565b9350611bad83611b58565b8060005b83811015611bde578151611bc58882611b68565b9750611bd083611b80565b925050600181019050611bb1565b5085935050505092915050565b60006020820190508181036000830152611c058184611b8d565b905092915050565b50565b6000611c1d6000836118d2565b9150611c2882611c0d565b600082019050919050565b6000611c3e82611c10565b9150819050919050565b611c518161100a565b82525050565b6000604082019050611c6c6000830185611c48565b8181036020830152611c7e81846111b9565b90509392505050565b6000611c9382846118dd565b915081905092915050565b600081519050611cad81610efc565b92915050565b600060208284031215611cc957611cc8610ede565b5b6000611cd784828501611c9e565b91505092915050565b600082825260208201905092915050565b6000611cfc82611762565b611d068185611ce0565b9350611d16818560208601611186565b611d1f81610f2d565b840191505092915050565b6000608082019050611d3f600083018761155e565b8181036020830152611d518186611609565b90508181036040830152611d658185611609565b90508181036060830152611d798184611cf1565b905095945050505050565b600080fd5b600080fd5b600081519050611d9d816113da565b92915050565b600081519050611db28161101c565b92915050565b6000611dcb611dc684610fb9565b610f9e565b90508083825260208201905060208402830185811115611dee57611ded610fe5565b5b835b81811015611e175780611e038882611da3565b845260208401935050602081019050611df0565b5050509392505050565b600082601f830112611e3657611e35610f28565b5b8151611e46848260208601611db8565b91505092915050565b600067ffffffffffffffff821115611e6a57611e69610f3e565b5b611e7382610f2d565b9050602081019050919050565b6000611e93611e8e84611e4f565b610f9e565b905082815260208101848484011115611eaf57611eae611238565b5b611eba848285611186565b509392505050565b600082601f830112611ed757611ed6610f28565b5b8151611ee7848260208601611e80565b91505092915050565b600060c08284031215611f0657611f05611d84565b5b611f1060c0610f9e565b90506000611f2084828501611d8e565b6000830152506020611f3484828501611d8e565b6020830152506040611f4884828501611c9e565b604083015250606082015167ffffffffffffffff811115611f6c57611f6b611d89565b5b611f7884828501611e21565b606083015250608082015167ffffffffffffffff811115611f9c57611f9b611d89565b5b611fa884828501611e21565b60808301525060a082015167ffffffffffffffff811115611fcc57611fcb611d89565b5b611fd884828501611ec2565b60a08301525092915050565b600060208284031215611ffa57611ff9610ede565b5b600082015167ffffffffffffffff81111561201857612017610ee3565b5b61202484828501611ef0565b91505092915050565b6000606082019050612042600083018661159a565b81810360208301526120548185611cf1565b9050818103604083015261206881846111b9565b9050949350505050565b6000602082019050818103600083015261208c81846117b7565b90509291505056fea2646970667358221220748d1611a680d7aa42004403b11139019271d10957c94578b7e516dcb33302c364736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c8063236eb5a71461004f57806389026c111461007f57806392f07a58146100a8578063c0b9d287146100d3578063d8f55db9146100fc575b600080fd5b610069600480360381019061006491906110df565b61012c565b60405161007691906111f2565b60405180910390f35b34801561008b57600080fd5b506100a660048036038101906100a191906112ed565b6103a9565b005b3480156100b457600080fd5b506100bd610471565b6040516100ca91906111f2565b60405180910390f35b3480156100df57600080fd5b506100fa60048036038101906100f59190611365565b6104aa565b005b61011660048036038101906101119190611406565b610521565b60405161012391906111f2565b60405180910390f35b6060610136610824565b61013f57600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561018957600080fd5b505af115801561019d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101c69190611515565b905060006101d3826108ec565b905060006101e0836109e3565b905060006102258888886040518060400160405280601c81526020017f6d657673686172653a76303a756e6d61746368656442756e646c657300000000815250610ad8565b905061026b81600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610bde565b6102ce81600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c747300815250856040516020016102ba919061156d565b604051602081830303815290604052610bde565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001518260400151836060015160405161030d93929190611667565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395081600001518360405161034a9291906116a5565b60405180910390a16389026c1160e01b818360405160200161036d92919061184e565b60405160208183030381529060405260405160200161038d92919061190e565b6040516020818303038152906040529450505050509392505050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e82600001356fffffffffffffffffffffffffffffffff19168360400160208101906103f59190611936565b8480606001906104059190611972565b6040516104159493929190611a60565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395082600001356fffffffffffffffffffffffffffffffff1916826040516104659291906116a5565b60405180910390a15050565b606061047b610824565b61048457600080fd5b600061048e610cc1565b9050808060200190518101906104a49190611515565b91505090565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001356fffffffffffffffffffffffffffffffff19168260400160208101906104f69190611936565b8380606001906105069190611972565b6040516105169493929190611a60565b60405180910390a150565b606061052b610824565b61053457600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561057e57600080fd5b505af1158015610592573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105bb9190611515565b905060006105c8826108ec565b905060006105d5836109e3565b9050600061061a8989896040518060400160405280601581526020017f6d657673686172653a76303a6d61746368426964730000000000000000000000815250610ad8565b905061066081600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610bde565b6106c481600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c74730081525060006040516020016106b09190611af2565b604051602081830303815290604052610bde565b6000600267ffffffffffffffff8111156106e1576106e0610f3e565b5b60405190808252806020026020018201604052801561070f5781602001602082028036833780820191505090505b509050868160008151811061072757610726611b0d565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505081600001518160018151811061077457610773611b0d565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505061080b82600001516040518060400160405280601681526020017f6d657673686172653a76303a6d65726765644269647300000000000000000000815250836040516020016107f79190611beb565b604051602081830303815290604052610bde565b6108158284610d98565b95505050505050949350505050565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff1660405161085090611c33565b600060405180830381855afa9150503d806000811461088b576040519150601f19603f3d011682016040523d82523d6000602084013e610890565b606091505b5091509150816108dd576342010000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016108d4929190611c57565b60405180910390fd5b80516020820151935050505090565b6000806000634210000073ffffffffffffffffffffffffffffffffffffffff168460405160200161091d91906111f2565b6040516020818303038152906040526040516109399190611c87565b600060405180830381855afa9150503d8060008114610974576040519150601f19603f3d011682016040523d82523d6000602084013e610979565b606091505b5091509150816109c6576342100000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016109bd929190611c57565b60405180910390fd5b808060200190518101906109da9190611cb3565b92505050919050565b60606109ed610824565b6109f657600080fd5b600080634210003773ffffffffffffffffffffffffffffffffffffffff1684604051602001610a2591906111f2565b604051602081830303815290604052604051610a419190611c87565b600060405180830381855afa9150503d8060008114610a7c576040519150601f19603f3d011682016040523d82523d6000602084013e610a81565b606091505b509150915081610ace576342100037816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610ac5929190611c57565b60405180910390fd5b8092505050919050565b610ae0610e6e565b600080634203000073ffffffffffffffffffffffffffffffffffffffff1687878787604051602001610b159493929190611d2a565b604051602081830303815290604052604051610b319190611c87565b600060405180830381855afa9150503d8060008114610b6c576040519150601f19603f3d011682016040523d82523d6000602084013e610b71565b606091505b509150915081610bbe576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610bb5929190611c57565b60405180910390fd5b80806020019051810190610bd29190611fe4565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001610c119392919061202d565b604051602081830303815290604052604051610c2d9190611c87565b600060405180830381855afa9150503d8060008114610c68576040519150601f19603f3d011682016040523d82523d6000602084013e610c6d565b606091505b509150915081610cba576342020000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610cb1929190611c57565b60405180910390fd5b5050505050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff16604051602001604051602081830303815290604052604051610d039190611c87565b600060405180830381855afa9150503d8060008114610d3e576040519150601f19603f3d011682016040523d82523d6000602084013e610d43565b606091505b509150915081610d90576342010001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610d87929190611c57565b60405180910390fd5b809250505090565b60607f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e836000015184604001518560600151604051610dd993929190611667565b60405180910390a17fafa6f6affefc1010901fc56588695137d9939d2d8b34b30abee96af800a1adc2836000015183604051610e169291906116a5565b60405180910390a163c0b9d28760e01b83604051602001610e379190612072565b604051602081830303815290604052604051602001610e5792919061190e565b604051602081830303815290604052905092915050565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b610f0581610ee8565b8114610f1057600080fd5b50565b600081359050610f2281610efc565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f7682610f2d565b810181811067ffffffffffffffff82111715610f9557610f94610f3e565b5b80604052505050565b6000610fa8610ed4565b9050610fb48282610f6d565b919050565b600067ffffffffffffffff821115610fd457610fd3610f3e565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101582610fea565b9050919050565b6110258161100a565b811461103057600080fd5b50565b6000813590506110428161101c565b92915050565b600061105b61105684610fb9565b610f9e565b9050808382526020820190506020840283018581111561107e5761107d610fe5565b5b835b818110156110a757806110938882611033565b845260208401935050602081019050611080565b5050509392505050565b600082601f8301126110c6576110c5610f28565b5b81356110d6848260208601611048565b91505092915050565b6000806000606084860312156110f8576110f7610ede565b5b600061110686828701610f13565b935050602084013567ffffffffffffffff81111561112757611126610ee3565b5b611133868287016110b1565b925050604084013567ffffffffffffffff81111561115457611153610ee3565b5b611160868287016110b1565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156111a4578082015181840152602081019050611189565b838111156111b3576000848401525b50505050565b60006111c48261116a565b6111ce8185611175565b93506111de818560208601611186565b6111e781610f2d565b840191505092915050565b6000602082019050818103600083015261120c81846111b9565b905092915050565b600080fd5b600060c0828403121561122f5761122e611214565b5b81905092915050565b600080fd5b600067ffffffffffffffff82111561125857611257610f3e565b5b61126182610f2d565b9050602081019050919050565b82818337600083830152505050565b600061129061128b8461123d565b610f9e565b9050828152602081018484840111156112ac576112ab611238565b5b6112b784828561126e565b509392505050565b600082601f8301126112d4576112d3610f28565b5b81356112e484826020860161127d565b91505092915050565b6000806040838503121561130457611303610ede565b5b600083013567ffffffffffffffff81111561132257611321610ee3565b5b61132e85828601611219565b925050602083013567ffffffffffffffff81111561134f5761134e610ee3565b5b61135b858286016112bf565b9150509250929050565b60006020828403121561137b5761137a610ede565b5b600082013567ffffffffffffffff81111561139957611398610ee3565b5b6113a584828501611219565b91505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6113e3816113ae565b81146113ee57600080fd5b50565b600081359050611400816113da565b92915050565b600080600080608085870312156114205761141f610ede565b5b600061142e87828801610f13565b945050602085013567ffffffffffffffff81111561144f5761144e610ee3565b5b61145b878288016110b1565b935050604085013567ffffffffffffffff81111561147c5761147b610ee3565b5b611488878288016110b1565b9250506060611499878288016113f1565b91505092959194509250565b60006114b86114b38461123d565b610f9e565b9050828152602081018484840111156114d4576114d3611238565b5b6114df848285611186565b509392505050565b600082601f8301126114fc576114fb610f28565b5b815161150c8482602086016114a5565b91505092915050565b60006020828403121561152b5761152a610ede565b5b600082015167ffffffffffffffff81111561154957611548610ee3565b5b611555848285016114e7565b91505092915050565b61156781610ee8565b82525050565b6000602082019050611582600083018461155e565b92915050565b6000611593826113ae565b9050919050565b6115a381611588565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6115de8161100a565b82525050565b60006115f083836115d5565b60208301905092915050565b6000602082019050919050565b6000611614826115a9565b61161e81856115b4565b9350611629836115c5565b8060005b8381101561165a57815161164188826115e4565b975061164c836115fc565b92505060018101905061162d565b5085935050505092915050565b600060608201905061167c600083018661159a565b611689602083018561155e565b818103604083015261169b8184611609565b9050949350505050565b60006040820190506116ba600083018561159a565b81810360208301526116cc81846111b9565b90509392505050565b6116de81611588565b82525050565b6116ed81610ee8565b82525050565b600082825260208201905092915050565b600061170f826115a9565b61171981856116f3565b9350611724836115c5565b8060005b8381101561175557815161173c88826115e4565b9750611747836115fc565b925050600181019050611728565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b600061178982611762565b611793818561176d565b93506117a3818560208601611186565b6117ac81610f2d565b840191505092915050565b600060c0830160008301516117cf60008601826116d5565b5060208301516117e260208601826116d5565b5060408301516117f560408601826116e4565b506060830151848203606086015261180d8282611704565b915050608083015184820360808601526118278282611704565b91505060a083015184820360a0860152611841828261177e565b9150508091505092915050565b6000604082019050818103600083015261186881856117b7565b9050818103602083015261187c81846111b9565b90509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6118cc6118c782611885565b6118b1565b82525050565b600081905092915050565b60006118e88261116a565b6118f281856118d2565b9350611902818560208601611186565b80840191505092915050565b600061191a82856118bb565b60048201915061192a82846118dd565b91508190509392505050565b60006020828403121561194c5761194b610ede565b5b600061195a84828501610f13565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261198f5761198e611963565b5b80840192508235915067ffffffffffffffff8211156119b1576119b0611968565b5b6020830192506020820236038313156119cd576119cc61196d565b5b509250929050565b6000819050919050565b60006119ee6020840184611033565b905092915050565b6000602082019050919050565b6000611a0f83856115b4565b9350611a1a826119d5565b8060005b85811015611a5357611a3082846119df565b611a3a88826115e4565b9750611a45836119f6565b925050600181019050611a1e565b5085925050509392505050565b6000606082019050611a75600083018761159a565b611a82602083018661155e565b8181036040830152611a95818486611a03565b905095945050505050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611adc611ad7611ad284611aa0565b611ab7565b611aaa565b9050919050565b611aec81611ac1565b82525050565b6000602082019050611b076000830184611ae3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611b7483836116d5565b60208301905092915050565b6000602082019050919050565b6000611b9882611b3c565b611ba28185611b47565b9350611bad83611b58565b8060005b83811015611bde578151611bc58882611b68565b9750611bd083611b80565b925050600181019050611bb1565b5085935050505092915050565b60006020820190508181036000830152611c058184611b8d565b905092915050565b50565b6000611c1d6000836118d2565b9150611c2882611c0d565b600082019050919050565b6000611c3e82611c10565b9150819050919050565b611c518161100a565b82525050565b6000604082019050611c6c6000830185611c48565b8181036020830152611c7e81846111b9565b90509392505050565b6000611c9382846118dd565b915081905092915050565b600081519050611cad81610efc565b92915050565b600060208284031215611cc957611cc8610ede565b5b6000611cd784828501611c9e565b91505092915050565b600082825260208201905092915050565b6000611cfc82611762565b611d068185611ce0565b9350611d16818560208601611186565b611d1f81610f2d565b840191505092915050565b6000608082019050611d3f600083018761155e565b8181036020830152611d518186611609565b90508181036040830152611d658185611609565b90508181036060830152611d798184611cf1565b905095945050505050565b600080fd5b600080fd5b600081519050611d9d816113da565b92915050565b600081519050611db28161101c565b92915050565b6000611dcb611dc684610fb9565b610f9e565b90508083825260208201905060208402830185811115611dee57611ded610fe5565b5b835b81811015611e175780611e038882611da3565b845260208401935050602081019050611df0565b5050509392505050565b600082601f830112611e3657611e35610f28565b5b8151611e46848260208601611db8565b91505092915050565b600067ffffffffffffffff821115611e6a57611e69610f3e565b5b611e7382610f2d565b9050602081019050919050565b6000611e93611e8e84611e4f565b610f9e565b905082815260208101848484011115611eaf57611eae611238565b5b611eba848285611186565b509392505050565b600082601f830112611ed757611ed6610f28565b5b8151611ee7848260208601611e80565b91505092915050565b600060c08284031215611f0657611f05611d84565b5b611f1060c0610f9e565b90506000611f2084828501611d8e565b6000830152506020611f3484828501611d8e565b6020830152506040611f4884828501611c9e565b604083015250606082015167ffffffffffffffff811115611f6c57611f6b611d89565b5b611f7884828501611e21565b606083015250608082015167ffffffffffffffff811115611f9c57611f9b611d89565b5b611fa884828501611e21565b60808301525060a082015167ffffffffffffffff811115611fcc57611fcb611d89565b5b611fd884828501611ec2565b60a08301525092915050565b600060208284031215611ffa57611ff9610ede565b5b600082015167ffffffffffffffff81111561201857612017610ee3565b5b61202484828501611ef0565b91505092915050565b6000606082019050612042600083018661159a565b81810360208301526120548185611cf1565b9050818103604083015261206881846111b9565b9050949350505050565b6000602082019050818103600083015261208c81846117b7565b90509291505056fea2646970667358221220748d1611a680d7aa42004403b11139019271d10957c94578b7e516dcb33302c364736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}