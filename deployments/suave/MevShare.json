{
  "address": "0x853595d2742215A7a1616721815E0EACa37a6674",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "PeekerReverted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "bidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "allowedPeekers",
          "type": "address[]"
        }
      ],
      "name": "BidEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "bidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "hint",
          "type": "bytes"
        }
      ],
      "name": "HintEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "matchBidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "bidhint",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "matchHint",
          "type": "bytes"
        }
      ],
      "name": "MatchEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.BidId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "bid",
          "type": "tuple"
        }
      ],
      "name": "emitBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.BidId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "bid",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "hint",
          "type": "bytes"
        }
      ],
      "name": "emitBidAndHint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.BidId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "bid",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "bidHint",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "matchHint",
          "type": "bytes"
        }
      ],
      "name": "emitMatchBidAndHint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchBidConfidentialBundleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "bidAllowedPeekers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "bidAllowedStores",
          "type": "address[]"
        }
      ],
      "name": "newBid",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "bidAllowedPeekers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "bidAllowedStores",
          "type": "address[]"
        },
        {
          "internalType": "Suave.BidId",
          "name": "shareBidId",
          "type": "bytes16"
        }
      ],
      "name": "newMatch",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1bf68dcfc16e5a6d0b983610b6373cc83d006962186ffaadb00db6b53ee70d69",
  "receipt": {
    "to": null,
    "from": "0x19E7E376E7C213B7E7e7e46cc70A5dD086DAff2A",
    "contractAddress": "0x853595d2742215A7a1616721815E0EACa37a6674",
    "transactionIndex": 0,
    "gasUsed": "1934630",
    "logsBloom": "0x
    "blockHash": "0x3e6811f9952dc8b85159e043a0e2feddee6042d1df00f99610697c33ef7b4f36",
    "transactionHash": "0x1bf68dcfc16e5a6d0b983610b6373cc83d006962186ffaadb00db6b53ee70d69",
    "logs": [],
    "blockNumber": 87023,
    "cumulativeGasUsed": "1934630",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b78dcd35143fe56c51b4b74d64c79db7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"PeekerReverted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"bidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"}],\"name\":\"BidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"bidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hint\",\"type\":\"bytes\"}],\"name\":\"HintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"matchBidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bidhint\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"matchHint\",\"type\":\"bytes\"}],\"name\":\"MatchEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.BidId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"emitBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.BidId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hint\",\"type\":\"bytes\"}],\"name\":\"emitBidAndHint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.BidId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"bidHint\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"matchHint\",\"type\":\"bytes\"}],\"name\":\"emitMatchBidAndHint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchBidConfidentialBundleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"bidAllowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bidAllowedStores\",\"type\":\"address[]\"}],\"name\":\"newBid\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"bidAllowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bidAllowedStores\",\"type\":\"address[]\"},{\"internalType\":\"Suave.BidId\",\"name\":\"shareBidId\",\"type\":\"bytes16\"}],\"name\":\"newMatch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standard_peekers/bids.sol\":\"MevShareBidContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Suave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.8;\\n\\nlibrary Suave {\\n    error PeekerReverted(address, bytes);\\n\\n    type BidId is bytes16;\\n\\n    struct Bid {\\n        BidId id;\\n        BidId salt;\\n        uint64 decryptionCondition;\\n        address[] allowedPeekers;\\n        address[] allowedStores;\\n        string version;\\n    }\\n\\n    struct BuildBlockArgs {\\n        uint64 slot;\\n        bytes proposerPubkey;\\n        bytes32 parent;\\n        uint64 timestamp;\\n        address feeRecipient;\\n        uint64 gasLimit;\\n        bytes32 random;\\n        Withdrawal[] withdrawals;\\n    }\\n\\n    struct Withdrawal {\\n        uint64 index;\\n        uint64 validator;\\n        address Address;\\n        uint64 amount;\\n    }\\n\\n    address public constant IS_CONFIDENTIAL_ADDR = 0x0000000000000000000000000000000042010000;\\n\\n    address public constant BUILD_ETH_BLOCK = 0x0000000000000000000000000000000042100001;\\n\\n    address public constant CONFIDENTIAL_INPUTS = 0x0000000000000000000000000000000042010001;\\n\\n    address public constant CONFIDENTIAL_STORE_RETRIEVE = 0x0000000000000000000000000000000042020001;\\n\\n    address public constant CONFIDENTIAL_STORE_STORE = 0x0000000000000000000000000000000042020000;\\n\\n    address public constant ETHCALL = 0x0000000000000000000000000000000042100003;\\n\\n    address public constant EXTRACT_HINT = 0x0000000000000000000000000000000042100037;\\n\\n    address public constant FETCH_BIDS = 0x0000000000000000000000000000000042030001;\\n\\n    address public constant NEW_BID = 0x0000000000000000000000000000000042030000;\\n\\n    address public constant SIMULATE_BUNDLE = 0x0000000000000000000000000000000042100000;\\n\\n    address public constant SUBMIT_ETH_BLOCK_BID_TO_RELAY = 0x0000000000000000000000000000000042100002;\\n\\n    // Returns whether execution is off- or on-chain\\n    function isConfidential() internal view returns (bool b) {\\n        (bool success, bytes memory isConfidentialBytes) = IS_CONFIDENTIAL_ADDR.staticcall(\\\"\\\");\\n        if (!success) {\\n            revert PeekerReverted(IS_CONFIDENTIAL_ADDR, isConfidentialBytes);\\n        }\\n        assembly {\\n            // Load the length of data (first 32 bytes)\\n            let len := mload(isConfidentialBytes)\\n            // Load the data after 32 bytes, so add 0x20\\n            b := mload(add(isConfidentialBytes, 0x20))\\n        }\\n    }\\n\\n    function buildEthBlock(BuildBlockArgs memory blockArgs, BidId bidId, string memory namespace)\\n        internal\\n        view\\n        returns (bytes memory, bytes memory)\\n    {\\n        (bool success, bytes memory data) = BUILD_ETH_BLOCK.staticcall(abi.encode(blockArgs, bidId, namespace));\\n        if (!success) {\\n            revert PeekerReverted(BUILD_ETH_BLOCK, data);\\n        }\\n\\n        return abi.decode(data, (bytes, bytes));\\n    }\\n\\n    function confidentialInputs() internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_INPUTS.staticcall(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_INPUTS, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStoreRetrieve(BidId bidId, string memory key) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE_RETRIEVE.staticcall(abi.encode(bidId, key));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE_RETRIEVE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStoreStore(BidId bidId, string memory key, bytes memory data1) internal view {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE_STORE.staticcall(abi.encode(bidId, key, data1));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE_STORE, data);\\n        }\\n    }\\n\\n    function ethcall(address contractAddr, bytes memory input1) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = ETHCALL.staticcall(abi.encode(contractAddr, input1));\\n        if (!success) {\\n            revert PeekerReverted(ETHCALL, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function extractHint(bytes memory bundleData) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = EXTRACT_HINT.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(EXTRACT_HINT, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function fetchBids(uint64 cond, string memory namespace) internal view returns (Bid[] memory) {\\n        (bool success, bytes memory data) = FETCH_BIDS.staticcall(abi.encode(cond, namespace));\\n        if (!success) {\\n            revert PeekerReverted(FETCH_BIDS, data);\\n        }\\n\\n        return abi.decode(data, (Bid[]));\\n    }\\n\\n    function newBid(\\n        uint64 decryptionCondition,\\n        address[] memory allowedPeekers,\\n        address[] memory allowedStores,\\n        string memory bidType\\n    ) internal view returns (Bid memory) {\\n        (bool success, bytes memory data) =\\n            NEW_BID.staticcall(abi.encode(decryptionCondition, allowedPeekers, allowedStores, bidType));\\n        if (!success) {\\n            revert PeekerReverted(NEW_BID, data);\\n        }\\n\\n        return abi.decode(data, (Bid));\\n    }\\n\\n    function simulateBundle(bytes memory bundleData) internal view returns (uint64) {\\n        (bool success, bytes memory data) = SIMULATE_BUNDLE.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_BUNDLE, data);\\n        }\\n\\n        return abi.decode(data, (uint64));\\n    }\\n\\n    function submitEthBlockBidToRelay(string memory relayUrl, bytes memory builderBid)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_ETH_BLOCK_BID_TO_RELAY.staticcall(abi.encode(relayUrl, builderBid));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_ETH_BLOCK_BID_TO_RELAY, data);\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0xab645f60638facb4daa685216d77501640c8d96e6c0b926f4402cae4f89adcc5\",\"license\":\"UNLICENSED\"},\"contracts/standard_peekers/bids.sol\":{\"content\":\"pragma solidity ^0.8.8;\\n\\nimport \\\"../libraries/Suave.sol\\\";\\n\\ncontract AnyBidContract {\\n\\n\\tevent BidEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tuint64 decryptionCondition,\\n\\t\\taddress[] allowedPeekers\\n\\t);\\n\\n\\tfunction fetchBidConfidentialBundleData() public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\t\\t\\n\\t\\tbytes memory confidentialInputs = Suave.confidentialInputs();\\n\\t\\treturn abi.decode(confidentialInputs, (bytes));\\n\\t}\\n\\n\\t// Bids to this contract should not be trusted!\\n\\tfunction emitBid(Suave.Bid calldata bid) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t}\\n}\\n\\ncontract BundleBidContract is AnyBidContract {\\n\\n\\tfunction newBid(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores) external payable returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tbytes memory bundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\tuint64 egp = Suave.simulateBundle(bundleData);\\n\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"default:v0:ethBundles\\\");\\n\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"default:v0:ethBundles\\\", bundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"default:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(bid));\\n\\t}\\n}\\n\\ncontract MevShareBidContract is AnyBidContract {\\n\\n\\tevent HintEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tbytes hint\\n\\t);\\n\\n\\tevent MatchEvent(\\n\\t\\tSuave.BidId matchBidId,\\n\\t\\tbytes bidhint,\\n\\t\\tbytes matchHint\\n\\t);\\n\\n\\tfunction newBid(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores) external payable returns (bytes memory) {\\n\\t\\t// 0. check confidential execution\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t// 1. fetch bundle data\\n\\t\\tbytes memory bundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\t// 2. sim bundle\\n\\t\\tuint64 egp = Suave.simulateBundle(bundleData);\\n\\t\\t\\n\\t\\t// 3. extract hint\\n\\t\\tbytes memory hint = Suave.extractHint(bundleData);\\n\\t\\t\\n\\t\\t// // 4. store bundle and sim results\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundles\\\", bundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit HintEvent(bid.id, hint);\\n\\n\\t\\t// // 5. return \\\"callback\\\" to emit hint onchain\\n\\t\\treturn bytes.concat(this.emitBidAndHint.selector, abi.encode(bid, hint));\\n\\t}\\n\\n\\tfunction emitBidAndHint(Suave.Bid calldata bid, bytes memory hint) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit HintEvent(bid.id, hint);\\n\\t}\\n\\n\\tfunction newMatch(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores, Suave.BidId shareBidId) external payable returns (bytes memory) {\\n\\t\\t// WARNING : this function will copy the original mev share bid\\n\\t\\t// into a new key with potentially different permsissions\\n\\t\\t\\n\\t\\trequire(Suave.isConfidential());\\n\\t\\t// 1. fetch confidential data\\n\\t\\tbytes memory matchBundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\t// 2. sim match alone for validity\\n\\t\\tuint64 egp = Suave.simulateBundle(matchBundleData);\\n\\n\\t\\t// 3. extract hint\\n\\t\\tbytes memory matchHint = Suave.extractHint(matchBundleData);\\n\\t\\t\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"mevshare:v0:matchBids\\\");\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundles\\\", matchBundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(0));\\n\\n\\t\\t//4. merge bids\\n\\t\\tSuave.BidId[] memory bids = new Suave.BidId[](2);\\n\\t\\tbids[0] = shareBidId;\\n\\t\\tbids[1] = bid.id;\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:mergedBids\\\", abi.encode(bids));\\n\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(bid));\\n\\t}\\n\\n\\tfunction emitMatchBidAndHint(Suave.Bid calldata bid, bytes memory bidHint, bytes memory matchHint) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit MatchEvent(bid.id, bidHint, matchHint);\\n\\t}\\n}\\n\\n/* Not tested or implemented on the precompile side */\\nstruct EgpBidPair {\\n\\tuint64 egp; // in wei, beware overflow\\n\\tSuave.BidId bidId;\\n}\\n\\ncontract EthBlockBidContract is AnyBidContract {\\n\\n\\tevent BuilderBoostBidEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tbytes builderBid\\n\\t);\\n\\t\\n\\tfunction idsEqual(Suave.BidId _l, Suave.BidId _r) public pure returns (bool) {\\n\\t\\tbytes memory l = abi.encodePacked(_l);\\n\\t\\tbytes memory r = abi.encodePacked(_r);\\n\\t\\tfor (uint i = 0; i < l.length; i++) {\\n\\t\\t\\tif (bytes(l)[i] != r[i]) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction buildMevShare(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tSuave.Bid[] memory allShareMatchBids = Suave.fetchBids(blockHeight, \\\"mevshare:v0:matchBids\\\");\\n\\t\\tSuave.Bid[] memory allShareUserBids = Suave.fetchBids(blockHeight, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\n\\t\\tif (allShareUserBids.length == 0) {\\n\\t\\t\\trevert Suave.PeekerReverted(address(this), \\\"no bids\\\");\\n\\t\\t}\\n\\n\\t\\tSuave.Bid[] memory allBids = new Suave.Bid[](allShareUserBids.length);\\n\\t\\tfor (uint i = 0; i < allShareUserBids.length; i++) {\\n\\t\\t\\t// TODO: sort matches by egp first!\\n\\t\\t\\tSuave.Bid memory bidToInsert = allShareUserBids[i]; // will be updated with the best match if any\\n\\t\\t\\tfor (uint j = 0; j < allShareMatchBids.length; j++) {\\n\\t\\t\\t\\t// TODO: should be done once at the start and sorted\\n\\t\\t\\t\\tSuave.BidId[] memory mergedBidIds = abi.decode(Suave.confidentialStoreRetrieve(allShareMatchBids[j].id, \\\"mevshare:v0:mergedBids\\\"), (Suave.BidId[]));\\n\\t\\t\\t\\tif (idsEqual(mergedBidIds[0], allShareUserBids[i].id)) {\\n\\t\\t\\t\\t\\tbidToInsert = allShareMatchBids[j];\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tallBids[i] = bidToInsert;\\n\\t\\t}\\n\\n\\t\\tEgpBidPair[] memory bidsByEGP = new EgpBidPair[](allBids.length);\\n\\t\\tfor (uint i = 0; i < allBids.length; i++) {\\n\\t\\t\\tbytes memory simResults = Suave.confidentialStoreRetrieve(allBids[i].id, \\\"mevshare:v0:ethBundleSimResults\\\");\\n\\t\\t\\tuint64 egp = abi.decode(simResults, (uint64));\\n\\t\\t\\tbidsByEGP[i] = EgpBidPair(egp, allBids[i].id);\\n\\t\\t}\\n\\n\\t\\t// Bubble sort, cause why not\\n\\t\\tuint n = bidsByEGP.length;\\n\\t\\tfor (uint i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint j = i + 1; j < n; j++) {\\n\\t\\t\\t\\tif (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n\\t\\t\\t\\t\\tEgpBidPair memory temp = bidsByEGP[i];\\n\\t\\t\\t\\t\\tbidsByEGP[i] = bidsByEGP[j];\\n\\t\\t\\t\\t\\tbidsByEGP[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tSuave.BidId[] memory allBidIds = new Suave.BidId[](allBids.length);\\n\\t\\tfor (uint i = 0; i < bidsByEGP.length; i++) {\\n\\t\\t\\tallBidIds[i] = bidsByEGP[i].bidId;\\n\\t\\t}\\n\\n\\t\\treturn buildAndEmit(blockArgs, blockHeight, allBidIds, \\\"mevshare:v0\\\");\\n\\t}\\n\\n\\tfunction buildFromPool(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tSuave.Bid[] memory allBids = Suave.fetchBids(blockHeight, \\\"default:v0:ethBundles\\\");\\n\\t\\tif (allBids.length == 0) {\\n\\t\\t\\trevert Suave.PeekerReverted(address(this), \\\"no bids\\\");\\n\\t\\t}\\n\\n\\t\\tEgpBidPair[] memory bidsByEGP = new EgpBidPair[](allBids.length);\\n\\t\\tfor (uint i = 0; i < allBids.length; i++) {\\n\\t\\t\\tbytes memory simResults = Suave.confidentialStoreRetrieve(allBids[i].id, \\\"default:v0:ethBundleSimResults\\\");\\n\\t\\t\\tuint64 egp = abi.decode(simResults, (uint64));\\n\\t\\t\\tbidsByEGP[i] = EgpBidPair(egp, allBids[i].id);\\n\\t\\t}\\n\\n\\t\\t// Bubble sort, cause why not\\n\\t\\tuint n = bidsByEGP.length;\\n\\t\\tfor (uint i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint j = i + 1; j < n; j++) {\\n\\t\\t\\t\\tif (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n\\t\\t\\t\\t\\tEgpBidPair memory temp = bidsByEGP[i];\\n\\t\\t\\t\\t\\tbidsByEGP[i] = bidsByEGP[j];\\n\\t\\t\\t\\t\\tbidsByEGP[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tSuave.BidId[] memory allBidIds = new Suave.BidId[](allBids.length);\\n\\t\\tfor (uint i = 0; i < bidsByEGP.length; i++) {\\n\\t\\t\\tallBidIds[i] = bidsByEGP[i].bidId;\\n\\t\\t}\\n\\n\\t\\treturn buildAndEmit(blockArgs, blockHeight, allBidIds, \\\"\\\");\\n\\t}\\n\\n\\tfunction buildAndEmit(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public virtual returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t(Suave.Bid memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\n\\t\\temit BuilderBoostBidEvent(blockBid.id, builderBid);\\n\\t\\temit BidEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBuilderBidAndBid.selector, abi.encode(blockBid, builderBid));\\n\\t}\\n\\n\\tfunction doBuild(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public view returns (Suave.Bid memory, bytes memory) {\\n\\t\\taddress[] memory allowedPeekers = new address[](2);\\n\\t\\tallowedPeekers[0] = address(this);\\n\\t\\tallowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\n\\t\\tSuave.Bid memory blockBid = Suave.newBid(blockHeight, allowedPeekers, allowedPeekers, \\\"default:v0:mergedBids\\\");\\n\\t\\tSuave.confidentialStoreStore(blockBid.id, \\\"default:v0:mergedBids\\\", abi.encode(bids));\\n\\t\\t \\n\\t\\t(bytes memory builderBid, bytes memory payload) = Suave.buildEthBlock(blockArgs, blockBid.id, namespace);\\n\\t\\tSuave.confidentialStoreStore(blockBid.id, \\\"default:v0:builderPayload\\\", payload); // only through this.unlock\\n\\n\\t\\treturn (blockBid, builderBid);\\n\\t}\\n\\n\\tfunction emitBuilderBidAndBid(Suave.Bid memory bid, bytes memory builderBid) public returns (Suave.Bid memory, bytes memory) {\\n\\t\\temit BuilderBoostBidEvent(bid.id, builderBid);\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\treturn (bid, builderBid);\\n\\t}\\n\\n\\tfunction unlock(Suave.BidId bidId, bytes memory signedBlindedHeader) public view returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t// TODO: verify the header is correct\\n\\t\\t// TODO: incorporate protocol name\\n\\t\\tbytes memory payload = Suave.confidentialStoreRetrieve(bidId, \\\"default:v0:builderPayload\\\");\\n\\t\\treturn payload;\\n\\t}\\n}\\n\\ncontract EthBlockBidSenderContract is EthBlockBidContract {\\n\\tstring boostRelayUrl;\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tboostRelayUrl = boostRelayUrl_;\\n\\t}\\n\\n\\tfunction buildAndEmit(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public virtual override returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t(Suave.Bid memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\t\\tSuave.submitEthBlockBidToRelay(boostRelayUrl, builderBid);\\n\\n\\t\\temit BidEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(blockBid));\\n\\t}\\n}\\n\",\"keccak256\":\"0x05159dc267bd1cf101ff2ce1d797f431b1ebe072ed34bf1444ad963743886f87\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061221d806100206000396000f3fe6080604052600436106100555760003560e01c8063236eb5a71461005a57806343d50a7c1461008a57806389026c11146100b357806392f07a58146100dc578063c0b9d28714610107578063d8f55db914610130575b600080fd5b610074600480360381019061006f9190611146565b610160565b6040516100819190611259565b60405180910390f35b34801561009657600080fd5b506100b160048036038101906100ac9190611354565b6103dd565b005b3480156100bf57600080fd5b506100da60048036038101906100d591906113fb565b6104a8565b005b3480156100e857600080fd5b506100f1610570565b6040516100fe9190611259565b60405180910390f35b34801561011357600080fd5b5061012e60048036038101906101299190611473565b6105a9565b005b61014a60048036038101906101459190611514565b610620565b6040516101579190611259565b60405180910390f35b606061016a610961565b61017357600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101bd57600080fd5b505af11580156101d1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101fa9190611623565b9050600061020782610a29565b9050600061021483610b20565b905060006102598888886040518060400160405280601c81526020017f6d657673686172653a76303a756e6d61746368656442756e646c657300000000815250610c15565b905061029f81600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610d1b565b61030281600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c747300815250856040516020016102ee919061167b565b604051602081830303815290604052610d1b565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001518260400151836060015160405161034193929190611775565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395081600001518360405161037e9291906117b3565b60405180910390a16389026c1160e01b81836040516020016103a192919061195c565b6040516020818303038152906040526040516020016103c1929190611a1c565b6040516020818303038152906040529450505050509392505050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e83600001356fffffffffffffffffffffffffffffffff19168460400160208101906104299190611a44565b8580606001906104399190611a80565b6040516104499493929190611b6e565b60405180910390a17f417b0c16c40ca502ef10ae6921892668f006f527e3f4599cb95b9de965d4133483600001356fffffffffffffffffffffffffffffffff1916838360405161049b93929190611bae565b60405180910390a1505050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e82600001356fffffffffffffffffffffffffffffffff19168360400160208101906104f49190611a44565b8480606001906105049190611a80565b6040516105149493929190611b6e565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395082600001356fffffffffffffffffffffffffffffffff1916826040516105649291906117b3565b60405180910390a15050565b606061057a610961565b61058357600080fd5b600061058d610dfe565b9050808060200190518101906105a39190611623565b91505090565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001356fffffffffffffffffffffffffffffffff19168260400160208101906105f59190611a44565b8380606001906106059190611a80565b6040516106159493929190611b6e565b60405180910390a150565b606061062a610961565b61063357600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561067d57600080fd5b505af1158015610691573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106ba9190611623565b905060006106c782610a29565b905060006106d483610b20565b905060006107198989896040518060400160405280601581526020017f6d657673686172653a76303a6d61746368426964730000000000000000000000815250610c15565b905061075f81600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610d1b565b6107c381600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c74730081525060006040516020016107af9190611c45565b604051602081830303815290604052610d1b565b6000600267ffffffffffffffff8111156107e0576107df610fa5565b5b60405190808252806020026020018201604052801561080e5781602001602082028036833780820191505090505b509050868160008151811061082657610825611c60565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505081600001518160018151811061087357610872611c60565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505061090a82600001516040518060400160405280601681526020017f6d657673686172653a76303a6d65726765644269647300000000000000000000815250836040516020016108f69190611d3e565b604051602081830303815290604052610d1b565b63c0b9d28760e01b826040516020016109239190611d60565b604051602081830303815290604052604051602001610943929190611a1c565b60405160208183030381529060405295505050505050949350505050565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff1660405161098d90611da8565b600060405180830381855afa9150503d80600081146109c8576040519150601f19603f3d011682016040523d82523d6000602084013e6109cd565b606091505b509150915081610a1a576342010000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610a11929190611dcc565b60405180910390fd5b80516020820151935050505090565b6000806000634210000073ffffffffffffffffffffffffffffffffffffffff1684604051602001610a5a9190611259565b604051602081830303815290604052604051610a769190611dfc565b600060405180830381855afa9150503d8060008114610ab1576040519150601f19603f3d011682016040523d82523d6000602084013e610ab6565b606091505b509150915081610b03576342100000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610afa929190611dcc565b60405180910390fd5b80806020019051810190610b179190611e28565b92505050919050565b6060610b2a610961565b610b3357600080fd5b600080634210003773ffffffffffffffffffffffffffffffffffffffff1684604051602001610b629190611259565b604051602081830303815290604052604051610b7e9190611dfc565b600060405180830381855afa9150503d8060008114610bb9576040519150601f19603f3d011682016040523d82523d6000602084013e610bbe565b606091505b509150915081610c0b576342100037816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610c02929190611dcc565b60405180910390fd5b8092505050919050565b610c1d610ed5565b600080634203000073ffffffffffffffffffffffffffffffffffffffff1687878787604051602001610c529493929190611e9f565b604051602081830303815290604052604051610c6e9190611dfc565b600060405180830381855afa9150503d8060008114610ca9576040519150601f19603f3d011682016040523d82523d6000602084013e610cae565b606091505b509150915081610cfb576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610cf2929190611dcc565b60405180910390fd5b80806020019051810190610d0f9190612159565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001610d4e939291906121a2565b604051602081830303815290604052604051610d6a9190611dfc565b600060405180830381855afa9150503d8060008114610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b606091505b509150915081610df7576342020000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610dee929190611dcc565b60405180910390fd5b5050505050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff16604051602001604051602081830303815290604052604051610e409190611dfc565b600060405180830381855afa9150503d8060008114610e7b576040519150601f19603f3d011682016040523d82523d6000602084013e610e80565b606091505b509150915081610ecd576342010001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610ec4929190611dcc565b60405180910390fd5b809250505090565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b610f6c81610f4f565b8114610f7757600080fd5b50565b600081359050610f8981610f63565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610fdd82610f94565b810181811067ffffffffffffffff82111715610ffc57610ffb610fa5565b5b80604052505050565b600061100f610f3b565b905061101b8282610fd4565b919050565b600067ffffffffffffffff82111561103b5761103a610fa5565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061107c82611051565b9050919050565b61108c81611071565b811461109757600080fd5b50565b6000813590506110a981611083565b92915050565b60006110c26110bd84611020565b611005565b905080838252602082019050602084028301858111156110e5576110e461104c565b5b835b8181101561110e57806110fa888261109a565b8452602084019350506020810190506110e7565b5050509392505050565b600082601f83011261112d5761112c610f8f565b5b813561113d8482602086016110af565b91505092915050565b60008060006060848603121561115f5761115e610f45565b5b600061116d86828701610f7a565b935050602084013567ffffffffffffffff81111561118e5761118d610f4a565b5b61119a86828701611118565b925050604084013567ffffffffffffffff8111156111bb576111ba610f4a565b5b6111c786828701611118565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561120b5780820151818401526020810190506111f0565b8381111561121a576000848401525b50505050565b600061122b826111d1565b61123581856111dc565b93506112458185602086016111ed565b61124e81610f94565b840191505092915050565b600060208201905081810360008301526112738184611220565b905092915050565b600080fd5b600060c082840312156112965761129561127b565b5b81905092915050565b600080fd5b600067ffffffffffffffff8211156112bf576112be610fa5565b5b6112c882610f94565b9050602081019050919050565b82818337600083830152505050565b60006112f76112f2846112a4565b611005565b9050828152602081018484840111156113135761131261129f565b5b61131e8482856112d5565b509392505050565b600082601f83011261133b5761133a610f8f565b5b813561134b8482602086016112e4565b91505092915050565b60008060006060848603121561136d5761136c610f45565b5b600084013567ffffffffffffffff81111561138b5761138a610f4a565b5b61139786828701611280565b935050602084013567ffffffffffffffff8111156113b8576113b7610f4a565b5b6113c486828701611326565b925050604084013567ffffffffffffffff8111156113e5576113e4610f4a565b5b6113f186828701611326565b9150509250925092565b6000806040838503121561141257611411610f45565b5b600083013567ffffffffffffffff8111156114305761142f610f4a565b5b61143c85828601611280565b925050602083013567ffffffffffffffff81111561145d5761145c610f4a565b5b61146985828601611326565b9150509250929050565b60006020828403121561148957611488610f45565b5b600082013567ffffffffffffffff8111156114a7576114a6610f4a565b5b6114b384828501611280565b91505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6114f1816114bc565b81146114fc57600080fd5b50565b60008135905061150e816114e8565b92915050565b6000806000806080858703121561152e5761152d610f45565b5b600061153c87828801610f7a565b945050602085013567ffffffffffffffff81111561155d5761155c610f4a565b5b61156987828801611118565b935050604085013567ffffffffffffffff81111561158a57611589610f4a565b5b61159687828801611118565b92505060606115a7878288016114ff565b91505092959194509250565b60006115c66115c1846112a4565b611005565b9050828152602081018484840111156115e2576115e161129f565b5b6115ed8482856111ed565b509392505050565b600082601f83011261160a57611609610f8f565b5b815161161a8482602086016115b3565b91505092915050565b60006020828403121561163957611638610f45565b5b600082015167ffffffffffffffff81111561165757611656610f4a565b5b611663848285016115f5565b91505092915050565b61167581610f4f565b82525050565b6000602082019050611690600083018461166c565b92915050565b60006116a1826114bc565b9050919050565b6116b181611696565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6116ec81611071565b82525050565b60006116fe83836116e3565b60208301905092915050565b6000602082019050919050565b6000611722826116b7565b61172c81856116c2565b9350611737836116d3565b8060005b8381101561176857815161174f88826116f2565b975061175a8361170a565b92505060018101905061173b565b5085935050505092915050565b600060608201905061178a60008301866116a8565b611797602083018561166c565b81810360408301526117a98184611717565b9050949350505050565b60006040820190506117c860008301856116a8565b81810360208301526117da8184611220565b90509392505050565b6117ec81611696565b82525050565b6117fb81610f4f565b82525050565b600082825260208201905092915050565b600061181d826116b7565b6118278185611801565b9350611832836116d3565b8060005b8381101561186357815161184a88826116f2565b97506118558361170a565b925050600181019050611836565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b600061189782611870565b6118a1818561187b565b93506118b18185602086016111ed565b6118ba81610f94565b840191505092915050565b600060c0830160008301516118dd60008601826117e3565b5060208301516118f060208601826117e3565b50604083015161190360408601826117f2565b506060830151848203606086015261191b8282611812565b915050608083015184820360808601526119358282611812565b91505060a083015184820360a086015261194f828261188c565b9150508091505092915050565b6000604082019050818103600083015261197681856118c5565b9050818103602083015261198a8184611220565b90509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6119da6119d582611993565b6119bf565b82525050565b600081905092915050565b60006119f6826111d1565b611a0081856119e0565b9350611a108185602086016111ed565b80840191505092915050565b6000611a2882856119c9565b600482019150611a3882846119eb565b91508190509392505050565b600060208284031215611a5a57611a59610f45565b5b6000611a6884828501610f7a565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611a9d57611a9c611a71565b5b80840192508235915067ffffffffffffffff821115611abf57611abe611a76565b5b602083019250602082023603831315611adb57611ada611a7b565b5b509250929050565b6000819050919050565b6000611afc602084018461109a565b905092915050565b6000602082019050919050565b6000611b1d83856116c2565b9350611b2882611ae3565b8060005b85811015611b6157611b3e8284611aed565b611b4888826116f2565b9750611b5383611b04565b925050600181019050611b2c565b5085925050509392505050565b6000606082019050611b8360008301876116a8565b611b90602083018661166c565b8181036040830152611ba3818486611b11565b905095945050505050565b6000606082019050611bc360008301866116a8565b8181036020830152611bd58185611220565b90508181036040830152611be98184611220565b9050949350505050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611c2f611c2a611c2584611bf3565b611c0a565b611bfd565b9050919050565b611c3f81611c14565b82525050565b6000602082019050611c5a6000830184611c36565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611cc783836117e3565b60208301905092915050565b6000602082019050919050565b6000611ceb82611c8f565b611cf58185611c9a565b9350611d0083611cab565b8060005b83811015611d31578151611d188882611cbb565b9750611d2383611cd3565b925050600181019050611d04565b5085935050505092915050565b60006020820190508181036000830152611d588184611ce0565b905092915050565b60006020820190508181036000830152611d7a81846118c5565b905092915050565b50565b6000611d926000836119e0565b9150611d9d82611d82565b600082019050919050565b6000611db382611d85565b9150819050919050565b611dc681611071565b82525050565b6000604082019050611de16000830185611dbd565b8181036020830152611df38184611220565b90509392505050565b6000611e0882846119eb565b915081905092915050565b600081519050611e2281610f63565b92915050565b600060208284031215611e3e57611e3d610f45565b5b6000611e4c84828501611e13565b91505092915050565b600082825260208201905092915050565b6000611e7182611870565b611e7b8185611e55565b9350611e8b8185602086016111ed565b611e9481610f94565b840191505092915050565b6000608082019050611eb4600083018761166c565b8181036020830152611ec68186611717565b90508181036040830152611eda8185611717565b90508181036060830152611eee8184611e66565b905095945050505050565b600080fd5b600080fd5b600081519050611f12816114e8565b92915050565b600081519050611f2781611083565b92915050565b6000611f40611f3b84611020565b611005565b90508083825260208201905060208402830185811115611f6357611f6261104c565b5b835b81811015611f8c5780611f788882611f18565b845260208401935050602081019050611f65565b5050509392505050565b600082601f830112611fab57611faa610f8f565b5b8151611fbb848260208601611f2d565b91505092915050565b600067ffffffffffffffff821115611fdf57611fde610fa5565b5b611fe882610f94565b9050602081019050919050565b600061200861200384611fc4565b611005565b9050828152602081018484840111156120245761202361129f565b5b61202f8482856111ed565b509392505050565b600082601f83011261204c5761204b610f8f565b5b815161205c848260208601611ff5565b91505092915050565b600060c0828403121561207b5761207a611ef9565b5b61208560c0611005565b9050600061209584828501611f03565b60008301525060206120a984828501611f03565b60208301525060406120bd84828501611e13565b604083015250606082015167ffffffffffffffff8111156120e1576120e0611efe565b5b6120ed84828501611f96565b606083015250608082015167ffffffffffffffff81111561211157612110611efe565b5b61211d84828501611f96565b60808301525060a082015167ffffffffffffffff81111561214157612140611efe565b5b61214d84828501612037565b60a08301525092915050565b60006020828403121561216f5761216e610f45565b5b600082015167ffffffffffffffff81111561218d5761218c610f4a565b5b61219984828501612065565b91505092915050565b60006060820190506121b760008301866116a8565b81810360208301526121c98185611e66565b905081810360408301526121dd8184611220565b905094935050505056fea26469706673582212209c8bc5cec7c6ebadeae1b6e4271e60191df49aea3530e1337a2cee541b85838a64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c8063236eb5a71461005a57806343d50a7c1461008a57806389026c11146100b357806392f07a58146100dc578063c0b9d28714610107578063d8f55db914610130575b600080fd5b610074600480360381019061006f9190611146565b610160565b6040516100819190611259565b60405180910390f35b34801561009657600080fd5b506100b160048036038101906100ac9190611354565b6103dd565b005b3480156100bf57600080fd5b506100da60048036038101906100d591906113fb565b6104a8565b005b3480156100e857600080fd5b506100f1610570565b6040516100fe9190611259565b60405180910390f35b34801561011357600080fd5b5061012e60048036038101906101299190611473565b6105a9565b005b61014a60048036038101906101459190611514565b610620565b6040516101579190611259565b60405180910390f35b606061016a610961565b61017357600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101bd57600080fd5b505af11580156101d1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101fa9190611623565b9050600061020782610a29565b9050600061021483610b20565b905060006102598888886040518060400160405280601c81526020017f6d657673686172653a76303a756e6d61746368656442756e646c657300000000815250610c15565b905061029f81600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610d1b565b61030281600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c747300815250856040516020016102ee919061167b565b604051602081830303815290604052610d1b565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001518260400151836060015160405161034193929190611775565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395081600001518360405161037e9291906117b3565b60405180910390a16389026c1160e01b81836040516020016103a192919061195c565b6040516020818303038152906040526040516020016103c1929190611a1c565b6040516020818303038152906040529450505050509392505050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e83600001356fffffffffffffffffffffffffffffffff19168460400160208101906104299190611a44565b8580606001906104399190611a80565b6040516104499493929190611b6e565b60405180910390a17f417b0c16c40ca502ef10ae6921892668f006f527e3f4599cb95b9de965d4133483600001356fffffffffffffffffffffffffffffffff1916838360405161049b93929190611bae565b60405180910390a1505050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e82600001356fffffffffffffffffffffffffffffffff19168360400160208101906104f49190611a44565b8480606001906105049190611a80565b6040516105149493929190611b6e565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395082600001356fffffffffffffffffffffffffffffffff1916826040516105649291906117b3565b60405180910390a15050565b606061057a610961565b61058357600080fd5b600061058d610dfe565b9050808060200190518101906105a39190611623565b91505090565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001356fffffffffffffffffffffffffffffffff19168260400160208101906105f59190611a44565b8380606001906106059190611a80565b6040516106159493929190611b6e565b60405180910390a150565b606061062a610961565b61063357600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561067d57600080fd5b505af1158015610691573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106ba9190611623565b905060006106c782610a29565b905060006106d483610b20565b905060006107198989896040518060400160405280601581526020017f6d657673686172653a76303a6d61746368426964730000000000000000000000815250610c15565b905061075f81600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610d1b565b6107c381600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c74730081525060006040516020016107af9190611c45565b604051602081830303815290604052610d1b565b6000600267ffffffffffffffff8111156107e0576107df610fa5565b5b60405190808252806020026020018201604052801561080e5781602001602082028036833780820191505090505b509050868160008151811061082657610825611c60565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505081600001518160018151811061087357610872611c60565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505061090a82600001516040518060400160405280601681526020017f6d657673686172653a76303a6d65726765644269647300000000000000000000815250836040516020016108f69190611d3e565b604051602081830303815290604052610d1b565b63c0b9d28760e01b826040516020016109239190611d60565b604051602081830303815290604052604051602001610943929190611a1c565b60405160208183030381529060405295505050505050949350505050565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff1660405161098d90611da8565b600060405180830381855afa9150503d80600081146109c8576040519150601f19603f3d011682016040523d82523d6000602084013e6109cd565b606091505b509150915081610a1a576342010000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610a11929190611dcc565b60405180910390fd5b80516020820151935050505090565b6000806000634210000073ffffffffffffffffffffffffffffffffffffffff1684604051602001610a5a9190611259565b604051602081830303815290604052604051610a769190611dfc565b600060405180830381855afa9150503d8060008114610ab1576040519150601f19603f3d011682016040523d82523d6000602084013e610ab6565b606091505b509150915081610b03576342100000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610afa929190611dcc565b60405180910390fd5b80806020019051810190610b179190611e28565b92505050919050565b6060610b2a610961565b610b3357600080fd5b600080634210003773ffffffffffffffffffffffffffffffffffffffff1684604051602001610b629190611259565b604051602081830303815290604052604051610b7e9190611dfc565b600060405180830381855afa9150503d8060008114610bb9576040519150601f19603f3d011682016040523d82523d6000602084013e610bbe565b606091505b509150915081610c0b576342100037816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610c02929190611dcc565b60405180910390fd5b8092505050919050565b610c1d610ed5565b600080634203000073ffffffffffffffffffffffffffffffffffffffff1687878787604051602001610c529493929190611e9f565b604051602081830303815290604052604051610c6e9190611dfc565b600060405180830381855afa9150503d8060008114610ca9576040519150601f19603f3d011682016040523d82523d6000602084013e610cae565b606091505b509150915081610cfb576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610cf2929190611dcc565b60405180910390fd5b80806020019051810190610d0f9190612159565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001610d4e939291906121a2565b604051602081830303815290604052604051610d6a9190611dfc565b600060405180830381855afa9150503d8060008114610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b606091505b509150915081610df7576342020000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610dee929190611dcc565b60405180910390fd5b5050505050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff16604051602001604051602081830303815290604052604051610e409190611dfc565b600060405180830381855afa9150503d8060008114610e7b576040519150601f19603f3d011682016040523d82523d6000602084013e610e80565b606091505b509150915081610ecd576342010001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610ec4929190611dcc565b60405180910390fd5b809250505090565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b610f6c81610f4f565b8114610f7757600080fd5b50565b600081359050610f8981610f63565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610fdd82610f94565b810181811067ffffffffffffffff82111715610ffc57610ffb610fa5565b5b80604052505050565b600061100f610f3b565b905061101b8282610fd4565b919050565b600067ffffffffffffffff82111561103b5761103a610fa5565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061107c82611051565b9050919050565b61108c81611071565b811461109757600080fd5b50565b6000813590506110a981611083565b92915050565b60006110c26110bd84611020565b611005565b905080838252602082019050602084028301858111156110e5576110e461104c565b5b835b8181101561110e57806110fa888261109a565b8452602084019350506020810190506110e7565b5050509392505050565b600082601f83011261112d5761112c610f8f565b5b813561113d8482602086016110af565b91505092915050565b60008060006060848603121561115f5761115e610f45565b5b600061116d86828701610f7a565b935050602084013567ffffffffffffffff81111561118e5761118d610f4a565b5b61119a86828701611118565b925050604084013567ffffffffffffffff8111156111bb576111ba610f4a565b5b6111c786828701611118565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561120b5780820151818401526020810190506111f0565b8381111561121a576000848401525b50505050565b600061122b826111d1565b61123581856111dc565b93506112458185602086016111ed565b61124e81610f94565b840191505092915050565b600060208201905081810360008301526112738184611220565b905092915050565b600080fd5b600060c082840312156112965761129561127b565b5b81905092915050565b600080fd5b600067ffffffffffffffff8211156112bf576112be610fa5565b5b6112c882610f94565b9050602081019050919050565b82818337600083830152505050565b60006112f76112f2846112a4565b611005565b9050828152602081018484840111156113135761131261129f565b5b61131e8482856112d5565b509392505050565b600082601f83011261133b5761133a610f8f565b5b813561134b8482602086016112e4565b91505092915050565b60008060006060848603121561136d5761136c610f45565b5b600084013567ffffffffffffffff81111561138b5761138a610f4a565b5b61139786828701611280565b935050602084013567ffffffffffffffff8111156113b8576113b7610f4a565b5b6113c486828701611326565b925050604084013567ffffffffffffffff8111156113e5576113e4610f4a565b5b6113f186828701611326565b9150509250925092565b6000806040838503121561141257611411610f45565b5b600083013567ffffffffffffffff8111156114305761142f610f4a565b5b61143c85828601611280565b925050602083013567ffffffffffffffff81111561145d5761145c610f4a565b5b61146985828601611326565b9150509250929050565b60006020828403121561148957611488610f45565b5b600082013567ffffffffffffffff8111156114a7576114a6610f4a565b5b6114b384828501611280565b91505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6114f1816114bc565b81146114fc57600080fd5b50565b60008135905061150e816114e8565b92915050565b6000806000806080858703121561152e5761152d610f45565b5b600061153c87828801610f7a565b945050602085013567ffffffffffffffff81111561155d5761155c610f4a565b5b61156987828801611118565b935050604085013567ffffffffffffffff81111561158a57611589610f4a565b5b61159687828801611118565b92505060606115a7878288016114ff565b91505092959194509250565b60006115c66115c1846112a4565b611005565b9050828152602081018484840111156115e2576115e161129f565b5b6115ed8482856111ed565b509392505050565b600082601f83011261160a57611609610f8f565b5b815161161a8482602086016115b3565b91505092915050565b60006020828403121561163957611638610f45565b5b600082015167ffffffffffffffff81111561165757611656610f4a565b5b611663848285016115f5565b91505092915050565b61167581610f4f565b82525050565b6000602082019050611690600083018461166c565b92915050565b60006116a1826114bc565b9050919050565b6116b181611696565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6116ec81611071565b82525050565b60006116fe83836116e3565b60208301905092915050565b6000602082019050919050565b6000611722826116b7565b61172c81856116c2565b9350611737836116d3565b8060005b8381101561176857815161174f88826116f2565b975061175a8361170a565b92505060018101905061173b565b5085935050505092915050565b600060608201905061178a60008301866116a8565b611797602083018561166c565b81810360408301526117a98184611717565b9050949350505050565b60006040820190506117c860008301856116a8565b81810360208301526117da8184611220565b90509392505050565b6117ec81611696565b82525050565b6117fb81610f4f565b82525050565b600082825260208201905092915050565b600061181d826116b7565b6118278185611801565b9350611832836116d3565b8060005b8381101561186357815161184a88826116f2565b97506118558361170a565b925050600181019050611836565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b600061189782611870565b6118a1818561187b565b93506118b18185602086016111ed565b6118ba81610f94565b840191505092915050565b600060c0830160008301516118dd60008601826117e3565b5060208301516118f060208601826117e3565b50604083015161190360408601826117f2565b506060830151848203606086015261191b8282611812565b915050608083015184820360808601526119358282611812565b91505060a083015184820360a086015261194f828261188c565b9150508091505092915050565b6000604082019050818103600083015261197681856118c5565b9050818103602083015261198a8184611220565b90509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6119da6119d582611993565b6119bf565b82525050565b600081905092915050565b60006119f6826111d1565b611a0081856119e0565b9350611a108185602086016111ed565b80840191505092915050565b6000611a2882856119c9565b600482019150611a3882846119eb565b91508190509392505050565b600060208284031215611a5a57611a59610f45565b5b6000611a6884828501610f7a565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611a9d57611a9c611a71565b5b80840192508235915067ffffffffffffffff821115611abf57611abe611a76565b5b602083019250602082023603831315611adb57611ada611a7b565b5b509250929050565b6000819050919050565b6000611afc602084018461109a565b905092915050565b6000602082019050919050565b6000611b1d83856116c2565b9350611b2882611ae3565b8060005b85811015611b6157611b3e8284611aed565b611b4888826116f2565b9750611b5383611b04565b925050600181019050611b2c565b5085925050509392505050565b6000606082019050611b8360008301876116a8565b611b90602083018661166c565b8181036040830152611ba3818486611b11565b905095945050505050565b6000606082019050611bc360008301866116a8565b8181036020830152611bd58185611220565b90508181036040830152611be98184611220565b9050949350505050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611c2f611c2a611c2584611bf3565b611c0a565b611bfd565b9050919050565b611c3f81611c14565b82525050565b6000602082019050611c5a6000830184611c36565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611cc783836117e3565b60208301905092915050565b6000602082019050919050565b6000611ceb82611c8f565b611cf58185611c9a565b9350611d0083611cab565b8060005b83811015611d31578151611d188882611cbb565b9750611d2383611cd3565b925050600181019050611d04565b5085935050505092915050565b60006020820190508181036000830152611d588184611ce0565b905092915050565b60006020820190508181036000830152611d7a81846118c5565b905092915050565b50565b6000611d926000836119e0565b9150611d9d82611d82565b600082019050919050565b6000611db382611d85565b9150819050919050565b611dc681611071565b82525050565b6000604082019050611de16000830185611dbd565b8181036020830152611df38184611220565b90509392505050565b6000611e0882846119eb565b915081905092915050565b600081519050611e2281610f63565b92915050565b600060208284031215611e3e57611e3d610f45565b5b6000611e4c84828501611e13565b91505092915050565b600082825260208201905092915050565b6000611e7182611870565b611e7b8185611e55565b9350611e8b8185602086016111ed565b611e9481610f94565b840191505092915050565b6000608082019050611eb4600083018761166c565b8181036020830152611ec68186611717565b90508181036040830152611eda8185611717565b90508181036060830152611eee8184611e66565b905095945050505050565b600080fd5b600080fd5b600081519050611f12816114e8565b92915050565b600081519050611f2781611083565b92915050565b6000611f40611f3b84611020565b611005565b90508083825260208201905060208402830185811115611f6357611f6261104c565b5b835b81811015611f8c5780611f788882611f18565b845260208401935050602081019050611f65565b5050509392505050565b600082601f830112611fab57611faa610f8f565b5b8151611fbb848260208601611f2d565b91505092915050565b600067ffffffffffffffff821115611fdf57611fde610fa5565b5b611fe882610f94565b9050602081019050919050565b600061200861200384611fc4565b611005565b9050828152602081018484840111156120245761202361129f565b5b61202f8482856111ed565b509392505050565b600082601f83011261204c5761204b610f8f565b5b815161205c848260208601611ff5565b91505092915050565b600060c0828403121561207b5761207a611ef9565b5b61208560c0611005565b9050600061209584828501611f03565b60008301525060206120a984828501611f03565b60208301525060406120bd84828501611e13565b604083015250606082015167ffffffffffffffff8111156120e1576120e0611efe565b5b6120ed84828501611f96565b606083015250608082015167ffffffffffffffff81111561211157612110611efe565b5b61211d84828501611f96565b60808301525060a082015167ffffffffffffffff81111561214157612140611efe565b5b61214d84828501612037565b60a08301525092915050565b60006020828403121561216f5761216e610f45565b5b600082015167ffffffffffffffff81111561218d5761218c610f4a565b5b61219984828501612065565b91505092915050565b60006060820190506121b760008301866116a8565b81810360208301526121c98185611e66565b905081810360408301526121dd8184611220565b905094935050505056fea26469706673582212209c8bc5cec7c6ebadeae1b6e4271e60191df49aea3530e1337a2cee541b85838a64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}