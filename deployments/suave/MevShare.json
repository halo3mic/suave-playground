{
  "address": "0x6E05f58eEddA592f34DD9105b1827f252c509De0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "PeekerReverted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "bidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "allowedPeekers",
          "type": "address[]"
        }
      ],
      "name": "BidEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "bidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "hint",
          "type": "bytes"
        }
      ],
      "name": "HintEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "matchBidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "bidhint",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "matchHint",
          "type": "bytes"
        }
      ],
      "name": "MatchEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "bid",
          "type": "tuple"
        }
      ],
      "name": "emitBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "bid",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "hint",
          "type": "bytes"
        }
      ],
      "name": "emitBidAndHint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "bid",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "bidHint",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "matchHint",
          "type": "bytes"
        }
      ],
      "name": "emitMatchBidAndHint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchBidConfidentialBundleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "bidAllowedPeekers",
          "type": "address[]"
        }
      ],
      "name": "newBid",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "bidAllowedPeekers",
          "type": "address[]"
        },
        {
          "internalType": "Suave.BidId",
          "name": "shareBidId",
          "type": "bytes16"
        }
      ],
      "name": "newMatch",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x937026fbdc905dd46ae121478953b26591bf33e056bbb47e4fc35eb7a18951ad",
  "receipt": {
    "to": null,
    "from": "0x19E7E376E7C213B7E7e7e46cc70A5dD086DAff2A",
    "contractAddress": "0x6E05f58eEddA592f34DD9105b1827f252c509De0",
    "transactionIndex": 0,
    "gasUsed": "1876506",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x876bcc492a47da8121354b72fbf856b7fff7ddd18bc9432abee018df69290dd8",
    "transactionHash": "0x937026fbdc905dd46ae121478953b26591bf33e056bbb47e4fc35eb7a18951ad",
    "logs": [],
    "blockNumber": 99064,
    "cumulativeGasUsed": "1876506",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "454dffb88891d6a4f523773c1b5bacfc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"PeekerReverted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"bidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"}],\"name\":\"BidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"bidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hint\",\"type\":\"bytes\"}],\"name\":\"HintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"matchBidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bidhint\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"matchHint\",\"type\":\"bytes\"}],\"name\":\"MatchEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"emitBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hint\",\"type\":\"bytes\"}],\"name\":\"emitBidAndHint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"bidHint\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"matchHint\",\"type\":\"bytes\"}],\"name\":\"emitMatchBidAndHint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchBidConfidentialBundleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"bidAllowedPeekers\",\"type\":\"address[]\"}],\"name\":\"newBid\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"bidAllowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"Suave.BidId\",\"name\":\"shareBidId\",\"type\":\"bytes16\"}],\"name\":\"newMatch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standard_peekers/bids.sol\":\"MevShareBidContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Suave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.8;\\n\\nlibrary Suave {\\n    error PeekerReverted(address, bytes);\\n\\n    type BidId is bytes16;\\n\\n    struct Bid {\\n        BidId id;\\n        uint64 decryptionCondition;\\n        address[] allowedPeekers;\\n        string version;\\n    }\\n\\n    struct BuildBlockArgs {\\n        uint64 slot;\\n        bytes proposerPubkey;\\n        bytes32 parent;\\n        uint64 timestamp;\\n        address feeRecipient;\\n        uint64 gasLimit;\\n        bytes32 random;\\n        Withdrawal[] withdrawals;\\n    }\\n\\n    struct Withdrawal {\\n        uint64 index;\\n        uint64 validator;\\n        address Address;\\n        uint64 amount;\\n    }\\n\\n    address public constant IS_CONFIDENTIAL_ADDR = 0x0000000000000000000000000000000042010000;\\n\\n    address public constant BUILD_ETH_BLOCK = 0x0000000000000000000000000000000042100001;\\n\\n    address public constant CONFIDENTIAL_INPUTS = 0x0000000000000000000000000000000042010001;\\n\\n    address public constant CONFIDENTIAL_STORE_RETRIEVE = 0x0000000000000000000000000000000042020001;\\n\\n    address public constant CONFIDENTIAL_STORE_STORE = 0x0000000000000000000000000000000042020000;\\n\\n    address public constant EXTRACT_HINT = 0x0000000000000000000000000000000042100037;\\n\\n    address public constant FETCH_BIDS = 0x0000000000000000000000000000000042030001;\\n\\n    address public constant NEW_BID = 0x0000000000000000000000000000000042030000;\\n\\n    address public constant SIMULATE_BUNDLE = 0x0000000000000000000000000000000042100000;\\n\\n    address public constant SUBMIT_ETH_BLOCK_BID_TO_RELAY = 0x0000000000000000000000000000000042100002;\\n\\n    // Returns whether execution is off- or on-chain\\n    function isConfidential() internal view returns (bool b) {\\n        (bool success, bytes memory isConfidentialBytes) = IS_CONFIDENTIAL_ADDR.staticcall(\\\"\\\");\\n        if (!success) {\\n            revert PeekerReverted(IS_CONFIDENTIAL_ADDR, isConfidentialBytes);\\n        }\\n        assembly {\\n            // Load the length of data (first 32 bytes)\\n            let len := mload(isConfidentialBytes)\\n            // Load the data after 32 bytes, so add 0x20\\n            b := mload(add(isConfidentialBytes, 0x20))\\n        }\\n    }\\n\\n    function buildEthBlock(BuildBlockArgs memory blockArgs, BidId bidId, string memory namespace)\\n        internal\\n        view\\n        returns (bytes memory, bytes memory)\\n    {\\n        (bool success, bytes memory data) = BUILD_ETH_BLOCK.staticcall(abi.encode(blockArgs, bidId, namespace));\\n        if (!success) {\\n            revert PeekerReverted(BUILD_ETH_BLOCK, data);\\n        }\\n\\n        return abi.decode(data, (bytes, bytes));\\n    }\\n\\n    function confidentialInputs() internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_INPUTS.staticcall(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_INPUTS, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStoreRetrieve(BidId bidId, string memory key) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE_RETRIEVE.staticcall(abi.encode(bidId, key));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE_RETRIEVE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStoreStore(BidId bidId, string memory key, bytes memory data1) internal view {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE_STORE.staticcall(abi.encode(bidId, key, data1));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE_STORE, data);\\n        }\\n    }\\n\\n    function extractHint(bytes memory bundleData) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = EXTRACT_HINT.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(EXTRACT_HINT, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function fetchBids(uint64 cond, string memory namespace) internal view returns (Bid[] memory) {\\n        (bool success, bytes memory data) = FETCH_BIDS.staticcall(abi.encode(cond, namespace));\\n        if (!success) {\\n            revert PeekerReverted(FETCH_BIDS, data);\\n        }\\n\\n        return abi.decode(data, (Bid[]));\\n    }\\n\\n    function newBid(uint64 decryptionCondition, address[] memory allowedPeekers, string memory bidType)\\n        internal\\n        view\\n        returns (Bid memory)\\n    {\\n        (bool success, bytes memory data) = NEW_BID.staticcall(abi.encode(decryptionCondition, allowedPeekers, bidType));\\n        if (!success) {\\n            revert PeekerReverted(NEW_BID, data);\\n        }\\n\\n        return abi.decode(data, (Bid));\\n    }\\n\\n    function simulateBundle(bytes memory bundleData) internal view returns (uint64) {\\n        (bool success, bytes memory data) = SIMULATE_BUNDLE.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_BUNDLE, data);\\n        }\\n\\n        return abi.decode(data, (uint64));\\n    }\\n\\n    function submitEthBlockBidToRelay(string memory relayUrl, bytes memory builderBid)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_ETH_BLOCK_BID_TO_RELAY.staticcall(abi.encode(relayUrl, builderBid));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_ETH_BLOCK_BID_TO_RELAY, data);\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2997208614a64faf40aebdcac9fb3cf5e6339ee7ca255ea4b9d7644228c0677\",\"license\":\"UNLICENSED\"},\"contracts/standard_peekers/bids.sol\":{\"content\":\"pragma solidity ^0.8.8;\\n\\nimport \\\"../libraries/Suave.sol\\\";\\n\\ncontract AnyBidContract {\\n\\n\\tevent BidEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tuint64 decryptionCondition,\\n\\t\\taddress[] allowedPeekers\\n\\t);\\n\\n\\tfunction fetchBidConfidentialBundleData() public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\t\\t\\n\\t\\tbytes memory confidentialInputs = Suave.confidentialInputs();\\n\\t\\treturn abi.decode(confidentialInputs, (bytes));\\n\\t}\\n\\n\\t// Bids to this contract should not be trusted!\\n\\tfunction emitBid(Suave.Bid calldata bid) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t}\\n}\\n\\ncontract BundleBidContract is AnyBidContract {\\n\\n\\tfunction newBid(uint64 decryptionCondition, address[] memory bidAllowedPeekers) external payable returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tbytes memory bundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\tuint64 egp = Suave.simulateBundle(bundleData);\\n\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, \\\"default:v0:ethBundles\\\");\\n\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"default:v0:ethBundles\\\", bundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"default:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(bid));\\n\\t}\\n}\\n\\ncontract MevShareBidContract is AnyBidContract {\\n\\n\\tevent HintEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tbytes hint\\n\\t);\\n\\n\\tevent MatchEvent(\\n\\t\\tSuave.BidId matchBidId,\\n\\t\\tbytes bidhint,\\n\\t\\tbytes matchHint\\n\\t);\\n\\n\\tfunction newBid(uint64 decryptionCondition, address[] memory bidAllowedPeekers) external payable returns (bytes memory) {\\n\\t\\t// 0. check confidential execution\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t// 1. fetch bundle data\\n\\t\\tbytes memory bundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\t// 2. sim bundle\\n\\t\\tuint64 egp = Suave.simulateBundle(bundleData);\\n\\t\\t\\n\\t\\t// 3. extract hint\\n\\t\\tbytes memory hint = Suave.extractHint(bundleData);\\n\\t\\t\\n\\t\\t// // 4. store bundle and sim results\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundles\\\", bundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit HintEvent(bid.id, hint);\\n\\n\\t\\t// // 5. return \\\"callback\\\" to emit hint onchain\\n\\t\\treturn bytes.concat(this.emitBidAndHint.selector, abi.encode(bid, hint));\\n\\t}\\n\\n\\tfunction emitBidAndHint(Suave.Bid calldata bid, bytes memory hint) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit HintEvent(bid.id, hint);\\n\\t}\\n\\n\\tfunction newMatch(uint64 decryptionCondition, address[] memory bidAllowedPeekers, Suave.BidId shareBidId) external payable returns (bytes memory) {\\n\\t\\t// WARNING : this function will copy the original mev share bid\\n\\t\\t// into a new key with potentially different permsissions\\n\\t\\t\\n\\t\\trequire(Suave.isConfidential());\\n\\t\\t// 1. fetch confidential data\\n\\t\\tbytes memory matchBundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\t// 2. sim match alone for validity\\n\\t\\tuint64 egp = Suave.simulateBundle(matchBundleData);\\n\\n\\t\\t// 3. extract hint\\n\\t\\tbytes memory matchHint = Suave.extractHint(matchBundleData);\\n\\t\\t\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, \\\"mevshare:v0:matchBids\\\");\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundles\\\", matchBundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(0));\\n\\n\\t\\t//4. merge bids\\n\\t\\tSuave.BidId[] memory bids = new Suave.BidId[](2);\\n\\t\\tbids[0] = shareBidId;\\n\\t\\tbids[1] = bid.id;\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:mergedBids\\\", abi.encode(bids));\\n\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(bid));\\n\\t}\\n\\n\\tfunction emitMatchBidAndHint(Suave.Bid calldata bid, bytes memory bidHint, bytes memory matchHint) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit MatchEvent(bid.id, bidHint, matchHint);\\n\\t}\\n}\\n\\n/* Not tested or implemented on the precompile side */\\nstruct EgpBidPair {\\n\\tuint64 egp; // in wei, beware overflow\\n\\tSuave.BidId bidId;\\n}\\n\\ncontract EthBlockBidContract is AnyBidContract {\\n\\n\\tevent BuilderBoostBidEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tbytes builderBid\\n\\t);\\n\\t\\n\\tfunction idsEqual(Suave.BidId _l, Suave.BidId _r) public pure returns (bool) {\\n\\t\\tbytes memory l = abi.encodePacked(_l);\\n\\t\\tbytes memory r = abi.encodePacked(_r);\\n\\t\\tfor (uint i = 0; i < l.length; i++) {\\n\\t\\t\\tif (bytes(l)[i] != r[i]) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction buildMevShare(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tSuave.Bid[] memory allShareMatchBids = Suave.fetchBids(blockHeight, \\\"mevshare:v0:matchBids\\\");\\n\\t\\tSuave.Bid[] memory allShareUserBids = Suave.fetchBids(blockHeight, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\n\\t\\tif (allShareUserBids.length == 0) {\\n\\t\\t\\trevert Suave.PeekerReverted(address(this), \\\"no bids\\\");\\n\\t\\t}\\n\\n\\t\\tSuave.Bid[] memory allBids = new Suave.Bid[](allShareUserBids.length);\\n\\t\\tfor (uint i = 0; i < allShareUserBids.length; i++) {\\n\\t\\t\\t// TODO: sort matches by egp first!\\n\\t\\t\\tSuave.Bid memory bidToInsert = allShareUserBids[i]; // will be updated with the best match if any\\n\\t\\t\\tfor (uint j = 0; j < allShareMatchBids.length; j++) {\\n\\t\\t\\t\\t// TODO: should be done once at the start and sorted\\n\\t\\t\\t\\tSuave.BidId[] memory mergedBidIds = abi.decode(Suave.confidentialStoreRetrieve(allShareMatchBids[j].id, \\\"mevshare:v0:mergedBids\\\"), (Suave.BidId[]));\\n\\t\\t\\t\\tif (idsEqual(mergedBidIds[0], allShareUserBids[i].id)) {\\n\\t\\t\\t\\t\\tbidToInsert = allShareMatchBids[j];\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tallBids[i] = bidToInsert;\\n\\t\\t}\\n\\n\\t\\tEgpBidPair[] memory bidsByEGP = new EgpBidPair[](allBids.length);\\n\\t\\tfor (uint i = 0; i < allBids.length; i++) {\\n\\t\\t\\tbytes memory simResults = Suave.confidentialStoreRetrieve(allBids[i].id, \\\"mevshare:v0:ethBundleSimResults\\\");\\n\\t\\t\\tuint64 egp = abi.decode(simResults, (uint64));\\n\\t\\t\\tbidsByEGP[i] = EgpBidPair(egp, allBids[i].id);\\n\\t\\t}\\n\\n\\t\\t// Bubble sort, cause why not\\n\\t\\tuint n = bidsByEGP.length;\\n\\t\\tfor (uint i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint j = i + 1; j < n; j++) {\\n\\t\\t\\t\\tif (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n\\t\\t\\t\\t\\tEgpBidPair memory temp = bidsByEGP[i];\\n\\t\\t\\t\\t\\tbidsByEGP[i] = bidsByEGP[j];\\n\\t\\t\\t\\t\\tbidsByEGP[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tSuave.BidId[] memory allBidIds = new Suave.BidId[](allBids.length);\\n\\t\\tfor (uint i = 0; i < bidsByEGP.length; i++) {\\n\\t\\t\\tallBidIds[i] = bidsByEGP[i].bidId;\\n\\t\\t}\\n\\n\\t\\treturn buildAndEmit(blockArgs, blockHeight, allBidIds, \\\"mevshare:v0\\\");\\n\\t}\\n\\n\\tfunction buildFromPool(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tSuave.Bid[] memory allBids = Suave.fetchBids(blockHeight, \\\"default:v0:ethBundles\\\");\\n\\t\\tif (allBids.length == 0) {\\n\\t\\t\\trevert Suave.PeekerReverted(address(this), \\\"no bids\\\");\\n\\t\\t}\\n\\n\\t\\tEgpBidPair[] memory bidsByEGP = new EgpBidPair[](allBids.length);\\n\\t\\tfor (uint i = 0; i < allBids.length; i++) {\\n\\t\\t\\tbytes memory simResults = Suave.confidentialStoreRetrieve(allBids[i].id, \\\"default:v0:ethBundleSimResults\\\");\\n\\t\\t\\tuint64 egp = abi.decode(simResults, (uint64));\\n\\t\\t\\tbidsByEGP[i] = EgpBidPair(egp, allBids[i].id);\\n\\t\\t}\\n\\n\\t\\t// Bubble sort, cause why not\\n\\t\\tuint n = bidsByEGP.length;\\n\\t\\tfor (uint i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint j = i + 1; j < n; j++) {\\n\\t\\t\\t\\tif (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n\\t\\t\\t\\t\\tEgpBidPair memory temp = bidsByEGP[i];\\n\\t\\t\\t\\t\\tbidsByEGP[i] = bidsByEGP[j];\\n\\t\\t\\t\\t\\tbidsByEGP[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tSuave.BidId[] memory allBidIds = new Suave.BidId[](allBids.length);\\n\\t\\tfor (uint i = 0; i < bidsByEGP.length; i++) {\\n\\t\\t\\tallBidIds[i] = bidsByEGP[i].bidId;\\n\\t\\t}\\n\\n\\t\\treturn buildAndEmit(blockArgs, blockHeight, allBidIds, \\\"\\\");\\n\\t}\\n\\n\\tfunction buildAndEmit(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public virtual returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t(Suave.Bid memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\n\\t\\temit BuilderBoostBidEvent(blockBid.id, builderBid);\\n\\t\\temit BidEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBuilderBidAndBid.selector, abi.encode(blockBid, builderBid));\\n\\t}\\n\\n\\tfunction doBuild(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public view returns (Suave.Bid memory, bytes memory) {\\n\\t\\taddress[] memory allowedPeekers = new address[](2);\\n\\t\\tallowedPeekers[0] = address(this);\\n\\t\\tallowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\n\\t\\tSuave.Bid memory blockBid = Suave.newBid(blockHeight, allowedPeekers, \\\"default:v0:mergedBids\\\");\\n\\t\\tSuave.confidentialStoreStore(blockBid.id, \\\"default:v0:mergedBids\\\", abi.encode(bids));\\n\\t\\t \\n\\t\\t(bytes memory builderBid, bytes memory payload) = Suave.buildEthBlock(blockArgs, blockBid.id, namespace);\\n\\t\\tSuave.confidentialStoreStore(blockBid.id, \\\"default:v0:builderPayload\\\", payload); // only through this.unlock\\n\\n\\t\\treturn (blockBid, builderBid);\\n\\t}\\n\\n\\tfunction emitBuilderBidAndBid(Suave.Bid memory bid, bytes memory builderBid) public returns (Suave.Bid memory, bytes memory) {\\n\\t\\temit BuilderBoostBidEvent(bid.id, builderBid);\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\treturn (bid, builderBid);\\n\\t}\\n\\n\\tfunction unlock(Suave.BidId bidId, bytes memory signedBlindedHeader) public view returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t// TODO: verify the header is correct\\n\\t\\t// TODO: incorporate protocol name\\n\\t\\tbytes memory payload = Suave.confidentialStoreRetrieve(bidId, \\\"default:v0:builderPayload\\\");\\n\\t\\treturn payload;\\n\\t}\\n}\\n\\ncontract EthBlockBidSenderContract is EthBlockBidContract {\\n\\tstring boostRelayUrl;\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tboostRelayUrl = boostRelayUrl_;\\n\\t}\\n\\n\\tfunction buildAndEmit(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public virtual override returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t(Suave.Bid memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\t\\tSuave.submitEthBlockBidToRelay(boostRelayUrl, builderBid);\\n\\n\\t\\temit BidEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(blockBid));\\n\\t}\\n}\\n\",\"keccak256\":\"0x4ba758036b26ab97a3737ce869cfa3dc009f91b52d123316d819d141d91d0529\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612110806100206000396000f3fe6080604052600436106100555760003560e01c8063274e3b041461005a5780632db3a8281461008a578063520bd4a6146100b357806392f07a58146100dc578063a96f217c14610107578063e2a1d06914610130575b600080fd5b610074600480360381019061006f919061111e565b610160565b6040516100819190611202565b60405180910390f35b34801561009657600080fd5b506100b160048036038101906100ac91906112fd565b6103db565b005b3480156100bf57600080fd5b506100da60048036038101906100d591906113a4565b6104a6565b005b3480156100e857600080fd5b506100f161051d565b6040516100fe9190611202565b60405180910390f35b34801561011357600080fd5b5061012e600480360381019061012991906113ed565b610556565b005b61014a600480360381019061014591906114bd565b61061e565b6040516101579190611202565b60405180910390f35b606061016a61095d565b61017357600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101bd57600080fd5b505af11580156101d1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101fa919061159c565b9050600061020782610a25565b9050600061021483610b1c565b9050600061025887876040518060400160405280601c81526020017f6d657673686172653a76303a756e6d61746368656442756e646c657300000000815250610c11565b905061029e81600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610d14565b61030181600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c747300815250856040516020016102ed91906115f4565b604051602081830303815290604052610d14565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e816000015182602001518360400151604051610340939291906116ee565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395081600001518360405161037d92919061172c565b60405180910390a163a96f217c60e01b81836040516020016103a09291906118a8565b6040516020818303038152906040526040516020016103c0929190611968565b60405160208183030381529060405294505050505092915050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e83600001356fffffffffffffffffffffffffffffffff19168460200160208101906104279190611990565b85806040019061043791906119cc565b6040516104479493929190611aba565b60405180910390a17f417b0c16c40ca502ef10ae6921892668f006f527e3f4599cb95b9de965d4133483600001356fffffffffffffffffffffffffffffffff1916838360405161049993929190611afa565b60405180910390a1505050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001356fffffffffffffffffffffffffffffffff19168260200160208101906104f29190611990565b83806040019061050291906119cc565b6040516105129493929190611aba565b60405180910390a150565b606061052761095d565b61053057600080fd5b600061053a610df7565b905080806020019051810190610550919061159c565b91505090565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e82600001356fffffffffffffffffffffffffffffffff19168360200160208101906105a29190611990565b8480604001906105b291906119cc565b6040516105c29493929190611aba565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395082600001356fffffffffffffffffffffffffffffffff19168260405161061292919061172c565b60405180910390a15050565b606061062861095d565b61063157600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561067b57600080fd5b505af115801561068f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106b8919061159c565b905060006106c582610a25565b905060006106d283610b1c565b9050600061071688886040518060400160405280601581526020017f6d657673686172653a76303a6d61746368426964730000000000000000000000815250610c11565b905061075c81600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610d14565b6107c081600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c74730081525060006040516020016107ac9190611b91565b604051602081830303815290604052610d14565b6000600267ffffffffffffffff8111156107dd576107dc610f7d565b5b60405190808252806020026020018201604052801561080b5781602001602082028036833780820191505090505b509050868160008151811061082357610822611bac565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250508160000151816001815181106108705761086f611bac565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505061090782600001516040518060400160405280601681526020017f6d657673686172653a76303a6d65726765644269647300000000000000000000815250836040516020016108f39190611c8a565b604051602081830303815290604052610d14565b63520bd4a660e01b826040516020016109209190611cac565b604051602081830303815290604052604051602001610940929190611968565b604051602081830303815290604052955050505050509392505050565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff1660405161098990611cf4565b600060405180830381855afa9150503d80600081146109c4576040519150601f19603f3d011682016040523d82523d6000602084013e6109c9565b606091505b509150915081610a16576342010000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610a0d929190611d18565b60405180910390fd5b80516020820151935050505090565b6000806000634210000073ffffffffffffffffffffffffffffffffffffffff1684604051602001610a569190611202565b604051602081830303815290604052604051610a729190611d48565b600060405180830381855afa9150503d8060008114610aad576040519150601f19603f3d011682016040523d82523d6000602084013e610ab2565b606091505b509150915081610aff576342100000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610af6929190611d18565b60405180910390fd5b80806020019051810190610b139190611d74565b92505050919050565b6060610b2661095d565b610b2f57600080fd5b600080634210003773ffffffffffffffffffffffffffffffffffffffff1684604051602001610b5e9190611202565b604051602081830303815290604052604051610b7a9190611d48565b600060405180830381855afa9150503d8060008114610bb5576040519150601f19603f3d011682016040523d82523d6000602084013e610bba565b606091505b509150915081610c07576342100037816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610bfe929190611d18565b60405180910390fd5b8092505050919050565b610c19610ece565b600080634203000073ffffffffffffffffffffffffffffffffffffffff16868686604051602001610c4c93929190611deb565b604051602081830303815290604052604051610c689190611d48565b600060405180830381855afa9150503d8060008114610ca3576040519150601f19603f3d011682016040523d82523d6000602084013e610ca8565b606091505b509150915081610cf5576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610cec929190611d18565b60405180910390fd5b80806020019051810190610d09919061204c565b925050509392505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001610d4793929190612095565b604051602081830303815290604052604051610d639190611d48565b600060405180830381855afa9150503d8060008114610d9e576040519150601f19603f3d011682016040523d82523d6000602084013e610da3565b606091505b509150915081610df0576342020000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610de7929190611d18565b60405180910390fd5b5050505050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff16604051602001604051602081830303815290604052604051610e399190611d48565b600060405180830381855afa9150503d8060008114610e74576040519150601f19603f3d011682016040523d82523d6000602084013e610e79565b606091505b509150915081610ec6576342010001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610ebd929190611d18565b60405180910390fd5b809250505090565b604051806080016040528060006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff16815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b610f4481610f27565b8114610f4f57600080fd5b50565b600081359050610f6181610f3b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610fb582610f6c565b810181811067ffffffffffffffff82111715610fd457610fd3610f7d565b5b80604052505050565b6000610fe7610f13565b9050610ff38282610fac565b919050565b600067ffffffffffffffff82111561101357611012610f7d565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061105482611029565b9050919050565b61106481611049565b811461106f57600080fd5b50565b6000813590506110818161105b565b92915050565b600061109a61109584610ff8565b610fdd565b905080838252602082019050602084028301858111156110bd576110bc611024565b5b835b818110156110e657806110d28882611072565b8452602084019350506020810190506110bf565b5050509392505050565b600082601f83011261110557611104610f67565b5b8135611115848260208601611087565b91505092915050565b6000806040838503121561113557611134610f1d565b5b600061114385828601610f52565b925050602083013567ffffffffffffffff81111561116457611163610f22565b5b611170858286016110f0565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111b4578082015181840152602081019050611199565b838111156111c3576000848401525b50505050565b60006111d48261117a565b6111de8185611185565b93506111ee818560208601611196565b6111f781610f6c565b840191505092915050565b6000602082019050818103600083015261121c81846111c9565b905092915050565b600080fd5b60006080828403121561123f5761123e611224565b5b81905092915050565b600080fd5b600067ffffffffffffffff82111561126857611267610f7d565b5b61127182610f6c565b9050602081019050919050565b82818337600083830152505050565b60006112a061129b8461124d565b610fdd565b9050828152602081018484840111156112bc576112bb611248565b5b6112c784828561127e565b509392505050565b600082601f8301126112e4576112e3610f67565b5b81356112f484826020860161128d565b91505092915050565b60008060006060848603121561131657611315610f1d565b5b600084013567ffffffffffffffff81111561133457611333610f22565b5b61134086828701611229565b935050602084013567ffffffffffffffff81111561136157611360610f22565b5b61136d868287016112cf565b925050604084013567ffffffffffffffff81111561138e5761138d610f22565b5b61139a868287016112cf565b9150509250925092565b6000602082840312156113ba576113b9610f1d565b5b600082013567ffffffffffffffff8111156113d8576113d7610f22565b5b6113e484828501611229565b91505092915050565b6000806040838503121561140457611403610f1d565b5b600083013567ffffffffffffffff81111561142257611421610f22565b5b61142e85828601611229565b925050602083013567ffffffffffffffff81111561144f5761144e610f22565b5b61145b858286016112cf565b9150509250929050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b61149a81611465565b81146114a557600080fd5b50565b6000813590506114b781611491565b92915050565b6000806000606084860312156114d6576114d5610f1d565b5b60006114e486828701610f52565b935050602084013567ffffffffffffffff81111561150557611504610f22565b5b611511868287016110f0565b9250506040611522868287016114a8565b9150509250925092565b600061153f61153a8461124d565b610fdd565b90508281526020810184848401111561155b5761155a611248565b5b611566848285611196565b509392505050565b600082601f83011261158357611582610f67565b5b815161159384826020860161152c565b91505092915050565b6000602082840312156115b2576115b1610f1d565b5b600082015167ffffffffffffffff8111156115d0576115cf610f22565b5b6115dc8482850161156e565b91505092915050565b6115ee81610f27565b82525050565b600060208201905061160960008301846115e5565b92915050565b600061161a82611465565b9050919050565b61162a8161160f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61166581611049565b82525050565b6000611677838361165c565b60208301905092915050565b6000602082019050919050565b600061169b82611630565b6116a5818561163b565b93506116b08361164c565b8060005b838110156116e15781516116c8888261166b565b97506116d383611683565b9250506001810190506116b4565b5085935050505092915050565b60006060820190506117036000830186611621565b61171060208301856115e5565b81810360408301526117228184611690565b9050949350505050565b60006040820190506117416000830185611621565b818103602083015261175381846111c9565b90509392505050565b6117658161160f565b82525050565b61177481610f27565b82525050565b600082825260208201905092915050565b600061179682611630565b6117a0818561177a565b93506117ab8361164c565b8060005b838110156117dc5781516117c3888261166b565b97506117ce83611683565b9250506001810190506117af565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000611810826117e9565b61181a81856117f4565b935061182a818560208601611196565b61183381610f6c565b840191505092915050565b6000608083016000830151611856600086018261175c565b506020830151611869602086018261176b565b5060408301518482036040860152611881828261178b565b9150506060830151848203606086015261189b8282611805565b9150508091505092915050565b600060408201905081810360008301526118c2818561183e565b905081810360208301526118d681846111c9565b90509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b611926611921826118df565b61190b565b82525050565b600081905092915050565b60006119428261117a565b61194c818561192c565b935061195c818560208601611196565b80840191505092915050565b60006119748285611915565b6004820191506119848284611937565b91508190509392505050565b6000602082840312156119a6576119a5610f1d565b5b60006119b484828501610f52565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126119e9576119e86119bd565b5b80840192508235915067ffffffffffffffff821115611a0b57611a0a6119c2565b5b602083019250602082023603831315611a2757611a266119c7565b5b509250929050565b6000819050919050565b6000611a486020840184611072565b905092915050565b6000602082019050919050565b6000611a69838561163b565b9350611a7482611a2f565b8060005b85811015611aad57611a8a8284611a39565b611a94888261166b565b9750611a9f83611a50565b925050600181019050611a78565b5085925050509392505050565b6000606082019050611acf6000830187611621565b611adc60208301866115e5565b8181036040830152611aef818486611a5d565b905095945050505050565b6000606082019050611b0f6000830186611621565b8181036020830152611b2181856111c9565b90508181036040830152611b3581846111c9565b9050949350505050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611b7b611b76611b7184611b3f565b611b56565b611b49565b9050919050565b611b8b81611b60565b82525050565b6000602082019050611ba66000830184611b82565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611c13838361175c565b60208301905092915050565b6000602082019050919050565b6000611c3782611bdb565b611c418185611be6565b9350611c4c83611bf7565b8060005b83811015611c7d578151611c648882611c07565b9750611c6f83611c1f565b925050600181019050611c50565b5085935050505092915050565b60006020820190508181036000830152611ca48184611c2c565b905092915050565b60006020820190508181036000830152611cc6818461183e565b905092915050565b50565b6000611cde60008361192c565b9150611ce982611cce565b600082019050919050565b6000611cff82611cd1565b9150819050919050565b611d1281611049565b82525050565b6000604082019050611d2d6000830185611d09565b8181036020830152611d3f81846111c9565b90509392505050565b6000611d548284611937565b915081905092915050565b600081519050611d6e81610f3b565b92915050565b600060208284031215611d8a57611d89610f1d565b5b6000611d9884828501611d5f565b91505092915050565b600082825260208201905092915050565b6000611dbd826117e9565b611dc78185611da1565b9350611dd7818560208601611196565b611de081610f6c565b840191505092915050565b6000606082019050611e0060008301866115e5565b8181036020830152611e128185611690565b90508181036040830152611e268184611db2565b9050949350505050565b600080fd5b600080fd5b600081519050611e4981611491565b92915050565b600081519050611e5e8161105b565b92915050565b6000611e77611e7284610ff8565b610fdd565b90508083825260208201905060208402830185811115611e9a57611e99611024565b5b835b81811015611ec35780611eaf8882611e4f565b845260208401935050602081019050611e9c565b5050509392505050565b600082601f830112611ee257611ee1610f67565b5b8151611ef2848260208601611e64565b91505092915050565b600067ffffffffffffffff821115611f1657611f15610f7d565b5b611f1f82610f6c565b9050602081019050919050565b6000611f3f611f3a84611efb565b610fdd565b905082815260208101848484011115611f5b57611f5a611248565b5b611f66848285611196565b509392505050565b600082601f830112611f8357611f82610f67565b5b8151611f93848260208601611f2c565b91505092915050565b600060808284031215611fb257611fb1611e30565b5b611fbc6080610fdd565b90506000611fcc84828501611e3a565b6000830152506020611fe084828501611d5f565b602083015250604082015167ffffffffffffffff81111561200457612003611e35565b5b61201084828501611ecd565b604083015250606082015167ffffffffffffffff81111561203457612033611e35565b5b61204084828501611f6e565b60608301525092915050565b60006020828403121561206257612061610f1d565b5b600082015167ffffffffffffffff8111156120805761207f610f22565b5b61208c84828501611f9c565b91505092915050565b60006060820190506120aa6000830186611621565b81810360208301526120bc8185611db2565b905081810360408301526120d081846111c9565b905094935050505056fea2646970667358221220f1e93239b50d8c77f95a9494cca9a90f25aecb78a2cd3a1abeb809b02224880e64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c8063274e3b041461005a5780632db3a8281461008a578063520bd4a6146100b357806392f07a58146100dc578063a96f217c14610107578063e2a1d06914610130575b600080fd5b610074600480360381019061006f919061111e565b610160565b6040516100819190611202565b60405180910390f35b34801561009657600080fd5b506100b160048036038101906100ac91906112fd565b6103db565b005b3480156100bf57600080fd5b506100da60048036038101906100d591906113a4565b6104a6565b005b3480156100e857600080fd5b506100f161051d565b6040516100fe9190611202565b60405180910390f35b34801561011357600080fd5b5061012e600480360381019061012991906113ed565b610556565b005b61014a600480360381019061014591906114bd565b61061e565b6040516101579190611202565b60405180910390f35b606061016a61095d565b61017357600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101bd57600080fd5b505af11580156101d1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101fa919061159c565b9050600061020782610a25565b9050600061021483610b1c565b9050600061025887876040518060400160405280601c81526020017f6d657673686172653a76303a756e6d61746368656442756e646c657300000000815250610c11565b905061029e81600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610d14565b61030181600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c747300815250856040516020016102ed91906115f4565b604051602081830303815290604052610d14565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e816000015182602001518360400151604051610340939291906116ee565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395081600001518360405161037d92919061172c565b60405180910390a163a96f217c60e01b81836040516020016103a09291906118a8565b6040516020818303038152906040526040516020016103c0929190611968565b60405160208183030381529060405294505050505092915050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e83600001356fffffffffffffffffffffffffffffffff19168460200160208101906104279190611990565b85806040019061043791906119cc565b6040516104479493929190611aba565b60405180910390a17f417b0c16c40ca502ef10ae6921892668f006f527e3f4599cb95b9de965d4133483600001356fffffffffffffffffffffffffffffffff1916838360405161049993929190611afa565b60405180910390a1505050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001356fffffffffffffffffffffffffffffffff19168260200160208101906104f29190611990565b83806040019061050291906119cc565b6040516105129493929190611aba565b60405180910390a150565b606061052761095d565b61053057600080fd5b600061053a610df7565b905080806020019051810190610550919061159c565b91505090565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e82600001356fffffffffffffffffffffffffffffffff19168360200160208101906105a29190611990565b8480604001906105b291906119cc565b6040516105c29493929190611aba565b60405180910390a17fdab8306bad2ca820d05b9eff8da2e3016d372c15f00bb032f758718b9cda395082600001356fffffffffffffffffffffffffffffffff19168260405161061292919061172c565b60405180910390a15050565b606061062861095d565b61063157600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561067b57600080fd5b505af115801561068f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106b8919061159c565b905060006106c582610a25565b905060006106d283610b1c565b9050600061071688886040518060400160405280601581526020017f6d657673686172653a76303a6d61746368426964730000000000000000000000815250610c11565b905061075c81600001516040518060400160405280601681526020017f6d657673686172653a76303a65746842756e646c65730000000000000000000081525086610d14565b6107c081600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c74730081525060006040516020016107ac9190611b91565b604051602081830303815290604052610d14565b6000600267ffffffffffffffff8111156107dd576107dc610f7d565b5b60405190808252806020026020018201604052801561080b5781602001602082028036833780820191505090505b509050868160008151811061082357610822611bac565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250508160000151816001815181106108705761086f611bac565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505061090782600001516040518060400160405280601681526020017f6d657673686172653a76303a6d65726765644269647300000000000000000000815250836040516020016108f39190611c8a565b604051602081830303815290604052610d14565b63520bd4a660e01b826040516020016109209190611cac565b604051602081830303815290604052604051602001610940929190611968565b604051602081830303815290604052955050505050509392505050565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff1660405161098990611cf4565b600060405180830381855afa9150503d80600081146109c4576040519150601f19603f3d011682016040523d82523d6000602084013e6109c9565b606091505b509150915081610a16576342010000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610a0d929190611d18565b60405180910390fd5b80516020820151935050505090565b6000806000634210000073ffffffffffffffffffffffffffffffffffffffff1684604051602001610a569190611202565b604051602081830303815290604052604051610a729190611d48565b600060405180830381855afa9150503d8060008114610aad576040519150601f19603f3d011682016040523d82523d6000602084013e610ab2565b606091505b509150915081610aff576342100000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610af6929190611d18565b60405180910390fd5b80806020019051810190610b139190611d74565b92505050919050565b6060610b2661095d565b610b2f57600080fd5b600080634210003773ffffffffffffffffffffffffffffffffffffffff1684604051602001610b5e9190611202565b604051602081830303815290604052604051610b7a9190611d48565b600060405180830381855afa9150503d8060008114610bb5576040519150601f19603f3d011682016040523d82523d6000602084013e610bba565b606091505b509150915081610c07576342100037816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610bfe929190611d18565b60405180910390fd5b8092505050919050565b610c19610ece565b600080634203000073ffffffffffffffffffffffffffffffffffffffff16868686604051602001610c4c93929190611deb565b604051602081830303815290604052604051610c689190611d48565b600060405180830381855afa9150503d8060008114610ca3576040519150601f19603f3d011682016040523d82523d6000602084013e610ca8565b606091505b509150915081610cf5576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610cec929190611d18565b60405180910390fd5b80806020019051810190610d09919061204c565b925050509392505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001610d4793929190612095565b604051602081830303815290604052604051610d639190611d48565b600060405180830381855afa9150503d8060008114610d9e576040519150601f19603f3d011682016040523d82523d6000602084013e610da3565b606091505b509150915081610df0576342020000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610de7929190611d18565b60405180910390fd5b5050505050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff16604051602001604051602081830303815290604052604051610e399190611d48565b600060405180830381855afa9150503d8060008114610e74576040519150601f19603f3d011682016040523d82523d6000602084013e610e79565b606091505b509150915081610ec6576342010001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610ebd929190611d18565b60405180910390fd5b809250505090565b604051806080016040528060006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff16815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b610f4481610f27565b8114610f4f57600080fd5b50565b600081359050610f6181610f3b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610fb582610f6c565b810181811067ffffffffffffffff82111715610fd457610fd3610f7d565b5b80604052505050565b6000610fe7610f13565b9050610ff38282610fac565b919050565b600067ffffffffffffffff82111561101357611012610f7d565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061105482611029565b9050919050565b61106481611049565b811461106f57600080fd5b50565b6000813590506110818161105b565b92915050565b600061109a61109584610ff8565b610fdd565b905080838252602082019050602084028301858111156110bd576110bc611024565b5b835b818110156110e657806110d28882611072565b8452602084019350506020810190506110bf565b5050509392505050565b600082601f83011261110557611104610f67565b5b8135611115848260208601611087565b91505092915050565b6000806040838503121561113557611134610f1d565b5b600061114385828601610f52565b925050602083013567ffffffffffffffff81111561116457611163610f22565b5b611170858286016110f0565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111b4578082015181840152602081019050611199565b838111156111c3576000848401525b50505050565b60006111d48261117a565b6111de8185611185565b93506111ee818560208601611196565b6111f781610f6c565b840191505092915050565b6000602082019050818103600083015261121c81846111c9565b905092915050565b600080fd5b60006080828403121561123f5761123e611224565b5b81905092915050565b600080fd5b600067ffffffffffffffff82111561126857611267610f7d565b5b61127182610f6c565b9050602081019050919050565b82818337600083830152505050565b60006112a061129b8461124d565b610fdd565b9050828152602081018484840111156112bc576112bb611248565b5b6112c784828561127e565b509392505050565b600082601f8301126112e4576112e3610f67565b5b81356112f484826020860161128d565b91505092915050565b60008060006060848603121561131657611315610f1d565b5b600084013567ffffffffffffffff81111561133457611333610f22565b5b61134086828701611229565b935050602084013567ffffffffffffffff81111561136157611360610f22565b5b61136d868287016112cf565b925050604084013567ffffffffffffffff81111561138e5761138d610f22565b5b61139a868287016112cf565b9150509250925092565b6000602082840312156113ba576113b9610f1d565b5b600082013567ffffffffffffffff8111156113d8576113d7610f22565b5b6113e484828501611229565b91505092915050565b6000806040838503121561140457611403610f1d565b5b600083013567ffffffffffffffff81111561142257611421610f22565b5b61142e85828601611229565b925050602083013567ffffffffffffffff81111561144f5761144e610f22565b5b61145b858286016112cf565b9150509250929050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b61149a81611465565b81146114a557600080fd5b50565b6000813590506114b781611491565b92915050565b6000806000606084860312156114d6576114d5610f1d565b5b60006114e486828701610f52565b935050602084013567ffffffffffffffff81111561150557611504610f22565b5b611511868287016110f0565b9250506040611522868287016114a8565b9150509250925092565b600061153f61153a8461124d565b610fdd565b90508281526020810184848401111561155b5761155a611248565b5b611566848285611196565b509392505050565b600082601f83011261158357611582610f67565b5b815161159384826020860161152c565b91505092915050565b6000602082840312156115b2576115b1610f1d565b5b600082015167ffffffffffffffff8111156115d0576115cf610f22565b5b6115dc8482850161156e565b91505092915050565b6115ee81610f27565b82525050565b600060208201905061160960008301846115e5565b92915050565b600061161a82611465565b9050919050565b61162a8161160f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61166581611049565b82525050565b6000611677838361165c565b60208301905092915050565b6000602082019050919050565b600061169b82611630565b6116a5818561163b565b93506116b08361164c565b8060005b838110156116e15781516116c8888261166b565b97506116d383611683565b9250506001810190506116b4565b5085935050505092915050565b60006060820190506117036000830186611621565b61171060208301856115e5565b81810360408301526117228184611690565b9050949350505050565b60006040820190506117416000830185611621565b818103602083015261175381846111c9565b90509392505050565b6117658161160f565b82525050565b61177481610f27565b82525050565b600082825260208201905092915050565b600061179682611630565b6117a0818561177a565b93506117ab8361164c565b8060005b838110156117dc5781516117c3888261166b565b97506117ce83611683565b9250506001810190506117af565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000611810826117e9565b61181a81856117f4565b935061182a818560208601611196565b61183381610f6c565b840191505092915050565b6000608083016000830151611856600086018261175c565b506020830151611869602086018261176b565b5060408301518482036040860152611881828261178b565b9150506060830151848203606086015261189b8282611805565b9150508091505092915050565b600060408201905081810360008301526118c2818561183e565b905081810360208301526118d681846111c9565b90509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b611926611921826118df565b61190b565b82525050565b600081905092915050565b60006119428261117a565b61194c818561192c565b935061195c818560208601611196565b80840191505092915050565b60006119748285611915565b6004820191506119848284611937565b91508190509392505050565b6000602082840312156119a6576119a5610f1d565b5b60006119b484828501610f52565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126119e9576119e86119bd565b5b80840192508235915067ffffffffffffffff821115611a0b57611a0a6119c2565b5b602083019250602082023603831315611a2757611a266119c7565b5b509250929050565b6000819050919050565b6000611a486020840184611072565b905092915050565b6000602082019050919050565b6000611a69838561163b565b9350611a7482611a2f565b8060005b85811015611aad57611a8a8284611a39565b611a94888261166b565b9750611a9f83611a50565b925050600181019050611a78565b5085925050509392505050565b6000606082019050611acf6000830187611621565b611adc60208301866115e5565b8181036040830152611aef818486611a5d565b905095945050505050565b6000606082019050611b0f6000830186611621565b8181036020830152611b2181856111c9565b90508181036040830152611b3581846111c9565b9050949350505050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611b7b611b76611b7184611b3f565b611b56565b611b49565b9050919050565b611b8b81611b60565b82525050565b6000602082019050611ba66000830184611b82565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611c13838361175c565b60208301905092915050565b6000602082019050919050565b6000611c3782611bdb565b611c418185611be6565b9350611c4c83611bf7565b8060005b83811015611c7d578151611c648882611c07565b9750611c6f83611c1f565b925050600181019050611c50565b5085935050505092915050565b60006020820190508181036000830152611ca48184611c2c565b905092915050565b60006020820190508181036000830152611cc6818461183e565b905092915050565b50565b6000611cde60008361192c565b9150611ce982611cce565b600082019050919050565b6000611cff82611cd1565b9150819050919050565b611d1281611049565b82525050565b6000604082019050611d2d6000830185611d09565b8181036020830152611d3f81846111c9565b90509392505050565b6000611d548284611937565b915081905092915050565b600081519050611d6e81610f3b565b92915050565b600060208284031215611d8a57611d89610f1d565b5b6000611d9884828501611d5f565b91505092915050565b600082825260208201905092915050565b6000611dbd826117e9565b611dc78185611da1565b9350611dd7818560208601611196565b611de081610f6c565b840191505092915050565b6000606082019050611e0060008301866115e5565b8181036020830152611e128185611690565b90508181036040830152611e268184611db2565b9050949350505050565b600080fd5b600080fd5b600081519050611e4981611491565b92915050565b600081519050611e5e8161105b565b92915050565b6000611e77611e7284610ff8565b610fdd565b90508083825260208201905060208402830185811115611e9a57611e99611024565b5b835b81811015611ec35780611eaf8882611e4f565b845260208401935050602081019050611e9c565b5050509392505050565b600082601f830112611ee257611ee1610f67565b5b8151611ef2848260208601611e64565b91505092915050565b600067ffffffffffffffff821115611f1657611f15610f7d565b5b611f1f82610f6c565b9050602081019050919050565b6000611f3f611f3a84611efb565b610fdd565b905082815260208101848484011115611f5b57611f5a611248565b5b611f66848285611196565b509392505050565b600082601f830112611f8357611f82610f67565b5b8151611f93848260208601611f2c565b91505092915050565b600060808284031215611fb257611fb1611e30565b5b611fbc6080610fdd565b90506000611fcc84828501611e3a565b6000830152506020611fe084828501611d5f565b602083015250604082015167ffffffffffffffff81111561200457612003611e35565b5b61201084828501611ecd565b604083015250606082015167ffffffffffffffff81111561203457612033611e35565b5b61204084828501611f6e565b60608301525092915050565b60006020828403121561206257612061610f1d565b5b600082015167ffffffffffffffff8111156120805761207f610f22565b5b61208c84828501611f9c565b91505092915050565b60006060820190506120aa6000830186611621565b81810360208301526120bc8185611db2565b905081810360408301526120d081846111c9565b905094935050505056fea2646970667358221220f1e93239b50d8c77f95a9494cca9a90f25aecb78a2cd3a1abeb809b02224880e64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}