{
  "address": "0xbFcEA0fF17dE554793E47F4a1926839bc0048a4b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "boostRelayUrl_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "PeekerReverted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "bidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "allowedPeekers",
          "type": "address[]"
        }
      ],
      "name": "BidEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "bidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "builderBid",
          "type": "bytes"
        }
      ],
      "name": "BuilderBoostBidEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        },
        {
          "internalType": "Suave.BidId[]",
          "name": "bids",
          "type": "bytes16[]"
        },
        {
          "internalType": "string",
          "name": "namespace",
          "type": "string"
        }
      ],
      "name": "buildAndEmit",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        }
      ],
      "name": "buildFromPool",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        }
      ],
      "name": "buildMevShare",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        },
        {
          "internalType": "Suave.BidId[]",
          "name": "bids",
          "type": "bytes16[]"
        },
        {
          "internalType": "string",
          "name": "namespace",
          "type": "string"
        }
      ],
      "name": "doBuild",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.BidId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.BidId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "bid",
          "type": "tuple"
        }
      ],
      "name": "emitBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.BidId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "bid",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "builderBid",
          "type": "bytes"
        }
      ],
      "name": "emitBuilderBidAndBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.BidId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchBidConfidentialBundleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Suave.BidId",
          "name": "_l",
          "type": "bytes16"
        },
        {
          "internalType": "Suave.BidId",
          "name": "_r",
          "type": "bytes16"
        }
      ],
      "name": "idsEqual",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Suave.BidId",
          "name": "bidId",
          "type": "bytes16"
        },
        {
          "internalType": "bytes",
          "name": "signedBlindedHeader",
          "type": "bytes"
        }
      ],
      "name": "unlock",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3dcf21596b66680a355fac2e95ee748f63fe48f9623308b02a809027d4f896c1",
  "receipt": {
    "to": null,
    "from": "0x19E7E376E7C213B7E7e7e46cc70A5dD086DAff2A",
    "contractAddress": "0xbFcEA0fF17dE554793E47F4a1926839bc0048a4b",
    "transactionIndex": 0,
    "gasUsed": "3423841",
    "logsBloom": "0x
    "blockHash": "0x2c12bd0d9d7ebac028148c2b41b706d89c5f760186ca0eeadb171b10396174db",
    "transactionHash": "0x3dcf21596b66680a355fac2e95ee748f63fe48f9623308b02a809027d4f896c1",
    "logs": [],
    "blockNumber": 87022,
    "cumulativeGasUsed": "3423841",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://0xafa4c6985aa049fb79dd37010438cfebeb0f2bd42b115b89dd678dab0670c1de38da0c4e9138c9290a398ecd9a0b3110@boost-relay-goerli.flashbots.net"
  ],
  "numDeployments": 1,
  "solcInputHash": "b78dcd35143fe56c51b4b74d64c79db7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"boostRelayUrl_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"PeekerReverted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"bidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"}],\"name\":\"BidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"bidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"builderBid\",\"type\":\"bytes\"}],\"name\":\"BuilderBoostBidEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"Suave.BidId[]\",\"name\":\"bids\",\"type\":\"bytes16[]\"},{\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"}],\"name\":\"buildAndEmit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"buildFromPool\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"buildMevShare\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"Suave.BidId[]\",\"name\":\"bids\",\"type\":\"bytes16[]\"},{\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"}],\"name\":\"doBuild\",\"outputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.BidId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.BidId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"emitBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.BidId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"builderBid\",\"type\":\"bytes\"}],\"name\":\"emitBuilderBidAndBid\",\"outputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.BidId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchBidConfidentialBundleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Suave.BidId\",\"name\":\"_l\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.BidId\",\"name\":\"_r\",\"type\":\"bytes16\"}],\"name\":\"idsEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Suave.BidId\",\"name\":\"bidId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes\",\"name\":\"signedBlindedHeader\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standard_peekers/bids.sol\":\"EthBlockBidSenderContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Suave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.8;\\n\\nlibrary Suave {\\n    error PeekerReverted(address, bytes);\\n\\n    type BidId is bytes16;\\n\\n    struct Bid {\\n        BidId id;\\n        BidId salt;\\n        uint64 decryptionCondition;\\n        address[] allowedPeekers;\\n        address[] allowedStores;\\n        string version;\\n    }\\n\\n    struct BuildBlockArgs {\\n        uint64 slot;\\n        bytes proposerPubkey;\\n        bytes32 parent;\\n        uint64 timestamp;\\n        address feeRecipient;\\n        uint64 gasLimit;\\n        bytes32 random;\\n        Withdrawal[] withdrawals;\\n    }\\n\\n    struct Withdrawal {\\n        uint64 index;\\n        uint64 validator;\\n        address Address;\\n        uint64 amount;\\n    }\\n\\n    address public constant IS_CONFIDENTIAL_ADDR = 0x0000000000000000000000000000000042010000;\\n\\n    address public constant BUILD_ETH_BLOCK = 0x0000000000000000000000000000000042100001;\\n\\n    address public constant CONFIDENTIAL_INPUTS = 0x0000000000000000000000000000000042010001;\\n\\n    address public constant CONFIDENTIAL_STORE_RETRIEVE = 0x0000000000000000000000000000000042020001;\\n\\n    address public constant CONFIDENTIAL_STORE_STORE = 0x0000000000000000000000000000000042020000;\\n\\n    address public constant ETHCALL = 0x0000000000000000000000000000000042100003;\\n\\n    address public constant EXTRACT_HINT = 0x0000000000000000000000000000000042100037;\\n\\n    address public constant FETCH_BIDS = 0x0000000000000000000000000000000042030001;\\n\\n    address public constant NEW_BID = 0x0000000000000000000000000000000042030000;\\n\\n    address public constant SIMULATE_BUNDLE = 0x0000000000000000000000000000000042100000;\\n\\n    address public constant SUBMIT_ETH_BLOCK_BID_TO_RELAY = 0x0000000000000000000000000000000042100002;\\n\\n    // Returns whether execution is off- or on-chain\\n    function isConfidential() internal view returns (bool b) {\\n        (bool success, bytes memory isConfidentialBytes) = IS_CONFIDENTIAL_ADDR.staticcall(\\\"\\\");\\n        if (!success) {\\n            revert PeekerReverted(IS_CONFIDENTIAL_ADDR, isConfidentialBytes);\\n        }\\n        assembly {\\n            // Load the length of data (first 32 bytes)\\n            let len := mload(isConfidentialBytes)\\n            // Load the data after 32 bytes, so add 0x20\\n            b := mload(add(isConfidentialBytes, 0x20))\\n        }\\n    }\\n\\n    function buildEthBlock(BuildBlockArgs memory blockArgs, BidId bidId, string memory namespace)\\n        internal\\n        view\\n        returns (bytes memory, bytes memory)\\n    {\\n        (bool success, bytes memory data) = BUILD_ETH_BLOCK.staticcall(abi.encode(blockArgs, bidId, namespace));\\n        if (!success) {\\n            revert PeekerReverted(BUILD_ETH_BLOCK, data);\\n        }\\n\\n        return abi.decode(data, (bytes, bytes));\\n    }\\n\\n    function confidentialInputs() internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_INPUTS.staticcall(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_INPUTS, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStoreRetrieve(BidId bidId, string memory key) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE_RETRIEVE.staticcall(abi.encode(bidId, key));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE_RETRIEVE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStoreStore(BidId bidId, string memory key, bytes memory data1) internal view {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE_STORE.staticcall(abi.encode(bidId, key, data1));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE_STORE, data);\\n        }\\n    }\\n\\n    function ethcall(address contractAddr, bytes memory input1) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = ETHCALL.staticcall(abi.encode(contractAddr, input1));\\n        if (!success) {\\n            revert PeekerReverted(ETHCALL, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function extractHint(bytes memory bundleData) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = EXTRACT_HINT.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(EXTRACT_HINT, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function fetchBids(uint64 cond, string memory namespace) internal view returns (Bid[] memory) {\\n        (bool success, bytes memory data) = FETCH_BIDS.staticcall(abi.encode(cond, namespace));\\n        if (!success) {\\n            revert PeekerReverted(FETCH_BIDS, data);\\n        }\\n\\n        return abi.decode(data, (Bid[]));\\n    }\\n\\n    function newBid(\\n        uint64 decryptionCondition,\\n        address[] memory allowedPeekers,\\n        address[] memory allowedStores,\\n        string memory bidType\\n    ) internal view returns (Bid memory) {\\n        (bool success, bytes memory data) =\\n            NEW_BID.staticcall(abi.encode(decryptionCondition, allowedPeekers, allowedStores, bidType));\\n        if (!success) {\\n            revert PeekerReverted(NEW_BID, data);\\n        }\\n\\n        return abi.decode(data, (Bid));\\n    }\\n\\n    function simulateBundle(bytes memory bundleData) internal view returns (uint64) {\\n        (bool success, bytes memory data) = SIMULATE_BUNDLE.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_BUNDLE, data);\\n        }\\n\\n        return abi.decode(data, (uint64));\\n    }\\n\\n    function submitEthBlockBidToRelay(string memory relayUrl, bytes memory builderBid)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_ETH_BLOCK_BID_TO_RELAY.staticcall(abi.encode(relayUrl, builderBid));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_ETH_BLOCK_BID_TO_RELAY, data);\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0xab645f60638facb4daa685216d77501640c8d96e6c0b926f4402cae4f89adcc5\",\"license\":\"UNLICENSED\"},\"contracts/standard_peekers/bids.sol\":{\"content\":\"pragma solidity ^0.8.8;\\n\\nimport \\\"../libraries/Suave.sol\\\";\\n\\ncontract AnyBidContract {\\n\\n\\tevent BidEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tuint64 decryptionCondition,\\n\\t\\taddress[] allowedPeekers\\n\\t);\\n\\n\\tfunction fetchBidConfidentialBundleData() public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\t\\t\\n\\t\\tbytes memory confidentialInputs = Suave.confidentialInputs();\\n\\t\\treturn abi.decode(confidentialInputs, (bytes));\\n\\t}\\n\\n\\t// Bids to this contract should not be trusted!\\n\\tfunction emitBid(Suave.Bid calldata bid) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t}\\n}\\n\\ncontract BundleBidContract is AnyBidContract {\\n\\n\\tfunction newBid(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores) external payable returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tbytes memory bundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\tuint64 egp = Suave.simulateBundle(bundleData);\\n\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"default:v0:ethBundles\\\");\\n\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"default:v0:ethBundles\\\", bundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"default:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(bid));\\n\\t}\\n}\\n\\ncontract MevShareBidContract is AnyBidContract {\\n\\n\\tevent HintEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tbytes hint\\n\\t);\\n\\n\\tevent MatchEvent(\\n\\t\\tSuave.BidId matchBidId,\\n\\t\\tbytes bidhint,\\n\\t\\tbytes matchHint\\n\\t);\\n\\n\\tfunction newBid(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores) external payable returns (bytes memory) {\\n\\t\\t// 0. check confidential execution\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t// 1. fetch bundle data\\n\\t\\tbytes memory bundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\t// 2. sim bundle\\n\\t\\tuint64 egp = Suave.simulateBundle(bundleData);\\n\\t\\t\\n\\t\\t// 3. extract hint\\n\\t\\tbytes memory hint = Suave.extractHint(bundleData);\\n\\t\\t\\n\\t\\t// // 4. store bundle and sim results\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundles\\\", bundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit HintEvent(bid.id, hint);\\n\\n\\t\\t// // 5. return \\\"callback\\\" to emit hint onchain\\n\\t\\treturn bytes.concat(this.emitBidAndHint.selector, abi.encode(bid, hint));\\n\\t}\\n\\n\\tfunction emitBidAndHint(Suave.Bid calldata bid, bytes memory hint) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit HintEvent(bid.id, hint);\\n\\t}\\n\\n\\tfunction newMatch(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores, Suave.BidId shareBidId) external payable returns (bytes memory) {\\n\\t\\t// WARNING : this function will copy the original mev share bid\\n\\t\\t// into a new key with potentially different permsissions\\n\\t\\t\\n\\t\\trequire(Suave.isConfidential());\\n\\t\\t// 1. fetch confidential data\\n\\t\\tbytes memory matchBundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\t// 2. sim match alone for validity\\n\\t\\tuint64 egp = Suave.simulateBundle(matchBundleData);\\n\\n\\t\\t// 3. extract hint\\n\\t\\tbytes memory matchHint = Suave.extractHint(matchBundleData);\\n\\t\\t\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"mevshare:v0:matchBids\\\");\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundles\\\", matchBundleData);\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(0));\\n\\n\\t\\t//4. merge bids\\n\\t\\tSuave.BidId[] memory bids = new Suave.BidId[](2);\\n\\t\\tbids[0] = shareBidId;\\n\\t\\tbids[1] = bid.id;\\n\\t\\tSuave.confidentialStoreStore(bid.id, \\\"mevshare:v0:mergedBids\\\", abi.encode(bids));\\n\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(bid));\\n\\t}\\n\\n\\tfunction emitMatchBidAndHint(Suave.Bid calldata bid, bytes memory bidHint, bytes memory matchHint) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit MatchEvent(bid.id, bidHint, matchHint);\\n\\t}\\n}\\n\\n/* Not tested or implemented on the precompile side */\\nstruct EgpBidPair {\\n\\tuint64 egp; // in wei, beware overflow\\n\\tSuave.BidId bidId;\\n}\\n\\ncontract EthBlockBidContract is AnyBidContract {\\n\\n\\tevent BuilderBoostBidEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tbytes builderBid\\n\\t);\\n\\t\\n\\tfunction idsEqual(Suave.BidId _l, Suave.BidId _r) public pure returns (bool) {\\n\\t\\tbytes memory l = abi.encodePacked(_l);\\n\\t\\tbytes memory r = abi.encodePacked(_r);\\n\\t\\tfor (uint i = 0; i < l.length; i++) {\\n\\t\\t\\tif (bytes(l)[i] != r[i]) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction buildMevShare(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tSuave.Bid[] memory allShareMatchBids = Suave.fetchBids(blockHeight, \\\"mevshare:v0:matchBids\\\");\\n\\t\\tSuave.Bid[] memory allShareUserBids = Suave.fetchBids(blockHeight, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\n\\t\\tif (allShareUserBids.length == 0) {\\n\\t\\t\\trevert Suave.PeekerReverted(address(this), \\\"no bids\\\");\\n\\t\\t}\\n\\n\\t\\tSuave.Bid[] memory allBids = new Suave.Bid[](allShareUserBids.length);\\n\\t\\tfor (uint i = 0; i < allShareUserBids.length; i++) {\\n\\t\\t\\t// TODO: sort matches by egp first!\\n\\t\\t\\tSuave.Bid memory bidToInsert = allShareUserBids[i]; // will be updated with the best match if any\\n\\t\\t\\tfor (uint j = 0; j < allShareMatchBids.length; j++) {\\n\\t\\t\\t\\t// TODO: should be done once at the start and sorted\\n\\t\\t\\t\\tSuave.BidId[] memory mergedBidIds = abi.decode(Suave.confidentialStoreRetrieve(allShareMatchBids[j].id, \\\"mevshare:v0:mergedBids\\\"), (Suave.BidId[]));\\n\\t\\t\\t\\tif (idsEqual(mergedBidIds[0], allShareUserBids[i].id)) {\\n\\t\\t\\t\\t\\tbidToInsert = allShareMatchBids[j];\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tallBids[i] = bidToInsert;\\n\\t\\t}\\n\\n\\t\\tEgpBidPair[] memory bidsByEGP = new EgpBidPair[](allBids.length);\\n\\t\\tfor (uint i = 0; i < allBids.length; i++) {\\n\\t\\t\\tbytes memory simResults = Suave.confidentialStoreRetrieve(allBids[i].id, \\\"mevshare:v0:ethBundleSimResults\\\");\\n\\t\\t\\tuint64 egp = abi.decode(simResults, (uint64));\\n\\t\\t\\tbidsByEGP[i] = EgpBidPair(egp, allBids[i].id);\\n\\t\\t}\\n\\n\\t\\t// Bubble sort, cause why not\\n\\t\\tuint n = bidsByEGP.length;\\n\\t\\tfor (uint i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint j = i + 1; j < n; j++) {\\n\\t\\t\\t\\tif (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n\\t\\t\\t\\t\\tEgpBidPair memory temp = bidsByEGP[i];\\n\\t\\t\\t\\t\\tbidsByEGP[i] = bidsByEGP[j];\\n\\t\\t\\t\\t\\tbidsByEGP[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tSuave.BidId[] memory allBidIds = new Suave.BidId[](allBids.length);\\n\\t\\tfor (uint i = 0; i < bidsByEGP.length; i++) {\\n\\t\\t\\tallBidIds[i] = bidsByEGP[i].bidId;\\n\\t\\t}\\n\\n\\t\\treturn buildAndEmit(blockArgs, blockHeight, allBidIds, \\\"mevshare:v0\\\");\\n\\t}\\n\\n\\tfunction buildFromPool(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tSuave.Bid[] memory allBids = Suave.fetchBids(blockHeight, \\\"default:v0:ethBundles\\\");\\n\\t\\tif (allBids.length == 0) {\\n\\t\\t\\trevert Suave.PeekerReverted(address(this), \\\"no bids\\\");\\n\\t\\t}\\n\\n\\t\\tEgpBidPair[] memory bidsByEGP = new EgpBidPair[](allBids.length);\\n\\t\\tfor (uint i = 0; i < allBids.length; i++) {\\n\\t\\t\\tbytes memory simResults = Suave.confidentialStoreRetrieve(allBids[i].id, \\\"default:v0:ethBundleSimResults\\\");\\n\\t\\t\\tuint64 egp = abi.decode(simResults, (uint64));\\n\\t\\t\\tbidsByEGP[i] = EgpBidPair(egp, allBids[i].id);\\n\\t\\t}\\n\\n\\t\\t// Bubble sort, cause why not\\n\\t\\tuint n = bidsByEGP.length;\\n\\t\\tfor (uint i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint j = i + 1; j < n; j++) {\\n\\t\\t\\t\\tif (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n\\t\\t\\t\\t\\tEgpBidPair memory temp = bidsByEGP[i];\\n\\t\\t\\t\\t\\tbidsByEGP[i] = bidsByEGP[j];\\n\\t\\t\\t\\t\\tbidsByEGP[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tSuave.BidId[] memory allBidIds = new Suave.BidId[](allBids.length);\\n\\t\\tfor (uint i = 0; i < bidsByEGP.length; i++) {\\n\\t\\t\\tallBidIds[i] = bidsByEGP[i].bidId;\\n\\t\\t}\\n\\n\\t\\treturn buildAndEmit(blockArgs, blockHeight, allBidIds, \\\"\\\");\\n\\t}\\n\\n\\tfunction buildAndEmit(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public virtual returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t(Suave.Bid memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\n\\t\\temit BuilderBoostBidEvent(blockBid.id, builderBid);\\n\\t\\temit BidEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBuilderBidAndBid.selector, abi.encode(blockBid, builderBid));\\n\\t}\\n\\n\\tfunction doBuild(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public view returns (Suave.Bid memory, bytes memory) {\\n\\t\\taddress[] memory allowedPeekers = new address[](2);\\n\\t\\tallowedPeekers[0] = address(this);\\n\\t\\tallowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\n\\t\\tSuave.Bid memory blockBid = Suave.newBid(blockHeight, allowedPeekers, allowedPeekers, \\\"default:v0:mergedBids\\\");\\n\\t\\tSuave.confidentialStoreStore(blockBid.id, \\\"default:v0:mergedBids\\\", abi.encode(bids));\\n\\t\\t \\n\\t\\t(bytes memory builderBid, bytes memory payload) = Suave.buildEthBlock(blockArgs, blockBid.id, namespace);\\n\\t\\tSuave.confidentialStoreStore(blockBid.id, \\\"default:v0:builderPayload\\\", payload); // only through this.unlock\\n\\n\\t\\treturn (blockBid, builderBid);\\n\\t}\\n\\n\\tfunction emitBuilderBidAndBid(Suave.Bid memory bid, bytes memory builderBid) public returns (Suave.Bid memory, bytes memory) {\\n\\t\\temit BuilderBoostBidEvent(bid.id, builderBid);\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\treturn (bid, builderBid);\\n\\t}\\n\\n\\tfunction unlock(Suave.BidId bidId, bytes memory signedBlindedHeader) public view returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t// TODO: verify the header is correct\\n\\t\\t// TODO: incorporate protocol name\\n\\t\\tbytes memory payload = Suave.confidentialStoreRetrieve(bidId, \\\"default:v0:builderPayload\\\");\\n\\t\\treturn payload;\\n\\t}\\n}\\n\\ncontract EthBlockBidSenderContract is EthBlockBidContract {\\n\\tstring boostRelayUrl;\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tboostRelayUrl = boostRelayUrl_;\\n\\t}\\n\\n\\tfunction buildAndEmit(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public virtual override returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t(Suave.Bid memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\t\\tSuave.submitEthBlockBidToRelay(boostRelayUrl, builderBid);\\n\\n\\t\\temit BidEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(blockBid));\\n\\t}\\n}\\n\",\"keccak256\":\"0x05159dc267bd1cf101ff2ce1d797f431b1ebe072ed34bf1444ad963743886f87\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003dd138038062003dd18339818101604052810190620000379190620002a4565b80600090805190602001906200004f92919062000057565b50506200035a565b828054620000659062000324565b90600052602060002090601f016020900481019282620000895760008555620000d5565b82601f10620000a457805160ff1916838001178555620000d5565b82800160010185558215620000d5579182015b82811115620000d4578251825591602001919060010190620000b7565b5b509050620000e49190620000e8565b5090565b5b8082111562000103576000816000905550600101620000e9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001708262000125565b810181811067ffffffffffffffff8211171562000192576200019162000136565b5b80604052505050565b6000620001a762000107565b9050620001b5828262000165565b919050565b600067ffffffffffffffff821115620001d857620001d762000136565b5b620001e38262000125565b9050602081019050919050565b60005b8381101562000210578082015181840152602081019050620001f3565b8381111562000220576000848401525b50505050565b60006200023d6200023784620001ba565b6200019b565b9050828152602081018484840111156200025c576200025b62000120565b5b62000269848285620001f0565b509392505050565b600082601f8301126200028957620002886200011b565b5b81516200029b84826020860162000226565b91505092915050565b600060208284031215620002bd57620002bc62000111565b5b600082015167ffffffffffffffff811115620002de57620002dd62000116565b5b620002ec8482850162000271565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200033d57607f821691505b60208210811415620003545762000353620002f5565b5b50919050565b613a67806200036a6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b33e471511610066578063b33e471514610146578063c0b9d28714610177578063c2eceb1114610193578063e829cd5d146101c4578063ebb89de4146101f457610093565b80634c8820f81461009857806354dfbd39146100c85780637df1cde2146100f857806392f07a5814610128575b600080fd5b6100b260048036038101906100ad919061216f565b610224565b6040516100bf91906122b2565b60405180910390f35b6100e260048036038101906100dd91906122d4565b610402565b6040516100ef91906122b2565b60405180910390f35b610112600480360381019061010d9190612330565b610a4f565b60405161011f91906122b2565b60405180910390f35b610130610aaf565b60405161013d91906122b2565b60405180910390f35b610160600480360381019061015b9190612543565b610ae8565b60405161016e929190612795565b60405180910390f35b610191600480360381019061018c91906127f0565b610b83565b005b6101ad60048036038101906101a8919061216f565b610bfa565b6040516101bb929190612795565b60405180910390f35b6101de60048036038101906101d99190612839565b610e09565b6040516101eb9190612894565b60405180910390f35b61020e600480360381019061020991906122d4565b610f10565b60405161021b91906122b2565b60405180910390f35b606061022e61133a565b61023757600080fd5b6000803073ffffffffffffffffffffffffffffffffffffffff1663c2eceb11888888886040518563ffffffff1660e01b81526004016102799493929190612bcb565b60006040518083038186803b15801561029157600080fd5b505afa1580156102a5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ce9190612ecf565b91509150610366600080546102e290612f76565b80601f016020809104026020016040519081016040528092919081815260200182805461030e90612f76565b801561035b5780601f106103305761010080835404028352916020019161035b565b820191906000526020600020905b81548152906001019060200180831161033e57829003601f168201915b505050505082611402565b507f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e8260000151836040015184606001516040516103a693929190613026565b60405180910390a163c0b9d28760e01b826040516020016103c79190613064565b6040516020818303038152906040526040516020016103e792919061310f565b60405160208183030381529060405292505050949350505050565b606061040c61133a565b61041557600080fd5b6000610456836040518060400160405280601581526020017f6d657673686172653a76303a6d617463684269647300000000000000000000008152506114fa565b90506000610499846040518060400160405280601c81526020017f6d657673686172653a76303a756e6d61746368656442756e646c6573000000008152506114fa565b90506000815114156104e257306040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016104d99190613192565b60405180910390fd5b6000815167ffffffffffffffff8111156104ff576104fe611b63565b5b60405190808252806020026020018201604052801561053857816020015b610525611a9c565b81526020019060019003908161051d5790505b50905060005b825181101561069957600083828151811061055c5761055b6131c0565b5b6020026020010151905060005b85518110156106655760006105d187838151811061058a576105896131c0565b5b6020026020010151600001516040518060400160405280601681526020017f6d657673686172653a76303a6d657267656442696473000000000000000000008152506115f4565b8060200190518101906105e49190613286565b9050610629816000815181106105fd576105fc6131c0565b5b6020026020010151878681518110610618576106176131c0565b5b602002602001015160000151610e09565b1561065157868281518110610641576106406131c0565b5b6020026020010151925050610665565b50808061065d90613308565b915050610569565b508083838151811061067a576106796131c0565b5b602002602001018190525050808061069190613308565b91505061053e565b506000815167ffffffffffffffff8111156106b7576106b6611b63565b5b6040519080825280602002602001820160405280156106f057816020015b6106dd611b02565b8152602001906001900390816106d55790505b50905060005b82518110156107fb57600061075e848381518110610717576107166131c0565b5b6020026020010151600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c7473008152506115f4565b90506000818060200190518101906107769190613351565b905060405180604001604052808267ffffffffffffffff1681526020018685815181106107a6576107a56131c0565b5b6020026020010151600001516fffffffffffffffffffffffffffffffff19168152508484815181106107db576107da6131c0565b5b6020026020010181905250505080806107f390613308565b9150506106f6565b5060008151905060005b600182610812919061337e565b81101561092b57600060018261082891906133b2565b90505b8281101561091757838181518110610846576108456131c0565b5b60200260200101516000015167ffffffffffffffff1684838151811061086f5761086e6131c0565b5b60200260200101516000015167ffffffffffffffff1610156109045760008483815181106108a05761089f6131c0565b5b602002602001015190508482815181106108bd576108bc6131c0565b5b60200260200101518584815181106108d8576108d76131c0565b5b6020026020010181905250808583815181106108f7576108f66131c0565b5b6020026020010181905250505b808061090f90613308565b91505061082b565b50808061092390613308565b915050610805565b506000835167ffffffffffffffff81111561094957610948611b63565b5b6040519080825280602002602001820160405280156109775781602001602082028036833780820191505090505b50905060005b83518110156109ff57838181518110610999576109986131c0565b5b6020026020010151602001518282815181106109b8576109b76131c0565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505080806109f790613308565b91505061097d565b50610a418989836040518060400160405280600b81526020017f6d657673686172653a7630000000000000000000000000000000000000000000815250610224565b965050505050505092915050565b6060610a5961133a565b610a6257600080fd5b6000610aa3846040518060400160405280601981526020017f64656661756c743a76303a6275696c6465725061796c6f6164000000000000008152506115f4565b90508091505092915050565b6060610ab961133a565b610ac257600080fd5b6000610acc6116db565b905080806020019051810190610ae29190613408565b91505090565b610af0611a9c565b60607f67fa9c16cd72410c4cc1d47205b31852a81ec5e92d1c8cebc3ecbe98ed67fe3f846000015184604051610b27929190613451565b60405180910390a17f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e846000015185604001518660600151604051610b6e93929190613026565b60405180910390a18383915091509250929050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001356fffffffffffffffffffffffffffffffff1916826040016020810190610bcf9190613481565b838060600190610bdf91906134bd565b604051610bef94939291906135ab565b60405180910390a150565b610c02611a9c565b60606000600267ffffffffffffffff811115610c2157610c20611b63565b5b604051908082528060200260200182016040528015610c4f5781602001602082028036833780820191505090505b5090503081600081518110610c6757610c666131c0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634210000181600181518110610cba57610cb96131c0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000610d378783846040518060400160405280601581526020017f64656661756c743a76303a6d65726765644269647300000000000000000000008152506117b2565b9050610d9c81600001516040518060400160405280601581526020017f64656661756c743a76303a6d657267656442696473000000000000000000000081525088604051602001610d8891906135eb565b6040516020818303038152906040526118b8565b600080610dae8a84600001518961199b565b91509150610df683600001516040518060400160405280601981526020017f64656661756c743a76303a6275696c6465725061796c6f616400000000000000815250836118b8565b8282955095505050505094509492505050565b60008083604051602001610e1d919061362e565b6040516020818303038152906040529050600083604051602001610e41919061362e565b604051602081830303815290604052905060005b8251811015610f0257818181518110610e7157610e706131c0565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110610eb157610eb06131c0565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610eef5760009350505050610f0a565b8080610efa90613308565b915050610e55565b506001925050505b92915050565b6060610f1a61133a565b610f2357600080fd5b6000610f64836040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152506114fa565b9050600081511415610fad57306040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610fa49190613192565b60405180910390fd5b6000815167ffffffffffffffff811115610fca57610fc9611b63565b5b60405190808252806020026020018201604052801561100357816020015b610ff0611b02565b815260200190600190039081610fe85790505b50905060005b825181101561110e57600061107184838151811061102a576110296131c0565b5b6020026020010151600001516040518060400160405280601e81526020017f64656661756c743a76303a65746842756e646c6553696d526573756c747300008152506115f4565b90506000818060200190518101906110899190613351565b905060405180604001604052808267ffffffffffffffff1681526020018685815181106110b9576110b86131c0565b5b6020026020010151600001516fffffffffffffffffffffffffffffffff19168152508484815181106110ee576110ed6131c0565b5b60200260200101819052505050808061110690613308565b915050611009565b5060008151905060005b600182611125919061337e565b81101561123e57600060018261113b91906133b2565b90505b8281101561122a57838181518110611159576111586131c0565b5b60200260200101516000015167ffffffffffffffff16848381518110611182576111816131c0565b5b60200260200101516000015167ffffffffffffffff1610156112175760008483815181106111b3576111b26131c0565b5b602002602001015190508482815181106111d0576111cf6131c0565b5b60200260200101518584815181106111eb576111ea6131c0565b5b60200260200101819052508085838151811061120a576112096131c0565b5b6020026020010181905250505b808061122290613308565b91505061113e565b50808061123690613308565b915050611118565b506000835167ffffffffffffffff81111561125c5761125b611b63565b5b60405190808252806020026020018201604052801561128a5781602001602082028036833780820191505090505b50905060005b8351811015611312578381815181106112ac576112ab6131c0565b5b6020026020010151602001518282815181106112cb576112ca6131c0565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff191681525050808061130a90613308565b915050611290565b5061132e87878360405180602001604052806000815250610224565b94505050505092915050565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff166040516113669061366f565b600060405180830381855afa9150503d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b5091509150816113f3576342010000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016113ea929190613684565b60405180910390fd5b80516020820151935050505090565b606061140c61133a565b61141557600080fd5b600080634210000273ffffffffffffffffffffffffffffffffffffffff1685856040516020016114469291906136b4565b60405160208183030381529060405260405161146291906136eb565b600060405180830381855afa9150503d806000811461149d576040519150601f19603f3d011682016040523d82523d6000602084013e6114a2565b606091505b5091509150816114ef576342100002816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016114e6929190613684565b60405180910390fd5b809250505092915050565b6060600080634203000173ffffffffffffffffffffffffffffffffffffffff16858560405160200161152d929190613702565b60405160208183030381529060405260405161154991906136eb565b600060405180830381855afa9150503d8060008114611584576040519150601f19603f3d011682016040523d82523d6000602084013e611589565b606091505b5091509150816115d6576342030001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016115cd929190613684565b60405180910390fd5b808060200190518101906115ea9190613813565b9250505092915050565b6060600080634202000173ffffffffffffffffffffffffffffffffffffffff16858560405160200161162792919061385c565b60405160208183030381529060405260405161164391906136eb565b600060405180830381855afa9150503d806000811461167e576040519150601f19603f3d011682016040523d82523d6000602084013e611683565b606091505b5091509150816116d0576342020001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016116c7929190613684565b60405180910390fd5b809250505092915050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff1660405160200160405160208183030381529060405260405161171d91906136eb565b600060405180830381855afa9150503d8060008114611758576040519150601f19603f3d011682016040523d82523d6000602084013e61175d565b606091505b5091509150816117aa576342010001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016117a1929190613684565b60405180910390fd5b809250505090565b6117ba611a9c565b600080634203000073ffffffffffffffffffffffffffffffffffffffff16878787876040516020016117ef949392919061388c565b60405160208183030381529060405260405161180b91906136eb565b600060405180830381855afa9150503d8060008114611846576040519150601f19603f3d011682016040523d82523d6000602084013e61184b565b606091505b509150915081611898576342030000816040517f75fff46700000000000000000000000000000000000000000000000000000000815260040161188f929190613684565b60405180910390fd5b808060200190518101906118ac91906138e6565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff168585856040516020016118eb9392919061392f565b60405160208183030381529060405260405161190791906136eb565b600060405180830381855afa9150503d8060008114611942576040519150601f19603f3d011682016040523d82523d6000602084013e611947565b606091505b509150915081611994576342020000816040517f75fff46700000000000000000000000000000000000000000000000000000000815260040161198b929190613684565b60405180910390fd5b5050505050565b606080600080634210000173ffffffffffffffffffffffffffffffffffffffff168787876040516020016119d193929190613974565b6040516020818303038152906040526040516119ed91906136eb565b600060405180830381855afa9150503d8060008114611a28576040519150601f19603f3d011682016040523d82523d6000602084013e611a2d565b606091505b509150915081611a7a576342100001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611a71929190613684565b60405180910390fd5b80806020019051810190611a8e91906139b9565b935093505050935093915050565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b6040518060400160405280600067ffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff191681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b9b82611b52565b810181811067ffffffffffffffff82111715611bba57611bb9611b63565b5b80604052505050565b6000611bcd611b39565b9050611bd98282611b92565b919050565b600080fd5b600067ffffffffffffffff82169050919050565b611c0081611be3565b8114611c0b57600080fd5b50565b600081359050611c1d81611bf7565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115611c4857611c47611b63565b5b611c5182611b52565b9050602081019050919050565b82818337600083830152505050565b6000611c80611c7b84611c2d565b611bc3565b905082815260208101848484011115611c9c57611c9b611c28565b5b611ca7848285611c5e565b509392505050565b600082601f830112611cc457611cc3611c23565b5b8135611cd4848260208601611c6d565b91505092915050565b6000819050919050565b611cf081611cdd565b8114611cfb57600080fd5b50565b600081359050611d0d81611ce7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d3e82611d13565b9050919050565b611d4e81611d33565b8114611d5957600080fd5b50565b600081359050611d6b81611d45565b92915050565b600067ffffffffffffffff821115611d8c57611d8b611b63565b5b602082029050602081019050919050565b600080fd5b600060808284031215611db857611db7611b4d565b5b611dc26080611bc3565b90506000611dd284828501611c0e565b6000830152506020611de684828501611c0e565b6020830152506040611dfa84828501611d5c565b6040830152506060611e0e84828501611c0e565b60608301525092915050565b6000611e2d611e2884611d71565b611bc3565b90508083825260208201905060808402830185811115611e5057611e4f611d9d565b5b835b81811015611e795780611e658882611da2565b845260208401935050608081019050611e52565b5050509392505050565b600082601f830112611e9857611e97611c23565b5b8135611ea8848260208601611e1a565b91505092915050565b60006101008284031215611ec857611ec7611b4d565b5b611ed3610100611bc3565b90506000611ee384828501611c0e565b600083015250602082013567ffffffffffffffff811115611f0757611f06611bde565b5b611f1384828501611caf565b6020830152506040611f2784828501611cfe565b6040830152506060611f3b84828501611c0e565b6060830152506080611f4f84828501611d5c565b60808301525060a0611f6384828501611c0e565b60a08301525060c0611f7784828501611cfe565b60c08301525060e082013567ffffffffffffffff811115611f9b57611f9a611bde565b5b611fa784828501611e83565b60e08301525092915050565b600067ffffffffffffffff821115611fce57611fcd611b63565b5b602082029050602081019050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b61201481611fdf565b811461201f57600080fd5b50565b6000813590506120318161200b565b92915050565b600061204a61204584611fb3565b611bc3565b9050808382526020820190506020840283018581111561206d5761206c611d9d565b5b835b8181101561209657806120828882612022565b84526020840193505060208101905061206f565b5050509392505050565b600082601f8301126120b5576120b4611c23565b5b81356120c5848260208601612037565b91505092915050565b600067ffffffffffffffff8211156120e9576120e8611b63565b5b6120f282611b52565b9050602081019050919050565b600061211261210d846120ce565b611bc3565b90508281526020810184848401111561212e5761212d611c28565b5b612139848285611c5e565b509392505050565b600082601f83011261215657612155611c23565b5b81356121668482602086016120ff565b91505092915050565b6000806000806080858703121561218957612188611b43565b5b600085013567ffffffffffffffff8111156121a7576121a6611b48565b5b6121b387828801611eb1565b94505060206121c487828801611c0e565b935050604085013567ffffffffffffffff8111156121e5576121e4611b48565b5b6121f1878288016120a0565b925050606085013567ffffffffffffffff81111561221257612211611b48565b5b61221e87828801612141565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015612264578082015181840152602081019050612249565b83811115612273576000848401525b50505050565b60006122848261222a565b61228e8185612235565b935061229e818560208601612246565b6122a781611b52565b840191505092915050565b600060208201905081810360008301526122cc8184612279565b905092915050565b600080604083850312156122eb576122ea611b43565b5b600083013567ffffffffffffffff81111561230957612308611b48565b5b61231585828601611eb1565b925050602061232685828601611c0e565b9150509250929050565b6000806040838503121561234757612346611b43565b5b600061235585828601612022565b925050602083013567ffffffffffffffff81111561237657612375611b48565b5b61238285828601611caf565b9150509250929050565b600067ffffffffffffffff8211156123a7576123a6611b63565b5b602082029050602081019050919050565b60006123cb6123c68461238c565b611bc3565b905080838252602082019050602084028301858111156123ee576123ed611d9d565b5b835b8181101561241757806124038882611d5c565b8452602084019350506020810190506123f0565b5050509392505050565b600082601f83011261243657612435611c23565b5b81356124468482602086016123b8565b91505092915050565b600060c0828403121561246557612464611b4d565b5b61246f60c0611bc3565b9050600061247f84828501612022565b600083015250602061249384828501612022565b60208301525060406124a784828501611c0e565b604083015250606082013567ffffffffffffffff8111156124cb576124ca611bde565b5b6124d784828501612421565b606083015250608082013567ffffffffffffffff8111156124fb576124fa611bde565b5b61250784828501612421565b60808301525060a082013567ffffffffffffffff81111561252b5761252a611bde565b5b61253784828501612141565b60a08301525092915050565b6000806040838503121561255a57612559611b43565b5b600083013567ffffffffffffffff81111561257857612577611b48565b5b6125848582860161244f565b925050602083013567ffffffffffffffff8111156125a5576125a4611b48565b5b6125b185828601611caf565b9150509250929050565b60006125c682611fdf565b9050919050565b6125d6816125bb565b82525050565b6125e581611be3565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61262081611d33565b82525050565b60006126328383612617565b60208301905092915050565b6000602082019050919050565b6000612656826125eb565b61266081856125f6565b935061266b83612607565b8060005b8381101561269c5781516126838882612626565b975061268e8361263e565b92505060018101905061266f565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60006126d0826126a9565b6126da81856126b4565b93506126ea818560208601612246565b6126f381611b52565b840191505092915050565b600060c08301600083015161271660008601826125cd565b50602083015161272960208601826125cd565b50604083015161273c60408601826125dc565b5060608301518482036060860152612754828261264b565b9150506080830151848203608086015261276e828261264b565b91505060a083015184820360a086015261278882826126c5565b9150508091505092915050565b600060408201905081810360008301526127af81856126fe565b905081810360208301526127c38184612279565b90509392505050565b600080fd5b600060c082840312156127e7576127e66127cc565b5b81905092915050565b60006020828403121561280657612805611b43565b5b600082013567ffffffffffffffff81111561282457612823611b48565b5b612830848285016127d1565b91505092915050565b600080604083850312156128505761284f611b43565b5b600061285e85828601612022565b925050602061286f85828601612022565b9150509250929050565b60008115159050919050565b61288e81612879565b82525050565b60006020820190506128a96000830184612885565b92915050565b600082825260208201905092915050565b60006128cb8261222a565b6128d581856128af565b93506128e5818560208601612246565b6128ee81611b52565b840191505092915050565b61290281611cdd565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60808201600082015161294a60008501826125dc565b50602082015161295d60208501826125dc565b5060408201516129706040850182612617565b50606082015161298360608501826125dc565b50505050565b60006129958383612934565b60808301905092915050565b6000602082019050919050565b60006129b982612908565b6129c38185612913565b93506129ce83612924565b8060005b838110156129ff5781516129e68882612989565b97506129f1836129a1565b9250506001810190506129d2565b5085935050505092915050565b600061010083016000830151612a2560008601826125dc565b5060208301518482036020860152612a3d82826128c0565b9150506040830151612a5260408601826128f9565b506060830151612a6560608601826125dc565b506080830151612a786080860182612617565b5060a0830151612a8b60a08601826125dc565b5060c0830151612a9e60c08601826128f9565b5060e083015184820360e0860152612ab682826129ae565b9150508091505092915050565b612acc81611be3565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612b0a83836125cd565b60208301905092915050565b6000602082019050919050565b6000612b2e82612ad2565b612b388185612add565b9350612b4383612aee565b8060005b83811015612b74578151612b5b8882612afe565b9750612b6683612b16565b925050600181019050612b47565b5085935050505092915050565b600082825260208201905092915050565b6000612b9d826126a9565b612ba78185612b81565b9350612bb7818560208601612246565b612bc081611b52565b840191505092915050565b60006080820190508181036000830152612be58187612a0c565b9050612bf46020830186612ac3565b8181036040830152612c068185612b23565b90508181036060830152612c1a8184612b92565b905095945050505050565b600081519050612c348161200b565b92915050565b600081519050612c4981611bf7565b92915050565b600081519050612c5e81611d45565b92915050565b6000612c77612c728461238c565b611bc3565b90508083825260208201905060208402830185811115612c9a57612c99611d9d565b5b835b81811015612cc35780612caf8882612c4f565b845260208401935050602081019050612c9c565b5050509392505050565b600082601f830112612ce257612ce1611c23565b5b8151612cf2848260208601612c64565b91505092915050565b6000612d0e612d09846120ce565b611bc3565b905082815260208101848484011115612d2a57612d29611c28565b5b612d35848285612246565b509392505050565b600082601f830112612d5257612d51611c23565b5b8151612d62848260208601612cfb565b91505092915050565b600060c08284031215612d8157612d80611b4d565b5b612d8b60c0611bc3565b90506000612d9b84828501612c25565b6000830152506020612daf84828501612c25565b6020830152506040612dc384828501612c3a565b604083015250606082015167ffffffffffffffff811115612de757612de6611bde565b5b612df384828501612ccd565b606083015250608082015167ffffffffffffffff811115612e1757612e16611bde565b5b612e2384828501612ccd565b60808301525060a082015167ffffffffffffffff811115612e4757612e46611bde565b5b612e5384828501612d3d565b60a08301525092915050565b6000612e72612e6d84611c2d565b611bc3565b905082815260208101848484011115612e8e57612e8d611c28565b5b612e99848285612246565b509392505050565b600082601f830112612eb657612eb5611c23565b5b8151612ec6848260208601612e5f565b91505092915050565b60008060408385031215612ee657612ee5611b43565b5b600083015167ffffffffffffffff811115612f0457612f03611b48565b5b612f1085828601612d6b565b925050602083015167ffffffffffffffff811115612f3157612f30611b48565b5b612f3d85828601612ea1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f8e57607f821691505b60208210811415612fa257612fa1612f47565b5b50919050565b612fb1816125bb565b82525050565b600082825260208201905092915050565b6000612fd3826125eb565b612fdd8185612fb7565b9350612fe883612607565b8060005b838110156130195781516130008882612626565b975061300b8361263e565b925050600181019050612fec565b5085935050505092915050565b600060608201905061303b6000830186612fa8565b6130486020830185612ac3565b818103604083015261305a8184612fc8565b9050949350505050565b6000602082019050818103600083015261307e81846126fe565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6130cd6130c882613086565b6130b2565b82525050565b600081905092915050565b60006130e98261222a565b6130f381856130d3565b9350613103818560208601612246565b80840191505092915050565b600061311b82856130bc565b60048201915061312b82846130de565b91508190509392505050565b61314081611d33565b82525050565b7f6e6f206269647300000000000000000000000000000000000000000000000000600082015250565b600061317c600783612235565b915061318782613146565b602082019050919050565b60006040820190506131a76000830184613137565b81810360208301526131b88161316f565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006132026131fd84611fb3565b611bc3565b9050808382526020820190506020840283018581111561322557613224611d9d565b5b835b8181101561324e578061323a8882612c25565b845260208401935050602081019050613227565b5050509392505050565b600082601f83011261326d5761326c611c23565b5b815161327d8482602086016131ef565b91505092915050565b60006020828403121561329c5761329b611b43565b5b600082015167ffffffffffffffff8111156132ba576132b9611b48565b5b6132c684828501613258565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000613313826132fe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613346576133456132cf565b5b600182019050919050565b60006020828403121561336757613366611b43565b5b600061337584828501612c3a565b91505092915050565b6000613389826132fe565b9150613394836132fe565b9250828210156133a7576133a66132cf565b5b828203905092915050565b60006133bd826132fe565b91506133c8836132fe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156133fd576133fc6132cf565b5b828201905092915050565b60006020828403121561341e5761341d611b43565b5b600082015167ffffffffffffffff81111561343c5761343b611b48565b5b61344884828501612ea1565b91505092915050565b60006040820190506134666000830185612fa8565b81810360208301526134788184612279565b90509392505050565b60006020828403121561349757613496611b43565b5b60006134a584828501611c0e565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126134da576134d96134ae565b5b80840192508235915067ffffffffffffffff8211156134fc576134fb6134b3565b5b602083019250602082023603831315613518576135176134b8565b5b509250929050565b6000819050919050565b60006135396020840184611d5c565b905092915050565b6000602082019050919050565b600061355a8385612fb7565b935061356582613520565b8060005b8581101561359e5761357b828461352a565b6135858882612626565b975061359083613541565b925050600181019050613569565b5085925050509392505050565b60006060820190506135c06000830187612fa8565b6135cd6020830186612ac3565b81810360408301526135e081848661354e565b905095945050505050565b600060208201905081810360008301526136058184612b23565b905092915050565b6000819050919050565b613628613623826125bb565b61360d565b82525050565b600061363a8284613617565b60108201915081905092915050565b50565b60006136596000836130d3565b915061366482613649565b600082019050919050565b600061367a8261364c565b9150819050919050565b60006040820190506136996000830185613137565b81810360208301526136ab8184612279565b90509392505050565b600060408201905081810360008301526136ce8185612b92565b905081810360208301526136e28184612279565b90509392505050565b60006136f782846130de565b915081905092915050565b60006040820190506137176000830185612ac3565b81810360208301526137298184612b92565b90509392505050565b600067ffffffffffffffff82111561374d5761374c611b63565b5b602082029050602081019050919050565b600061377161376c84613732565b611bc3565b9050808382526020820190506020840283018581111561379457613793611d9d565b5b835b818110156137db57805167ffffffffffffffff8111156137b9576137b8611c23565b5b8086016137c68982612d6b565b85526020850194505050602081019050613796565b5050509392505050565b600082601f8301126137fa576137f9611c23565b5b815161380a84826020860161375e565b91505092915050565b60006020828403121561382957613828611b43565b5b600082015167ffffffffffffffff81111561384757613846611b48565b5b613853848285016137e5565b91505092915050565b60006040820190506138716000830185612fa8565b81810360208301526138838184612b92565b90509392505050565b60006080820190506138a16000830187612ac3565b81810360208301526138b38186612fc8565b905081810360408301526138c78185612fc8565b905081810360608301526138db8184612b92565b905095945050505050565b6000602082840312156138fc576138fb611b43565b5b600082015167ffffffffffffffff81111561391a57613919611b48565b5b61392684828501612d6b565b91505092915050565b60006060820190506139446000830186612fa8565b81810360208301526139568185612b92565b9050818103604083015261396a8184612279565b9050949350505050565b6000606082019050818103600083015261398e8186612a0c565b905061399d6020830185612fa8565b81810360408301526139af8184612b92565b9050949350505050565b600080604083850312156139d0576139cf611b43565b5b600083015167ffffffffffffffff8111156139ee576139ed611b48565b5b6139fa85828601612ea1565b925050602083015167ffffffffffffffff811115613a1b57613a1a611b48565b5b613a2785828601612ea1565b915050925092905056fea26469706673582212203c51706225535637ef98efd2a32418cc2fb3a866240730a7388be00b96dba8b664736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063b33e471511610066578063b33e471514610146578063c0b9d28714610177578063c2eceb1114610193578063e829cd5d146101c4578063ebb89de4146101f457610093565b80634c8820f81461009857806354dfbd39146100c85780637df1cde2146100f857806392f07a5814610128575b600080fd5b6100b260048036038101906100ad919061216f565b610224565b6040516100bf91906122b2565b60405180910390f35b6100e260048036038101906100dd91906122d4565b610402565b6040516100ef91906122b2565b60405180910390f35b610112600480360381019061010d9190612330565b610a4f565b60405161011f91906122b2565b60405180910390f35b610130610aaf565b60405161013d91906122b2565b60405180910390f35b610160600480360381019061015b9190612543565b610ae8565b60405161016e929190612795565b60405180910390f35b610191600480360381019061018c91906127f0565b610b83565b005b6101ad60048036038101906101a8919061216f565b610bfa565b6040516101bb929190612795565b60405180910390f35b6101de60048036038101906101d99190612839565b610e09565b6040516101eb9190612894565b60405180910390f35b61020e600480360381019061020991906122d4565b610f10565b60405161021b91906122b2565b60405180910390f35b606061022e61133a565b61023757600080fd5b6000803073ffffffffffffffffffffffffffffffffffffffff1663c2eceb11888888886040518563ffffffff1660e01b81526004016102799493929190612bcb565b60006040518083038186803b15801561029157600080fd5b505afa1580156102a5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ce9190612ecf565b91509150610366600080546102e290612f76565b80601f016020809104026020016040519081016040528092919081815260200182805461030e90612f76565b801561035b5780601f106103305761010080835404028352916020019161035b565b820191906000526020600020905b81548152906001019060200180831161033e57829003601f168201915b505050505082611402565b507f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e8260000151836040015184606001516040516103a693929190613026565b60405180910390a163c0b9d28760e01b826040516020016103c79190613064565b6040516020818303038152906040526040516020016103e792919061310f565b60405160208183030381529060405292505050949350505050565b606061040c61133a565b61041557600080fd5b6000610456836040518060400160405280601581526020017f6d657673686172653a76303a6d617463684269647300000000000000000000008152506114fa565b90506000610499846040518060400160405280601c81526020017f6d657673686172653a76303a756e6d61746368656442756e646c6573000000008152506114fa565b90506000815114156104e257306040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016104d99190613192565b60405180910390fd5b6000815167ffffffffffffffff8111156104ff576104fe611b63565b5b60405190808252806020026020018201604052801561053857816020015b610525611a9c565b81526020019060019003908161051d5790505b50905060005b825181101561069957600083828151811061055c5761055b6131c0565b5b6020026020010151905060005b85518110156106655760006105d187838151811061058a576105896131c0565b5b6020026020010151600001516040518060400160405280601681526020017f6d657673686172653a76303a6d657267656442696473000000000000000000008152506115f4565b8060200190518101906105e49190613286565b9050610629816000815181106105fd576105fc6131c0565b5b6020026020010151878681518110610618576106176131c0565b5b602002602001015160000151610e09565b1561065157868281518110610641576106406131c0565b5b6020026020010151925050610665565b50808061065d90613308565b915050610569565b508083838151811061067a576106796131c0565b5b602002602001018190525050808061069190613308565b91505061053e565b506000815167ffffffffffffffff8111156106b7576106b6611b63565b5b6040519080825280602002602001820160405280156106f057816020015b6106dd611b02565b8152602001906001900390816106d55790505b50905060005b82518110156107fb57600061075e848381518110610717576107166131c0565b5b6020026020010151600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c7473008152506115f4565b90506000818060200190518101906107769190613351565b905060405180604001604052808267ffffffffffffffff1681526020018685815181106107a6576107a56131c0565b5b6020026020010151600001516fffffffffffffffffffffffffffffffff19168152508484815181106107db576107da6131c0565b5b6020026020010181905250505080806107f390613308565b9150506106f6565b5060008151905060005b600182610812919061337e565b81101561092b57600060018261082891906133b2565b90505b8281101561091757838181518110610846576108456131c0565b5b60200260200101516000015167ffffffffffffffff1684838151811061086f5761086e6131c0565b5b60200260200101516000015167ffffffffffffffff1610156109045760008483815181106108a05761089f6131c0565b5b602002602001015190508482815181106108bd576108bc6131c0565b5b60200260200101518584815181106108d8576108d76131c0565b5b6020026020010181905250808583815181106108f7576108f66131c0565b5b6020026020010181905250505b808061090f90613308565b91505061082b565b50808061092390613308565b915050610805565b506000835167ffffffffffffffff81111561094957610948611b63565b5b6040519080825280602002602001820160405280156109775781602001602082028036833780820191505090505b50905060005b83518110156109ff57838181518110610999576109986131c0565b5b6020026020010151602001518282815181106109b8576109b76131c0565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505080806109f790613308565b91505061097d565b50610a418989836040518060400160405280600b81526020017f6d657673686172653a7630000000000000000000000000000000000000000000815250610224565b965050505050505092915050565b6060610a5961133a565b610a6257600080fd5b6000610aa3846040518060400160405280601981526020017f64656661756c743a76303a6275696c6465725061796c6f6164000000000000008152506115f4565b90508091505092915050565b6060610ab961133a565b610ac257600080fd5b6000610acc6116db565b905080806020019051810190610ae29190613408565b91505090565b610af0611a9c565b60607f67fa9c16cd72410c4cc1d47205b31852a81ec5e92d1c8cebc3ecbe98ed67fe3f846000015184604051610b27929190613451565b60405180910390a17f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e846000015185604001518660600151604051610b6e93929190613026565b60405180910390a18383915091509250929050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001356fffffffffffffffffffffffffffffffff1916826040016020810190610bcf9190613481565b838060600190610bdf91906134bd565b604051610bef94939291906135ab565b60405180910390a150565b610c02611a9c565b60606000600267ffffffffffffffff811115610c2157610c20611b63565b5b604051908082528060200260200182016040528015610c4f5781602001602082028036833780820191505090505b5090503081600081518110610c6757610c666131c0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634210000181600181518110610cba57610cb96131c0565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000610d378783846040518060400160405280601581526020017f64656661756c743a76303a6d65726765644269647300000000000000000000008152506117b2565b9050610d9c81600001516040518060400160405280601581526020017f64656661756c743a76303a6d657267656442696473000000000000000000000081525088604051602001610d8891906135eb565b6040516020818303038152906040526118b8565b600080610dae8a84600001518961199b565b91509150610df683600001516040518060400160405280601981526020017f64656661756c743a76303a6275696c6465725061796c6f616400000000000000815250836118b8565b8282955095505050505094509492505050565b60008083604051602001610e1d919061362e565b6040516020818303038152906040529050600083604051602001610e41919061362e565b604051602081830303815290604052905060005b8251811015610f0257818181518110610e7157610e706131c0565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110610eb157610eb06131c0565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610eef5760009350505050610f0a565b8080610efa90613308565b915050610e55565b506001925050505b92915050565b6060610f1a61133a565b610f2357600080fd5b6000610f64836040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152506114fa565b9050600081511415610fad57306040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610fa49190613192565b60405180910390fd5b6000815167ffffffffffffffff811115610fca57610fc9611b63565b5b60405190808252806020026020018201604052801561100357816020015b610ff0611b02565b815260200190600190039081610fe85790505b50905060005b825181101561110e57600061107184838151811061102a576110296131c0565b5b6020026020010151600001516040518060400160405280601e81526020017f64656661756c743a76303a65746842756e646c6553696d526573756c747300008152506115f4565b90506000818060200190518101906110899190613351565b905060405180604001604052808267ffffffffffffffff1681526020018685815181106110b9576110b86131c0565b5b6020026020010151600001516fffffffffffffffffffffffffffffffff19168152508484815181106110ee576110ed6131c0565b5b60200260200101819052505050808061110690613308565b915050611009565b5060008151905060005b600182611125919061337e565b81101561123e57600060018261113b91906133b2565b90505b8281101561122a57838181518110611159576111586131c0565b5b60200260200101516000015167ffffffffffffffff16848381518110611182576111816131c0565b5b60200260200101516000015167ffffffffffffffff1610156112175760008483815181106111b3576111b26131c0565b5b602002602001015190508482815181106111d0576111cf6131c0565b5b60200260200101518584815181106111eb576111ea6131c0565b5b60200260200101819052508085838151811061120a576112096131c0565b5b6020026020010181905250505b808061122290613308565b91505061113e565b50808061123690613308565b915050611118565b506000835167ffffffffffffffff81111561125c5761125b611b63565b5b60405190808252806020026020018201604052801561128a5781602001602082028036833780820191505090505b50905060005b8351811015611312578381815181106112ac576112ab6131c0565b5b6020026020010151602001518282815181106112cb576112ca6131c0565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff191681525050808061130a90613308565b915050611290565b5061132e87878360405180602001604052806000815250610224565b94505050505092915050565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff166040516113669061366f565b600060405180830381855afa9150503d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b5091509150816113f3576342010000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016113ea929190613684565b60405180910390fd5b80516020820151935050505090565b606061140c61133a565b61141557600080fd5b600080634210000273ffffffffffffffffffffffffffffffffffffffff1685856040516020016114469291906136b4565b60405160208183030381529060405260405161146291906136eb565b600060405180830381855afa9150503d806000811461149d576040519150601f19603f3d011682016040523d82523d6000602084013e6114a2565b606091505b5091509150816114ef576342100002816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016114e6929190613684565b60405180910390fd5b809250505092915050565b6060600080634203000173ffffffffffffffffffffffffffffffffffffffff16858560405160200161152d929190613702565b60405160208183030381529060405260405161154991906136eb565b600060405180830381855afa9150503d8060008114611584576040519150601f19603f3d011682016040523d82523d6000602084013e611589565b606091505b5091509150816115d6576342030001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016115cd929190613684565b60405180910390fd5b808060200190518101906115ea9190613813565b9250505092915050565b6060600080634202000173ffffffffffffffffffffffffffffffffffffffff16858560405160200161162792919061385c565b60405160208183030381529060405260405161164391906136eb565b600060405180830381855afa9150503d806000811461167e576040519150601f19603f3d011682016040523d82523d6000602084013e611683565b606091505b5091509150816116d0576342020001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016116c7929190613684565b60405180910390fd5b809250505092915050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff1660405160200160405160208183030381529060405260405161171d91906136eb565b600060405180830381855afa9150503d8060008114611758576040519150601f19603f3d011682016040523d82523d6000602084013e61175d565b606091505b5091509150816117aa576342010001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016117a1929190613684565b60405180910390fd5b809250505090565b6117ba611a9c565b600080634203000073ffffffffffffffffffffffffffffffffffffffff16878787876040516020016117ef949392919061388c565b60405160208183030381529060405260405161180b91906136eb565b600060405180830381855afa9150503d8060008114611846576040519150601f19603f3d011682016040523d82523d6000602084013e61184b565b606091505b509150915081611898576342030000816040517f75fff46700000000000000000000000000000000000000000000000000000000815260040161188f929190613684565b60405180910390fd5b808060200190518101906118ac91906138e6565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff168585856040516020016118eb9392919061392f565b60405160208183030381529060405260405161190791906136eb565b600060405180830381855afa9150503d8060008114611942576040519150601f19603f3d011682016040523d82523d6000602084013e611947565b606091505b509150915081611994576342020000816040517f75fff46700000000000000000000000000000000000000000000000000000000815260040161198b929190613684565b60405180910390fd5b5050505050565b606080600080634210000173ffffffffffffffffffffffffffffffffffffffff168787876040516020016119d193929190613974565b6040516020818303038152906040526040516119ed91906136eb565b600060405180830381855afa9150503d8060008114611a28576040519150601f19603f3d011682016040523d82523d6000602084013e611a2d565b606091505b509150915081611a7a576342100001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611a71929190613684565b60405180910390fd5b80806020019051810190611a8e91906139b9565b935093505050935093915050565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b6040518060400160405280600067ffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff191681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b9b82611b52565b810181811067ffffffffffffffff82111715611bba57611bb9611b63565b5b80604052505050565b6000611bcd611b39565b9050611bd98282611b92565b919050565b600080fd5b600067ffffffffffffffff82169050919050565b611c0081611be3565b8114611c0b57600080fd5b50565b600081359050611c1d81611bf7565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115611c4857611c47611b63565b5b611c5182611b52565b9050602081019050919050565b82818337600083830152505050565b6000611c80611c7b84611c2d565b611bc3565b905082815260208101848484011115611c9c57611c9b611c28565b5b611ca7848285611c5e565b509392505050565b600082601f830112611cc457611cc3611c23565b5b8135611cd4848260208601611c6d565b91505092915050565b6000819050919050565b611cf081611cdd565b8114611cfb57600080fd5b50565b600081359050611d0d81611ce7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d3e82611d13565b9050919050565b611d4e81611d33565b8114611d5957600080fd5b50565b600081359050611d6b81611d45565b92915050565b600067ffffffffffffffff821115611d8c57611d8b611b63565b5b602082029050602081019050919050565b600080fd5b600060808284031215611db857611db7611b4d565b5b611dc26080611bc3565b90506000611dd284828501611c0e565b6000830152506020611de684828501611c0e565b6020830152506040611dfa84828501611d5c565b6040830152506060611e0e84828501611c0e565b60608301525092915050565b6000611e2d611e2884611d71565b611bc3565b90508083825260208201905060808402830185811115611e5057611e4f611d9d565b5b835b81811015611e795780611e658882611da2565b845260208401935050608081019050611e52565b5050509392505050565b600082601f830112611e9857611e97611c23565b5b8135611ea8848260208601611e1a565b91505092915050565b60006101008284031215611ec857611ec7611b4d565b5b611ed3610100611bc3565b90506000611ee384828501611c0e565b600083015250602082013567ffffffffffffffff811115611f0757611f06611bde565b5b611f1384828501611caf565b6020830152506040611f2784828501611cfe565b6040830152506060611f3b84828501611c0e565b6060830152506080611f4f84828501611d5c565b60808301525060a0611f6384828501611c0e565b60a08301525060c0611f7784828501611cfe565b60c08301525060e082013567ffffffffffffffff811115611f9b57611f9a611bde565b5b611fa784828501611e83565b60e08301525092915050565b600067ffffffffffffffff821115611fce57611fcd611b63565b5b602082029050602081019050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b61201481611fdf565b811461201f57600080fd5b50565b6000813590506120318161200b565b92915050565b600061204a61204584611fb3565b611bc3565b9050808382526020820190506020840283018581111561206d5761206c611d9d565b5b835b8181101561209657806120828882612022565b84526020840193505060208101905061206f565b5050509392505050565b600082601f8301126120b5576120b4611c23565b5b81356120c5848260208601612037565b91505092915050565b600067ffffffffffffffff8211156120e9576120e8611b63565b5b6120f282611b52565b9050602081019050919050565b600061211261210d846120ce565b611bc3565b90508281526020810184848401111561212e5761212d611c28565b5b612139848285611c5e565b509392505050565b600082601f83011261215657612155611c23565b5b81356121668482602086016120ff565b91505092915050565b6000806000806080858703121561218957612188611b43565b5b600085013567ffffffffffffffff8111156121a7576121a6611b48565b5b6121b387828801611eb1565b94505060206121c487828801611c0e565b935050604085013567ffffffffffffffff8111156121e5576121e4611b48565b5b6121f1878288016120a0565b925050606085013567ffffffffffffffff81111561221257612211611b48565b5b61221e87828801612141565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015612264578082015181840152602081019050612249565b83811115612273576000848401525b50505050565b60006122848261222a565b61228e8185612235565b935061229e818560208601612246565b6122a781611b52565b840191505092915050565b600060208201905081810360008301526122cc8184612279565b905092915050565b600080604083850312156122eb576122ea611b43565b5b600083013567ffffffffffffffff81111561230957612308611b48565b5b61231585828601611eb1565b925050602061232685828601611c0e565b9150509250929050565b6000806040838503121561234757612346611b43565b5b600061235585828601612022565b925050602083013567ffffffffffffffff81111561237657612375611b48565b5b61238285828601611caf565b9150509250929050565b600067ffffffffffffffff8211156123a7576123a6611b63565b5b602082029050602081019050919050565b60006123cb6123c68461238c565b611bc3565b905080838252602082019050602084028301858111156123ee576123ed611d9d565b5b835b8181101561241757806124038882611d5c565b8452602084019350506020810190506123f0565b5050509392505050565b600082601f83011261243657612435611c23565b5b81356124468482602086016123b8565b91505092915050565b600060c0828403121561246557612464611b4d565b5b61246f60c0611bc3565b9050600061247f84828501612022565b600083015250602061249384828501612022565b60208301525060406124a784828501611c0e565b604083015250606082013567ffffffffffffffff8111156124cb576124ca611bde565b5b6124d784828501612421565b606083015250608082013567ffffffffffffffff8111156124fb576124fa611bde565b5b61250784828501612421565b60808301525060a082013567ffffffffffffffff81111561252b5761252a611bde565b5b61253784828501612141565b60a08301525092915050565b6000806040838503121561255a57612559611b43565b5b600083013567ffffffffffffffff81111561257857612577611b48565b5b6125848582860161244f565b925050602083013567ffffffffffffffff8111156125a5576125a4611b48565b5b6125b185828601611caf565b9150509250929050565b60006125c682611fdf565b9050919050565b6125d6816125bb565b82525050565b6125e581611be3565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61262081611d33565b82525050565b60006126328383612617565b60208301905092915050565b6000602082019050919050565b6000612656826125eb565b61266081856125f6565b935061266b83612607565b8060005b8381101561269c5781516126838882612626565b975061268e8361263e565b92505060018101905061266f565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60006126d0826126a9565b6126da81856126b4565b93506126ea818560208601612246565b6126f381611b52565b840191505092915050565b600060c08301600083015161271660008601826125cd565b50602083015161272960208601826125cd565b50604083015161273c60408601826125dc565b5060608301518482036060860152612754828261264b565b9150506080830151848203608086015261276e828261264b565b91505060a083015184820360a086015261278882826126c5565b9150508091505092915050565b600060408201905081810360008301526127af81856126fe565b905081810360208301526127c38184612279565b90509392505050565b600080fd5b600060c082840312156127e7576127e66127cc565b5b81905092915050565b60006020828403121561280657612805611b43565b5b600082013567ffffffffffffffff81111561282457612823611b48565b5b612830848285016127d1565b91505092915050565b600080604083850312156128505761284f611b43565b5b600061285e85828601612022565b925050602061286f85828601612022565b9150509250929050565b60008115159050919050565b61288e81612879565b82525050565b60006020820190506128a96000830184612885565b92915050565b600082825260208201905092915050565b60006128cb8261222a565b6128d581856128af565b93506128e5818560208601612246565b6128ee81611b52565b840191505092915050565b61290281611cdd565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60808201600082015161294a60008501826125dc565b50602082015161295d60208501826125dc565b5060408201516129706040850182612617565b50606082015161298360608501826125dc565b50505050565b60006129958383612934565b60808301905092915050565b6000602082019050919050565b60006129b982612908565b6129c38185612913565b93506129ce83612924565b8060005b838110156129ff5781516129e68882612989565b97506129f1836129a1565b9250506001810190506129d2565b5085935050505092915050565b600061010083016000830151612a2560008601826125dc565b5060208301518482036020860152612a3d82826128c0565b9150506040830151612a5260408601826128f9565b506060830151612a6560608601826125dc565b506080830151612a786080860182612617565b5060a0830151612a8b60a08601826125dc565b5060c0830151612a9e60c08601826128f9565b5060e083015184820360e0860152612ab682826129ae565b9150508091505092915050565b612acc81611be3565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612b0a83836125cd565b60208301905092915050565b6000602082019050919050565b6000612b2e82612ad2565b612b388185612add565b9350612b4383612aee565b8060005b83811015612b74578151612b5b8882612afe565b9750612b6683612b16565b925050600181019050612b47565b5085935050505092915050565b600082825260208201905092915050565b6000612b9d826126a9565b612ba78185612b81565b9350612bb7818560208601612246565b612bc081611b52565b840191505092915050565b60006080820190508181036000830152612be58187612a0c565b9050612bf46020830186612ac3565b8181036040830152612c068185612b23565b90508181036060830152612c1a8184612b92565b905095945050505050565b600081519050612c348161200b565b92915050565b600081519050612c4981611bf7565b92915050565b600081519050612c5e81611d45565b92915050565b6000612c77612c728461238c565b611bc3565b90508083825260208201905060208402830185811115612c9a57612c99611d9d565b5b835b81811015612cc35780612caf8882612c4f565b845260208401935050602081019050612c9c565b5050509392505050565b600082601f830112612ce257612ce1611c23565b5b8151612cf2848260208601612c64565b91505092915050565b6000612d0e612d09846120ce565b611bc3565b905082815260208101848484011115612d2a57612d29611c28565b5b612d35848285612246565b509392505050565b600082601f830112612d5257612d51611c23565b5b8151612d62848260208601612cfb565b91505092915050565b600060c08284031215612d8157612d80611b4d565b5b612d8b60c0611bc3565b90506000612d9b84828501612c25565b6000830152506020612daf84828501612c25565b6020830152506040612dc384828501612c3a565b604083015250606082015167ffffffffffffffff811115612de757612de6611bde565b5b612df384828501612ccd565b606083015250608082015167ffffffffffffffff811115612e1757612e16611bde565b5b612e2384828501612ccd565b60808301525060a082015167ffffffffffffffff811115612e4757612e46611bde565b5b612e5384828501612d3d565b60a08301525092915050565b6000612e72612e6d84611c2d565b611bc3565b905082815260208101848484011115612e8e57612e8d611c28565b5b612e99848285612246565b509392505050565b600082601f830112612eb657612eb5611c23565b5b8151612ec6848260208601612e5f565b91505092915050565b60008060408385031215612ee657612ee5611b43565b5b600083015167ffffffffffffffff811115612f0457612f03611b48565b5b612f1085828601612d6b565b925050602083015167ffffffffffffffff811115612f3157612f30611b48565b5b612f3d85828601612ea1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f8e57607f821691505b60208210811415612fa257612fa1612f47565b5b50919050565b612fb1816125bb565b82525050565b600082825260208201905092915050565b6000612fd3826125eb565b612fdd8185612fb7565b9350612fe883612607565b8060005b838110156130195781516130008882612626565b975061300b8361263e565b925050600181019050612fec565b5085935050505092915050565b600060608201905061303b6000830186612fa8565b6130486020830185612ac3565b818103604083015261305a8184612fc8565b9050949350505050565b6000602082019050818103600083015261307e81846126fe565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6130cd6130c882613086565b6130b2565b82525050565b600081905092915050565b60006130e98261222a565b6130f381856130d3565b9350613103818560208601612246565b80840191505092915050565b600061311b82856130bc565b60048201915061312b82846130de565b91508190509392505050565b61314081611d33565b82525050565b7f6e6f206269647300000000000000000000000000000000000000000000000000600082015250565b600061317c600783612235565b915061318782613146565b602082019050919050565b60006040820190506131a76000830184613137565b81810360208301526131b88161316f565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006132026131fd84611fb3565b611bc3565b9050808382526020820190506020840283018581111561322557613224611d9d565b5b835b8181101561324e578061323a8882612c25565b845260208401935050602081019050613227565b5050509392505050565b600082601f83011261326d5761326c611c23565b5b815161327d8482602086016131ef565b91505092915050565b60006020828403121561329c5761329b611b43565b5b600082015167ffffffffffffffff8111156132ba576132b9611b48565b5b6132c684828501613258565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000613313826132fe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613346576133456132cf565b5b600182019050919050565b60006020828403121561336757613366611b43565b5b600061337584828501612c3a565b91505092915050565b6000613389826132fe565b9150613394836132fe565b9250828210156133a7576133a66132cf565b5b828203905092915050565b60006133bd826132fe565b91506133c8836132fe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156133fd576133fc6132cf565b5b828201905092915050565b60006020828403121561341e5761341d611b43565b5b600082015167ffffffffffffffff81111561343c5761343b611b48565b5b61344884828501612ea1565b91505092915050565b60006040820190506134666000830185612fa8565b81810360208301526134788184612279565b90509392505050565b60006020828403121561349757613496611b43565b5b60006134a584828501611c0e565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126134da576134d96134ae565b5b80840192508235915067ffffffffffffffff8211156134fc576134fb6134b3565b5b602083019250602082023603831315613518576135176134b8565b5b509250929050565b6000819050919050565b60006135396020840184611d5c565b905092915050565b6000602082019050919050565b600061355a8385612fb7565b935061356582613520565b8060005b8581101561359e5761357b828461352a565b6135858882612626565b975061359083613541565b925050600181019050613569565b5085925050509392505050565b60006060820190506135c06000830187612fa8565b6135cd6020830186612ac3565b81810360408301526135e081848661354e565b905095945050505050565b600060208201905081810360008301526136058184612b23565b905092915050565b6000819050919050565b613628613623826125bb565b61360d565b82525050565b600061363a8284613617565b60108201915081905092915050565b50565b60006136596000836130d3565b915061366482613649565b600082019050919050565b600061367a8261364c565b9150819050919050565b60006040820190506136996000830185613137565b81810360208301526136ab8184612279565b90509392505050565b600060408201905081810360008301526136ce8185612b92565b905081810360208301526136e28184612279565b90509392505050565b60006136f782846130de565b915081905092915050565b60006040820190506137176000830185612ac3565b81810360208301526137298184612b92565b90509392505050565b600067ffffffffffffffff82111561374d5761374c611b63565b5b602082029050602081019050919050565b600061377161376c84613732565b611bc3565b9050808382526020820190506020840283018581111561379457613793611d9d565b5b835b818110156137db57805167ffffffffffffffff8111156137b9576137b8611c23565b5b8086016137c68982612d6b565b85526020850194505050602081019050613796565b5050509392505050565b600082601f8301126137fa576137f9611c23565b5b815161380a84826020860161375e565b91505092915050565b60006020828403121561382957613828611b43565b5b600082015167ffffffffffffffff81111561384757613846611b48565b5b613853848285016137e5565b91505092915050565b60006040820190506138716000830185612fa8565b81810360208301526138838184612b92565b90509392505050565b60006080820190506138a16000830187612ac3565b81810360208301526138b38186612fc8565b905081810360408301526138c78185612fc8565b905081810360608301526138db8184612b92565b905095945050505050565b6000602082840312156138fc576138fb611b43565b5b600082015167ffffffffffffffff81111561391a57613919611b48565b5b61392684828501612d6b565b91505092915050565b60006060820190506139446000830186612fa8565b81810360208301526139568185612b92565b9050818103604083015261396a8184612279565b9050949350505050565b6000606082019050818103600083015261398e8186612a0c565b905061399d6020830185612fa8565b81810360408301526139af8184612b92565b9050949350505050565b600080604083850312156139d0576139cf611b43565b5b600083015167ffffffffffffffff8111156139ee576139ed611b48565b5b6139fa85828601612ea1565b925050602083015167ffffffffffffffff811115613a1b57613a1a611b48565b5b613a2785828601612ea1565b915050925092905056fea26469706673582212203c51706225535637ef98efd2a32418cc2fb3a866240730a7388be00b96dba8b664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1880,
        "contract": "contracts/standard_peekers/bids.sol:EthBlockBidSenderContract",
        "label": "boostRelayUrl",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}