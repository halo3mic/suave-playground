{
  "address": "0x07e60844bCd83B78b1991A3228E749B09AF9E215",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "boostRelayUrl_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "PeekerReverted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "SuaveError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "SuaveErrorWithData",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.DataId",
          "name": "dataId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "allowedPeekers",
          "type": "address[]"
        }
      ],
      "name": "DataRecordEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "extra",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockLimit",
          "type": "uint256"
        }
      ],
      "name": "RequestAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "egp",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "blockHash",
          "type": "string"
        }
      ],
      "name": "RequestIncluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RequestRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "extra",
              "type": "bytes"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        }
      ],
      "name": "buildBlock",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "builderCall",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "includedRequestB",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "pendingRemovalsB",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ConfidentialControl.UnlockArgs",
          "name": "uArgs",
          "type": "tuple"
        }
      ],
      "name": "buildCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "builder",
      "outputs": [
        {
          "internalType": "contract Builder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "blockLimit",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "extra",
          "type": "string"
        }
      ],
      "name": "buyAd",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "extra",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "blockLimit",
              "type": "uint256"
            },
            {
              "internalType": "Suave.DataId",
              "name": "paymentBidId",
              "type": "bytes16"
            }
          ],
          "internalType": "struct BlockAdAuctionV2.AdRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ConfidentialControl.UnlockArgs",
          "name": "uArgs",
          "type": "tuple"
        }
      ],
      "name": "buyAdCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nextHash",
          "type": "bytes32"
        },
        {
          "internalType": "Suave.DataId",
          "name": "sBidId",
          "type": "bytes16"
        }
      ],
      "name": "ccCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confidentialConstructor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.DataId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.DataId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.DataRecord",
          "name": "dataRecord",
          "type": "tuple"
        }
      ],
      "name": "emitDataRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchConfidentialBundleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "extra",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "blockLimit",
          "type": "uint256"
        },
        {
          "internalType": "Suave.DataId",
          "name": "paymentBidId",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x62c62eb5d03764212d76e850a60f3c6c8490f17305895d57ef2c5220952927ee",
  "receipt": {
    "to": null,
    "from": "0x16f2Aa8dF055b6e672b93Ded41FecCCabAB565B0",
    "contractAddress": "0x07e60844bCd83B78b1991A3228E749B09AF9E215",
    "transactionIndex": 0,
    "gasUsed": "7437245",
    "logsBloom": "0x
    "blockHash": "0xc8e5fc13d92177080b05855c5842872217480e1d995dd0b2c6e0ac42814ba7c7",
    "transactionHash": "0x62c62eb5d03764212d76e850a60f3c6c8490f17305895d57ef2c5220952927ee",
    "logs": [],
    "blockNumber": 904301,
    "cumulativeGasUsed": "7437245",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://0xafa4c6985aa049fb79dd37010438cfebeb0f2bd42b115b89dd678dab0670c1de38da0c4e9138c9290a398ecd9a0b3110@boost-relay-goerli.flashbots.net"
  ],
  "numDeployments": 2,
  "solcInputHash": "e084a7fc968f31c2b48012eddbdcd1ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"boostRelayUrl_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"PeekerReverted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"SuaveError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SuaveErrorWithData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.DataId\",\"name\":\"dataId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"}],\"name\":\"DataRecordEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"}],\"name\":\"RequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"egp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"blockHash\",\"type\":\"string\"}],\"name\":\"RequestIncluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RequestRemoved\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extra\",\"type\":\"bytes\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"buildBlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"builderCall\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"includedRequestB\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pendingRemovalsB\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ConfidentialControl.UnlockArgs\",\"name\":\"uArgs\",\"type\":\"tuple\"}],\"name\":\"buildCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"builder\",\"outputs\":[{\"internalType\":\"contract Builder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blockLimit\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"}],\"name\":\"buyAd\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"},{\"internalType\":\"Suave.DataId\",\"name\":\"paymentBidId\",\"type\":\"bytes16\"}],\"internalType\":\"struct BlockAdAuctionV2.AdRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ConfidentialControl.UnlockArgs\",\"name\":\"uArgs\",\"type\":\"tuple\"}],\"name\":\"buyAdCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"},{\"internalType\":\"Suave.DataId\",\"name\":\"sBidId\",\"type\":\"bytes16\"}],\"name\":\"ccCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confidentialConstructor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.DataId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.DataId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.DataRecord\",\"name\":\"dataRecord\",\"type\":\"tuple\"}],\"name\":\"emitDataRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchConfidentialBundleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"},{\"internalType\":\"Suave.DataId\",\"name\":\"paymentBidId\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/blockad/BlockAdV2.sol\":\"BlockAdAuctionV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/blockad/BlockAdV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { AnyBundleContract, Suave } from \\\"../standard_peekers/bids.sol\\\";\\nimport { ConfidentialControl } from \\\"./lib/ConfidentialControl.sol\\\";\\nimport { DynamicUintArray } from \\\"./lib/Utils.sol\\\";\\nimport { Builder } from \\\"./lib/Builder.sol\\\";\\n\\n\\ncontract BlockAdAuctionV2 is AnyBundleContract, ConfidentialControl {\\n\\tusing DynamicUintArray for bytes;\\n\\n\\tstruct AdRequest {\\n\\t\\tuint id;\\n\\t\\tstring extra;\\n\\t\\tuint blockLimit;\\n\\t\\tSuave.DataId paymentBidId;\\n\\t}\\n\\tstruct Offer {\\n\\t\\tuint id;\\n\\t\\tstring extra;\\n\\t\\tuint64 egp;\\n\\t\\tbytes paymentBundle;\\n\\t}\\n\\n\\tevent RequestAdded(uint id, string extra, uint blockLimit);\\n\\tevent RequestRemoved(uint id);\\n\\tevent RequestIncluded(uint id, uint64 egp, string blockHash);\\n\\n\\tstring internal constant PB_NAMESPACE = \\\"blockad:v0:paymentBundle\\\";\\n\\tstring internal constant EB_NAMESPACE = \\\"default:v0:ethBundles\\\";\\n\\tstring internal constant EB_SIM_NAMESPACE = \\\"default:v0:ethBundleSimResults\\\";\\n\\tBuilder public builder;\\n\\tAdRequest[] public requests;\\n\\tuint public nextId;\\n\\n\\t/**********************************************************************\\n\\t *                           \\u26d3\\ufe0f ON-CHAIN METHODS                       *\\n\\t ***********************************************************************/\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tbuilder = new Builder(boostRelayUrl_);\\n\\t}\\n\\n\\tfunction buyAdCallback(AdRequest calldata request, UnlockArgs calldata uArgs) external unlock(uArgs) {\\n\\t\\trequests.push(request);\\n\\t\\tnextId++;\\n\\t\\temit RequestAdded(request.id, request.extra, request.blockLimit);\\n\\t}\\n\\n\\tfunction buildCallback(\\n\\t\\tbytes memory builderCall,\\n\\t\\tbytes memory includedRequestB,\\n\\t\\tbytes memory pendingRemovalsB,\\n\\t\\tUnlockArgs calldata uArgs\\n\\t) external unlock(uArgs) {\\n\\t\\tif (pendingRemovalsB.length > 0) {\\n\\t\\t\\tremoveRequests(pendingRemovalsB.export());\\n\\t\\t}\\n\\t\\tstring memory blockHash = handleBuilderCallback(address(builder), builderCall);\\n\\t\\thandleIncludedRequest(includedRequestB, blockHash);\\n\\t}\\n\\n\\tfunction requestsLength() public view returns (uint) {\\n\\t\\treturn requests.length;\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udd12 CONFIDENTIAL METHODS                      *\\n\\t ***********************************************************************/\\n\\n\\tfunction confidentialConstructor() public view override onlyConfidential returns (bytes memory) {\\n\\t\\treturn ConfidentialControl.confidentialConstructor();\\n\\t}\\n\\n\\tfunction buyAd(uint64 blockLimit, string memory extra) external onlyConfidential returns (bytes memory) {\\n\\t\\tbytes memory paymentBundle = this.fetchConfidentialBundleData();\\n\\t\\t(,uint64 egp) = simulateBundleSafe(paymentBundle, true);\\n\\t\\tcrequire(egp > 0, \\\"egp too low\\\");\\n\\t\\tSuave.DataId paymentBidId = storePaymentBundle(paymentBundle);\\n\\t\\tAdRequest memory request = AdRequest(nextId, extra, blockLimit, paymentBidId);\\n\\t\\treturn abi.encodeWithSelector(this.buyAdCallback.selector, request, getUnlockPair());\\n\\t}\\n\\n\\tfunction buildBlock(\\n\\t\\tSuave.BuildBlockArgs memory blockArgs,\\n\\t\\tuint64 blockHeight\\n\\t) public onlyConfidential returns (bytes memory) {\\n\\t\\tcrequire(requests.length > 0, \\\"No requests\\\");\\n\\t\\t(Offer memory bestOffer, bytes memory removals) = filterOffers(blockHeight);\\n\\t\\tcrequire(bestOffer.egp > 0, \\\"No valid offers\\\");\\n\\n\\t\\tstoreBundleInPool(blockHeight, bestOffer);\\n\\t\\tblockArgs.extra = bytes(bestOffer.extra);\\n\\t\\t// Expect flow is ordered by egp; if one wants to fail payment they need higher egp\\n\\t\\tbytes memory externalCallback = builder.buildFromPool(blockArgs, blockHeight);\\n\\n\\t\\treturn\\n\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\tthis.buildCallback.selector,\\n\\t\\t\\t\\texternalCallback,\\n\\t\\t\\t\\tabi.encode(bestOffer.id, bestOffer.egp),\\n\\t\\t\\t\\tremovals,\\n\\t\\t\\t\\tgetUnlockPair()\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udee0\\ufe0f INTERNAL METHODS                          *\\n\\t ***********************************************************************/\\n\\n\\tfunction removeRequests(uint[] memory pendingRemovals) internal {\\n\\t\\t// Assume that the pendingRemovals were added in ascending order\\n\\t\\t// Assume that pendingRemovals.length <= requests.length\\n\\t\\tfor (uint i = pendingRemovals.length; i > 0; --i) {\\n\\t\\t\\tuint indexToRemove = pendingRemovals[i - 1];\\n\\t\\t\\tuint requestId = requests[indexToRemove].id;\\n\\t\\t\\tif (indexToRemove < requests.length - 1) {\\n\\t\\t\\t\\trequests[indexToRemove] = requests[requests.length - 1];\\n\\t\\t\\t}\\n\\t\\t\\trequests.pop();\\n\\t\\t\\temit RequestRemoved(requestId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction handleIncludedRequest(bytes memory includedRequestB, string memory blockHash) internal {\\n\\t\\t(uint id, uint64 egp) = abi.decode(includedRequestB, (uint, uint64));\\n\\t\\temit RequestIncluded(id, egp, blockHash);\\n\\t}\\n\\n\\tfunction handleBuilderCallback(address target, bytes memory data) internal returns (string memory) {\\n\\t\\t(bool success, bytes memory res) = target.call(data);\\n\\t\\tcrequire(success, \\\"External call failed\\\");\\n\\t\\treturn abi.decode(res, (string));\\n\\t}\\n\\n\\tfunction storePaymentBundle(bytes memory paymentBundle) internal view returns (Suave.DataId) {\\n\\t\\taddress[] memory peekers = new address[](1);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tSuave.DataRecord memory paymentBid = Suave.newDataRecord(0, peekers, peekers, PB_NAMESPACE);\\n\\t\\tSuave.confidentialStore(paymentBid.id, PB_NAMESPACE, paymentBundle);\\n\\t\\treturn paymentBid.id;\\n\\t}\\n\\n\\tfunction filterOffers(uint blockHeight) internal view returns (Offer memory bestOffer, bytes memory removals) {\\n\\t\\tfor (uint i; i < requests.length; ++i) {\\n\\t\\t\\tAdRequest memory request = requests[i];\\n\\t\\t\\tif (request.blockLimit < blockHeight) {\\n\\t\\t\\t\\tremovals = removals.append(i);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tbytes memory paymentBundle = Suave.confidentialRetrieve(request.paymentBidId, PB_NAMESPACE);\\n\\t\\t\\t(bool success, uint64 egp) = simulateBundleSafe(paymentBundle, false);\\n\\t\\t\\tif (!success || egp == 0) {\\n\\t\\t\\t\\tremovals = removals.append(i);\\n\\t\\t\\t} else if (egp > bestOffer.egp) {\\n\\t\\t\\t\\tbestOffer = Offer(request.id, request.extra, egp, paymentBundle);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction storeBundleInPool(uint64 blockHeight, Offer memory bestOffer) internal view {\\n\\t\\taddress[] memory allowedPeekers = new address[](3);\\n\\t\\tallowedPeekers[0] = address(builder);\\n\\t\\tallowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\t\\tallowedPeekers[2] = address(this);\\n\\t\\tSuave.DataRecord memory paymentBundleBid = Suave.newDataRecord(blockHeight, allowedPeekers, allowedPeekers, EB_NAMESPACE);\\n\\t\\tSuave.confidentialStore(paymentBundleBid.id, EB_NAMESPACE, bestOffer.paymentBundle);\\n\\t\\tSuave.confidentialStore(paymentBundleBid.id, EB_SIM_NAMESPACE, abi.encode(bestOffer.egp));\\n\\t}\\n}\\n\",\"keccak256\":\"0x41040bc4e82e930540797daa6d4b9fd5fe60500a2620fb090f8af0d9dea99930\",\"license\":\"MIT\"},\"contracts/blockad/lib/Builder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { EthBlockContract, Suave } from \\\"../../standard_peekers/bids.sol\\\";\\nimport { SuaveContract } from \\\"./SuaveContract.sol\\\";\\n\\n\\ncontract Builder is EthBlockContract, SuaveContract {\\n\\tstring constant BB_NAMESPACE = \\\"blockad:v0:builderBid\\\";\\n\\tstring boostRelayUrl;\\n\\n\\tevent RelaySubmission(bytes32 bidId);\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tboostRelayUrl = boostRelayUrl_;\\n\\t}\\n\\n\\tfunction buildAndEmitCallback(string memory blockHash, bytes32 id) external returns (string memory) {\\n\\t\\temit RelaySubmission(id);\\n\\t\\treturn blockHash;\\n\\t}\\n\\n\\tfunction buildAndEmit(\\n\\t\\tSuave.BuildBlockArgs memory blockArgs,\\n\\t\\tuint64 blockHeight,\\n\\t\\tSuave.DataId[] memory bids,\\n\\t\\tstring memory namespace\\n\\t) public virtual override onlyConfidential returns (bytes memory) {\\n\\t\\t(Suave.DataRecord memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\t\\tstoreBuilderBid(blockBid.id, builderBid);\\n\\t\\tsubmitToRelay(builderBid);\\n\\t\\tstring memory blockHash = extractBlockHash(builderBid, blockArgs.slot);\\n\\t\\treturn abi.encodeWithSelector(this.buildAndEmitCallback.selector, blockHash, keccak256(builderBid));\\n\\t}\\n\\n\\tfunction submitBlock(uint slot) external view onlyConfidential returns (bytes memory) {\\n\\t\\tbytes memory builderBid = Suave.confidentialInputs();\\n\\t\\tsubmitToRelay(builderBid);\\n\\t\\tstring memory blockHash = extractBlockHash(builderBid, slot);\\n\\t\\treturn abi.encodeWithSelector(this.buildAndEmitCallback.selector, blockHash, keccak256(builderBid));\\n\\t}\\n\\n\\tfunction submitToRelay(bytes memory builderBid) internal view {\\n\\t\\t(bool success, bytes memory data) = Suave.SUBMIT_ETH_BLOCK_BID_TO_RELAY\\n\\t\\t\\t.staticcall(abi.encode(boostRelayUrl, builderBid));\\n\\t\\tif (!success) {\\n\\t\\t\\trevert SuaveErrorWithData(string(data), builderBid);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction storeBuilderBid(Suave.DataId blockBidId, bytes memory builderBid) internal view {\\n\\t\\taddress[] memory peekers = new address[](1);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tSuave.confidentialStore(blockBidId, BB_NAMESPACE, builderBid);\\n\\t}\\n\\n\\t// Extract block-hash from stringified SubmitBlockRequest JSON object - method will fail if the struct changes!\\n\\tfunction extractBlockHash(bytes memory builderBid, uint slot) public pure returns (string memory) {\\n\\t\\tuint resultBytesLen = 64;\\n\\t\\tuint offset = 121 + decLen(slot);\\n\\t\\tbytes memory result = new bytes(resultBytesLen);\\n\\t\\tassembly {\\n\\t\\t\\tfor { let i:=32 } lt(i, add(resultBytesLen, 32)) { i:=add(i, 32) } {\\n\\t\\t\\t\\tmstore(add(result, i), mload(add(builderBid, add(offset, i))))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\tfunction decLen(uint num) internal pure returns (uint count) {\\n\\t\\tassembly {\\n\\t\\t\\tfor { let dec := 10 } true { dec := mul(dec, 10) } {\\n\\t\\t\\t\\tcount := add(count, 1)\\n\\t\\t\\t\\tswitch lt(num, dec)\\n\\t\\t\\t\\t\\tcase 1 { break }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0xef71aa4ebf2e13c292016769e52df249ac1c0617a9aaeb47087a566f934639ef\",\"license\":\"MIT\"},\"contracts/blockad/lib/ConfidentialControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { SuaveContract, Suave } from \\\"./SuaveContract.sol\\\";\\n\\n\\nabstract contract ConfidentialControl is SuaveContract {\\n\\tstruct UnlockArgs {\\n\\t\\tbytes32 key;\\n\\t\\tbytes32 nextHash;\\n\\t}\\n\\n\\tmodifier unlock(UnlockArgs calldata unlockPair) {\\n\\t\\tcrequire(isValidKey(unlockPair.key), \\\"Invalid key\\\");\\n\\t\\t_;\\n\\t\\tpresentHash = unlockPair.nextHash;\\n\\t\\tnonce++;\\n\\t}\\n\\n\\tstring internal constant S_NAMESPACE = \\\"blockad:v0:secret\\\";\\n\\tSuave.DataId internal secretBidId;\\n\\tbytes32 internal presentHash;\\n\\tuint internal nonce;\\n\\n\\t/**********************************************************************\\n\\t *                           \\u26d3\\ufe0f ON-CHAIN METHODS                       *\\n\\t ***********************************************************************/\\n\\n\\tfunction ccCallback(bytes32 nextHash, Suave.DataId sBidId) external {\\n\\t\\tcrequire(!isInitialized(), \\\"Already initialized\\\");\\n\\t\\tpresentHash = nextHash;\\n\\t\\tsecretBidId = sBidId;\\n\\t}\\n\\n\\tfunction isInitialized() public view returns (bool) {\\n\\t\\treturn presentHash != 0;\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udd12 CONFIDENTIAL METHODS                      *\\n\\t ***********************************************************************/\\n\\n\\tfunction confidentialConstructor() public view virtual onlyConfidential returns (bytes memory) {\\n\\t\\tcrequire(!isInitialized(), \\\"Already initialized\\\");\\n\\t\\tbytes memory secret = Suave.confidentialInputs();\\n\\t\\tSuave.DataId sBidId = storeSecret(secret);\\n\\t\\tbytes32 nextHash = makeHash(abi.decode(secret, (bytes32)), nonce);\\n\\t\\treturn abi.encodeWithSelector(this.ccCallback.selector, nextHash, sBidId);\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udee0\\ufe0f INTERNAL METHODS                          *\\n\\t ***********************************************************************/\\n\\n\\tfunction storeSecret(bytes memory secret) internal view returns (Suave.DataId) {\\n\\t\\taddress[] memory peekers = new address[](3);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tpeekers[1] = Suave.FETCH_DATA_RECORDS;\\n\\t\\tpeekers[2] = Suave.CONFIDENTIAL_RETRIEVE;\\n\\t\\tSuave.DataRecord memory secretBid = Suave.newDataRecord(0, peekers, peekers, S_NAMESPACE);\\n\\t\\tSuave.confidentialStore(secretBid.id, S_NAMESPACE, secret);\\n\\t\\treturn secretBid.id;\\n\\t}\\n\\n\\tfunction isValidKey(bytes32 key) internal view returns (bool) {\\n\\t\\treturn keccak256(abi.encode(key)) == presentHash;\\n\\t}\\n\\n\\tfunction getUnlockPair() internal view returns (UnlockArgs memory) {\\n\\t\\treturn UnlockArgs(getKey(nonce), getHash(nonce + 1));\\n\\t}\\n\\n\\tfunction getHash(uint _nonce) internal view returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(getKey(_nonce)));\\n\\t}\\n\\n\\tfunction getKey(uint _nonce) internal view returns (bytes32) {\\n\\t\\treturn makeKey(getSecret(), _nonce);\\n\\t}\\n\\n\\tfunction makeHash(bytes32 secret, uint _nonce) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(makeKey(secret, _nonce)));\\n\\t}\\n\\n\\tfunction makeKey(bytes32 secret, uint _nonce) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(secret, _nonce));\\n\\t}\\n\\n\\tfunction getSecret() internal view returns (bytes32) {\\n\\t\\tbytes memory secretB = Suave.confidentialRetrieve(secretBidId, S_NAMESPACE);\\n\\t\\treturn abi.decode(secretB, (bytes32));\\n\\t}\\n}\\n\",\"keccak256\":\"0x49ac0b4b3dbbe2e58f29454ae8586b6bf97105ad52d2b001867b4930da959217\",\"license\":\"MIT\"},\"contracts/blockad/lib/SuaveContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { Suave } from \\\"../../standard_peekers/bids.sol\\\";\\n\\n\\nabstract contract SuaveContract {\\n\\terror SuaveError(string message);\\n\\terror SuaveErrorWithData(string message, bytes data);\\n\\n\\tmodifier onlyConfidential() {\\n\\t\\tcrequire(Suave.isConfidential(), \\\"Not confidential\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction simulateBundleSafe(bytes memory bundle, bool doRevert) internal view returns (bool valid, uint64 egp) {\\n\\t\\t(bool success, bytes memory d) = Suave.SIMULATE_BUNDLE.staticcall{ gas: 20_000 }(abi.encode(bundle));\\n\\t\\tcrequire(!doRevert || success, string(d));\\n\\t\\tif (success) {\\n\\t\\t\\treturn (true, abi.decode(d, (uint64)));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction crequire(bool condition, string memory message) internal pure {\\n\\t\\tif (!condition) {\\n\\t\\t\\trevert SuaveError(message);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x64eb01469afe18f29050571acd52ee35faca1da2c00a87e01d5ea0fdbcdf4bec\",\"license\":\"MIT\"},\"contracts/blockad/lib/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n\\nlibrary DynamicUintArray {\\n\\tfunction append(bytes memory a, uint e) internal pure returns (bytes memory) {\\n\\t\\treturn bytes.concat(a, TypeConversion.toBytes(e));\\n\\t}\\n\\n\\tfunction export(bytes memory a) internal pure returns (uint[] memory) {\\n\\t\\treturn TypeConversion.toUints(a);\\n\\t}\\n}\\n\\nlibrary TypeConversion {\\n\\tfunction toBytes(uint x) internal pure returns (bytes memory y) {\\n\\t\\ty = new bytes(32);\\n\\t\\tassembly {\\n\\t\\t\\tmstore(add(y, 32), x)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction toUint(bytes memory x, uint offset) internal pure returns (uint y) {\\n\\t\\tassembly {\\n\\t\\t\\ty := mload(add(x, offset))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction toUints(bytes memory xs) internal pure returns (uint[] memory ys) {\\n\\t\\tys = new uint[](xs.length / 32);\\n\\t\\tfor (uint i = 0; i < xs.length / 32; i++) {\\n\\t\\t\\tys[i] = toUint(xs, i * 32 + 32);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xec09eed9c1d6d24228b0473b9614be28b428ed832808ac3a75ffbcb444ac54af\",\"license\":\"MIT\"},\"contracts/libraries/Suave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.8;\\n\\nlibrary Suave {\\n    error PeekerReverted(address, bytes);\\n\\n    type DataId is bytes16;\\n\\n    struct BuildBlockArgs {\\n        uint64 slot;\\n        bytes proposerPubkey;\\n        bytes32 parent;\\n        uint64 timestamp;\\n        address feeRecipient;\\n        uint64 gasLimit;\\n        bytes32 random;\\n        Withdrawal[] withdrawals;\\n        bytes extra;\\n    }\\n\\n    struct DataRecord {\\n        DataId id;\\n        DataId salt;\\n        uint64 decryptionCondition;\\n        address[] allowedPeekers;\\n        address[] allowedStores;\\n        string version;\\n    }\\n\\n    struct HttpRequest {\\n        string url;\\n        string method;\\n        string[] headers;\\n        bytes body;\\n    }\\n\\n    struct Withdrawal {\\n        uint64 index;\\n        uint64 validator;\\n        address Address;\\n        uint64 amount;\\n    }\\n\\n    address public constant ANYALLOWED = 0xC8df3686b4Afb2BB53e60EAe97EF043FE03Fb829;\\n\\n    address public constant IS_CONFIDENTIAL_ADDR = 0x0000000000000000000000000000000042010000;\\n\\n    address public constant BUILD_ETH_BLOCK = 0x0000000000000000000000000000000042100001;\\n\\n    address public constant CONFIDENTIAL_INPUTS = 0x0000000000000000000000000000000042010001;\\n\\n    address public constant CONFIDENTIAL_RETRIEVE = 0x0000000000000000000000000000000042020001;\\n\\n    address public constant CONFIDENTIAL_STORE = 0x0000000000000000000000000000000042020000;\\n\\n    address public constant DO_HTTPREQUEST = 0x0000000000000000000000000000000043200002;\\n\\n    address public constant ETHCALL = 0x0000000000000000000000000000000042100003;\\n\\n    address public constant EXTRACT_HINT = 0x0000000000000000000000000000000042100037;\\n\\n    address public constant FETCH_DATA_RECORDS = 0x0000000000000000000000000000000042030001;\\n\\n    address public constant FILL_MEV_SHARE_BUNDLE = 0x0000000000000000000000000000000043200001;\\n\\n    address public constant NEW_DATA_RECORD = 0x0000000000000000000000000000000042030000;\\n\\n    address public constant SIGN_ETH_TRANSACTION = 0x0000000000000000000000000000000040100001;\\n\\n    address public constant SIMULATE_BUNDLE = 0x0000000000000000000000000000000042100000;\\n\\n    address public constant SUBMIT_BUNDLE_JSON_RPC = 0x0000000000000000000000000000000043000001;\\n\\n    address public constant SUBMIT_ETH_BLOCK_BID_TO_RELAY = 0x0000000000000000000000000000000042100002;\\n\\n    // Returns whether execution is off- or on-chain\\n    function isConfidential() internal view returns (bool b) {\\n        (bool success, bytes memory isConfidentialBytes) = IS_CONFIDENTIAL_ADDR.staticcall(\\\"\\\");\\n        if (!success) {\\n            revert PeekerReverted(IS_CONFIDENTIAL_ADDR, isConfidentialBytes);\\n        }\\n        assembly {\\n            // Load the length of data (first 32 bytes)\\n            let len := mload(isConfidentialBytes)\\n            // Load the data after 32 bytes, so add 0x20\\n            b := mload(add(isConfidentialBytes, 0x20))\\n        }\\n    }\\n\\n    function buildEthBlock(BuildBlockArgs memory blockArgs, DataId dataId, string memory namespace)\\n        internal\\n        view\\n        returns (bytes memory, bytes memory)\\n    {\\n        (bool success, bytes memory data) = BUILD_ETH_BLOCK.staticcall(abi.encode(blockArgs, dataId, namespace));\\n        if (!success) {\\n            revert PeekerReverted(BUILD_ETH_BLOCK, data);\\n        }\\n\\n        return abi.decode(data, (bytes, bytes));\\n    }\\n\\n    function confidentialInputs() internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_INPUTS.staticcall(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_INPUTS, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialRetrieve(DataId dataId, string memory key) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_RETRIEVE.staticcall(abi.encode(dataId, key));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_RETRIEVE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStore(DataId dataId, string memory key, bytes memory data1) internal view {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE.staticcall(abi.encode(dataId, key, data1));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE, data);\\n        }\\n    }\\n\\n    function doHTTPRequest(HttpRequest memory request) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = DO_HTTPREQUEST.staticcall(abi.encode(request));\\n        if (!success) {\\n            revert PeekerReverted(DO_HTTPREQUEST, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function ethcall(address contractAddr, bytes memory input1) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = ETHCALL.staticcall(abi.encode(contractAddr, input1));\\n        if (!success) {\\n            revert PeekerReverted(ETHCALL, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function extractHint(bytes memory bundleData) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = EXTRACT_HINT.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(EXTRACT_HINT, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function fetchDataRecords(uint64 cond, string memory namespace) internal view returns (DataRecord[] memory) {\\n        (bool success, bytes memory data) = FETCH_DATA_RECORDS.staticcall(abi.encode(cond, namespace));\\n        if (!success) {\\n            revert PeekerReverted(FETCH_DATA_RECORDS, data);\\n        }\\n\\n        return abi.decode(data, (DataRecord[]));\\n    }\\n\\n    function fillMevShareBundle(DataId dataId) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = FILL_MEV_SHARE_BUNDLE.staticcall(abi.encode(dataId));\\n        if (!success) {\\n            revert PeekerReverted(FILL_MEV_SHARE_BUNDLE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function newDataRecord(\\n        uint64 decryptionCondition,\\n        address[] memory allowedPeekers,\\n        address[] memory allowedStores,\\n        string memory dataType\\n    ) internal view returns (DataRecord memory) {\\n        (bool success, bytes memory data) =\\n            NEW_DATA_RECORD.staticcall(abi.encode(decryptionCondition, allowedPeekers, allowedStores, dataType));\\n        if (!success) {\\n            revert PeekerReverted(NEW_DATA_RECORD, data);\\n        }\\n\\n        return abi.decode(data, (DataRecord));\\n    }\\n\\n    function signEthTransaction(bytes memory txn, string memory chainId, string memory signingKey)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory data) = SIGN_ETH_TRANSACTION.staticcall(abi.encode(txn, chainId, signingKey));\\n        if (!success) {\\n            revert PeekerReverted(SIGN_ETH_TRANSACTION, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function simulateBundle(bytes memory bundleData) internal view returns (uint64) {\\n        (bool success, bytes memory data) = SIMULATE_BUNDLE.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_BUNDLE, data);\\n        }\\n\\n        return abi.decode(data, (uint64));\\n    }\\n\\n    function submitBundleJsonRPC(string memory url, string memory method, bytes memory params)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_BUNDLE_JSON_RPC.staticcall(abi.encode(url, method, params));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_BUNDLE_JSON_RPC, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function submitEthBlockBidToRelay(string memory relayUrl, bytes memory builderBid)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_ETH_BLOCK_BID_TO_RELAY.staticcall(abi.encode(relayUrl, builderBid));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_ETH_BLOCK_BID_TO_RELAY, data);\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0x8eccbbda71f83d85393e84b4b76a3604e0a9aa261915218626c9a44f0dcfc326\",\"license\":\"UNLICENSED\"},\"contracts/standard_peekers/bids.sol\":{\"content\":\"pragma solidity ^0.8.8;\\n\\nimport \\\"../libraries/Suave.sol\\\";\\n\\ncontract AnyBundleContract {\\n    event DataRecordEvent(Suave.DataId dataId, uint64 decryptionCondition, address[] allowedPeekers);\\n\\n    function fetchConfidentialBundleData() public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        bytes memory confidentialInputs = Suave.confidentialInputs();\\n        return abi.decode(confidentialInputs, (bytes));\\n    }\\n\\n    function emitDataRecord(Suave.DataRecord calldata dataRecord) public {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n    }\\n}\\n\\ncontract BundleContract is AnyBundleContract {\\n    function newBundle(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores\\n    ) external payable returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        bytes memory bundleData = this.fetchConfidentialBundleData();\\n\\n        uint64 egp = Suave.simulateBundle(bundleData);\\n\\n        Suave.DataRecord memory dataRecord =\\n            Suave.newDataRecord(decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"default:v0:ethBundles\\\");\\n\\n        Suave.confidentialStore(dataRecord.id, \\\"default:v0:ethBundles\\\", bundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"default:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\n        return emitAndReturn(dataRecord, bundleData);\\n    }\\n\\n    function emitAndReturn(Suave.DataRecord memory dataRecord, bytes memory) internal virtual returns (bytes memory) {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(dataRecord));\\n    }\\n}\\n\\ncontract EthBundleSenderContract is BundleContract {\\n    string[] public builderUrls;\\n\\n    constructor(string[] memory builderUrls_) {\\n        builderUrls = builderUrls_;\\n    }\\n\\n    function emitAndReturn(Suave.DataRecord memory dataRecord, bytes memory bundleData)\\n        internal\\n        virtual\\n        override\\n        returns (bytes memory)\\n    {\\n        for (uint256 i = 0; i < builderUrls.length; i++) {\\n            Suave.submitBundleJsonRPC(builderUrls[i], \\\"eth_sendBundle\\\", bundleData);\\n        }\\n\\n        return BundleContract.emitAndReturn(dataRecord, bundleData);\\n    }\\n}\\n\\ncontract MevShareContract is AnyBundleContract {\\n    event HintEvent(Suave.DataId dataId, bytes hint);\\n\\n    event MatchEvent(Suave.DataId matchDataId, bytes matchHint);\\n\\n    function newTransaction(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores\\n    ) external payable returns (bytes memory) {\\n        // 0. check confidential execution\\n        require(Suave.isConfidential());\\n\\n        // 1. fetch bundle data\\n        bytes memory bundleData = this.fetchConfidentialBundleData();\\n\\n        // 2. sim bundle\\n        uint64 egp = Suave.simulateBundle(bundleData);\\n\\n        // 3. extract hint\\n        bytes memory hint = Suave.extractHint(bundleData);\\n\\n        // // 4. store bundle and sim results\\n        Suave.DataRecord memory dataRecord = Suave.newDataRecord(\\n            decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"mevshare:v0:unmatchedBundles\\\"\\n        );\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundles\\\", bundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(egp));\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit HintEvent(dataRecord.id, hint);\\n\\n        // // 5. return \\\"callback\\\" to emit hint onchain\\n        return bytes.concat(this.emitDataRecordAndHint.selector, abi.encode(dataRecord, hint));\\n    }\\n\\n    function emitDataRecordAndHint(Suave.DataRecord calldata dataRecord, bytes memory hint) public {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit HintEvent(dataRecord.id, hint);\\n    }\\n\\n    function newMatch(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores,\\n        Suave.DataId sharedataId\\n    ) external payable returns (bytes memory) {\\n        // WARNING : this function will copy the original mev share bid\\n        // into a new key with potentially different permsissions\\n\\n        require(Suave.isConfidential());\\n        // 1. fetch confidential data\\n        bytes memory matchBundleData = this.fetchConfidentialBundleData();\\n\\n        // 2. sim match alone for validity\\n        uint64 egp = Suave.simulateBundle(matchBundleData);\\n\\n        // 3. extract hint\\n        bytes memory matchHint = Suave.extractHint(matchBundleData);\\n\\n        Suave.DataRecord memory dataRecord = Suave.newDataRecord(\\n            decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"mevshare:v0:matchDataRecords\\\"\\n        );\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundles\\\", matchBundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(0));\\n\\n        //4. merge data records\\n        Suave.DataId[] memory dataRecords = new Suave.DataId[](2);\\n        dataRecords[0] = sharedataId;\\n        dataRecords[1] = dataRecord.id;\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:mergedDataRecords\\\", abi.encode(dataRecords));\\n\\n        return emitMatchDataRecordAndHint(dataRecord, matchHint);\\n    }\\n\\n    function emitMatchDataRecordAndHint(Suave.DataRecord memory dataRecord, bytes memory matchHint)\\n        internal\\n        virtual\\n        returns (bytes memory)\\n    {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit MatchEvent(dataRecord.id, matchHint);\\n\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(dataRecord));\\n    }\\n}\\n\\ncontract MevShareBundleSenderContract is MevShareContract {\\n    string[] public builderUrls;\\n\\n    constructor(string[] memory builderUrls_) {\\n        builderUrls = builderUrls_;\\n    }\\n\\n    function emitMatchDataRecordAndHint(Suave.DataRecord memory dataRecord, bytes memory matchHint)\\n        internal\\n        virtual\\n        override\\n        returns (bytes memory)\\n    {\\n        bytes memory bundleData = Suave.fillMevShareBundle(dataRecord.id);\\n        for (uint256 i = 0; i < builderUrls.length; i++) {\\n            Suave.submitBundleJsonRPC(builderUrls[i], \\\"mev_sendBundle\\\", bundleData);\\n        }\\n\\n        return MevShareContract.emitMatchDataRecordAndHint(dataRecord, matchHint);\\n    }\\n}\\n\\n/* Not tested or implemented on the precompile side */\\nstruct EgpRecordPair {\\n    uint64 egp; // in wei, beware overflow\\n    Suave.DataId dataId;\\n}\\n\\ncontract EthBlockContract is AnyBundleContract {\\n    event BuilderBoostBidEvent(Suave.DataId dataId, bytes builderBid);\\n\\n    function idsEqual(Suave.DataId _l, Suave.DataId _r) public pure returns (bool) {\\n        bytes memory l = abi.encodePacked(_l);\\n        bytes memory r = abi.encodePacked(_r);\\n        for (uint256 i = 0; i < l.length; i++) {\\n            if (bytes(l)[i] != r[i]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function buildMevShare(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        Suave.DataRecord[] memory allShareMatchDataRecords =\\n            Suave.fetchDataRecords(blockHeight, \\\"mevshare:v0:matchDataRecords\\\");\\n        Suave.DataRecord[] memory allShareUserDataRecords =\\n            Suave.fetchDataRecords(blockHeight, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\n        if (allShareUserDataRecords.length == 0) {\\n            revert Suave.PeekerReverted(address(this), \\\"no data records\\\");\\n        }\\n\\n        Suave.DataRecord[] memory allRecords = new Suave.DataRecord[](allShareUserDataRecords.length);\\n        for (uint256 i = 0; i < allShareUserDataRecords.length; i++) {\\n            // TODO: sort matches by egp first!\\n            Suave.DataRecord memory dataRecordToInsert = allShareUserDataRecords[i]; // will be updated with the best match if any\\n            for (uint256 j = 0; j < allShareMatchDataRecords.length; j++) {\\n                // TODO: should be done once at the start and sorted\\n                Suave.DataId[] memory mergeddataIds = abi.decode(\\n                    Suave.confidentialRetrieve(allShareMatchDataRecords[j].id, \\\"mevshare:v0:mergedDataRecords\\\"),\\n                    (Suave.DataId[])\\n                );\\n                if (idsEqual(mergeddataIds[0], allShareUserDataRecords[i].id)) {\\n                    dataRecordToInsert = allShareMatchDataRecords[j];\\n                    break;\\n                }\\n            }\\n            allRecords[i] = dataRecordToInsert;\\n        }\\n\\n        EgpRecordPair[] memory bidsByEGP = new EgpRecordPair[](allRecords.length);\\n        for (uint256 i = 0; i < allRecords.length; i++) {\\n            bytes memory simResults = Suave.confidentialRetrieve(allRecords[i].id, \\\"mevshare:v0:ethBundleSimResults\\\");\\n            uint64 egp = abi.decode(simResults, (uint64));\\n            bidsByEGP[i] = EgpRecordPair(egp, allRecords[i].id);\\n        }\\n\\n        // Bubble sort, cause why not\\n        uint256 n = bidsByEGP.length;\\n        for (uint256 i = 0; i < n - 1; i++) {\\n            for (uint256 j = i + 1; j < n; j++) {\\n                if (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n                    EgpRecordPair memory temp = bidsByEGP[i];\\n                    bidsByEGP[i] = bidsByEGP[j];\\n                    bidsByEGP[j] = temp;\\n                }\\n            }\\n        }\\n\\n        Suave.DataId[] memory alldataIds = new Suave.DataId[](allRecords.length);\\n        for (uint256 i = 0; i < bidsByEGP.length; i++) {\\n            alldataIds[i] = bidsByEGP[i].dataId;\\n        }\\n\\n        return buildAndEmit(blockArgs, blockHeight, alldataIds, \\\"mevshare:v0\\\");\\n    }\\n\\n    function buildFromPool(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        Suave.DataRecord[] memory allRecords = Suave.fetchDataRecords(blockHeight, \\\"default:v0:ethBundles\\\");\\n        if (allRecords.length == 0) {\\n            revert Suave.PeekerReverted(address(this), \\\"no data records\\\");\\n        }\\n\\n        EgpRecordPair[] memory bidsByEGP = new EgpRecordPair[](allRecords.length);\\n        for (uint256 i = 0; i < allRecords.length; i++) {\\n            bytes memory simResults = Suave.confidentialRetrieve(allRecords[i].id, \\\"default:v0:ethBundleSimResults\\\");\\n            uint64 egp = abi.decode(simResults, (uint64));\\n            bidsByEGP[i] = EgpRecordPair(egp, allRecords[i].id);\\n        }\\n\\n        // Bubble sort, cause why not\\n        uint256 n = bidsByEGP.length;\\n        for (uint256 i = 0; i < n - 1; i++) {\\n            for (uint256 j = i + 1; j < n; j++) {\\n                if (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n                    EgpRecordPair memory temp = bidsByEGP[i];\\n                    bidsByEGP[i] = bidsByEGP[j];\\n                    bidsByEGP[j] = temp;\\n                }\\n            }\\n        }\\n\\n        Suave.DataId[] memory alldataIds = new Suave.DataId[](allRecords.length);\\n        for (uint256 i = 0; i < bidsByEGP.length; i++) {\\n            alldataIds[i] = bidsByEGP[i].dataId;\\n        }\\n\\n        return buildAndEmit(blockArgs, blockHeight, alldataIds, \\\"\\\");\\n    }\\n\\n    function buildAndEmit(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory records,\\n        string memory namespace\\n    ) public virtual returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        (Suave.DataRecord memory blockBid, bytes memory builderBid) =\\n            this.doBuild(blockArgs, blockHeight, records, namespace);\\n\\n        emit BuilderBoostBidEvent(blockBid.id, builderBid);\\n        emit DataRecordEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n        return bytes.concat(this.emitBuilderBidAndBid.selector, abi.encode(blockBid, builderBid));\\n    }\\n\\n    function doBuild(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory records,\\n        string memory namespace\\n    ) public view returns (Suave.DataRecord memory, bytes memory) {\\n        address[] memory allowedPeekers = new address[](2);\\n        allowedPeekers[0] = address(this);\\n        allowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\n        Suave.DataRecord memory blockBid =\\n            Suave.newDataRecord(blockHeight, allowedPeekers, allowedPeekers, \\\"default:v0:mergedDataRecords\\\");\\n        Suave.confidentialStore(blockBid.id, \\\"default:v0:mergedDataRecords\\\", abi.encode(records));\\n\\n        (bytes memory builderBid, bytes memory payload) = Suave.buildEthBlock(blockArgs, blockBid.id, namespace);\\n        Suave.confidentialStore(blockBid.id, \\\"default:v0:builderPayload\\\", payload); // only through this.unlock\\n\\n        return (blockBid, builderBid);\\n    }\\n\\n    function emitBuilderBidAndBid(Suave.DataRecord memory dataRecord, bytes memory builderBid)\\n        public\\n        returns (Suave.DataRecord memory, bytes memory)\\n    {\\n        emit BuilderBoostBidEvent(dataRecord.id, builderBid);\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        return (dataRecord, builderBid);\\n    }\\n\\n    function unlock(Suave.DataId dataId, bytes memory signedBlindedHeader) public view returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        // TODO: verify the header is correct\\n        // TODO: incorporate protocol name\\n        bytes memory payload = Suave.confidentialRetrieve(dataId, \\\"default:v0:builderPayload\\\");\\n        return payload;\\n    }\\n}\\n\\ncontract EthBlockBidSenderContract is EthBlockContract {\\n    string boostRelayUrl;\\n\\n    constructor(string memory boostRelayUrl_) {\\n        boostRelayUrl = boostRelayUrl_;\\n    }\\n\\n    function buildAndEmit(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory dataRecords,\\n        string memory namespace\\n    ) public virtual override returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        (Suave.DataRecord memory blockDataRecord, bytes memory builderBid) =\\n            this.doBuild(blockArgs, blockHeight, dataRecords, namespace);\\n        Suave.submitEthBlockBidToRelay(boostRelayUrl, builderBid);\\n\\n        emit DataRecordEvent(blockDataRecord.id, blockDataRecord.decryptionCondition, blockDataRecord.allowedPeekers);\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(blockDataRecord));\\n    }\\n}\\n\",\"keccak256\":\"0x7d8b6ebf763b86b5c7404d41d5ba39d19db206418782be279018354de23965fc\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200888d3803806200888d833981810160405281019062000037919062000262565b806040516200004690620000b7565b62000052919062000310565b604051809103906000f0801580156200006f573d6000803e3d6000fd5b50600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000334565b614373806200451a83390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012e82620000e3565b810181811067ffffffffffffffff8211171562000150576200014f620000f4565b5b80604052505050565b600062000165620000c5565b905062000173828262000123565b919050565b600067ffffffffffffffff821115620001965762000195620000f4565b5b620001a182620000e3565b9050602081019050919050565b60005b83811015620001ce578082015181840152602081019050620001b1565b83811115620001de576000848401525b50505050565b6000620001fb620001f58462000178565b62000159565b9050828152602081018484840111156200021a5762000219620000de565b5b62000227848285620001ae565b509392505050565b600082601f830112620002475762000246620000d9565b5b815162000259848260208601620001e4565b91505092915050565b6000602082840312156200027b576200027a620000cf565b5b600082015167ffffffffffffffff8111156200029c576200029b620000d4565b5b620002aa848285016200022f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000620002dc82620002b3565b620002e88185620002be565b9350620002fa818560208601620001ae565b6200030581620000e3565b840191505092915050565b600060208201905081810360008301526200032c8184620002cf565b905092915050565b6141d680620003446000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063bb7bae0a1161008c578063ee2cc36411610066578063ee2cc36414610203578063fd38f21d1461021f578063ff4aec7d1461024f578063ffbbfcb01461026d576100cf565b8063bb7bae0a146101ad578063bcbb3597146101c9578063d7e84fbf146101e5576100cf565b8063392e53cd146100d457806360727f8e146100f257806361b8ce8c1461012257806364e65a62146101405780637e48532c1461015c57806381d12c581461017a575b600080fd5b6100dc61028b565b6040516100e991906121d1565b60405180910390f35b61010c60048036038101906101079190612698565b61029b565b604051610119919061277c565b60405180910390f35b61012a61051b565b60405161013791906127b7565b60405180910390f35b61015a600480360381019061015591906127f6565b610521565b005b6101646105ee565b604051610171919061277c565b60405180910390f35b610194600480360381019061018f91906128dd565b610643565b6040516101a494939291906129ac565b60405180910390f35b6101c760048036038101906101c29190612a24565b61070b565b005b6101e360048036038101906101de9190612a83565b610777565b005b6101ed6107ee565b6040516101fa9190612b2b565b60405180910390f35b61021d60048036038101906102189190612b65565b610814565b005b61023960048036038101906102349190612c62565b61092d565b604051610246919061277c565b60405180910390f35b610257610b36565b604051610264919061277c565b60405180910390f35b610275610b6f565b60405161028291906127b7565b60405180910390f35b60008060001b6001541415905090565b60606102e36102a8610b7c565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c44565b61032a6000600480549050116040518060400160405280600b81526020017f4e6f207265717565737473000000000000000000000000000000000000000000815250610c44565b6000806103408467ffffffffffffffff16610c8a565b915091506103946000836040015167ffffffffffffffff16116040518060400160405280600f81526020017f4e6f2076616c6964206f66666572730000000000000000000000000000000000815250610c44565b61039e8483610ed4565b81602001518561010001819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663346ab17587876040518363ffffffff1660e01b815260040161040b929190612f1b565b600060405180830381600087803b15801561042557600080fd5b505af1158015610439573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104629190612fbb565b90506364e65a6260e01b8184600001518560400151604051602001610488929190613004565b604051602081830303815290604052846104a061112f565b6040516024016104b3949392919061305c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935050505092915050565b60055481565b8061056d6105328260000135611171565b6040518060400160405280600b81526020017f496e76616c6964206b6579000000000000000000000000000000000000000000815250610c44565b60008351111561058957610588610583846111a5565b6111b7565b5b60006105b7600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687611382565b90506105c38582611450565b508060200135600181905550600260008154809291906105e2906130e5565b91905055505050505050565b60606106366105fb610b7c565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c44565b61063e6114ac565b905090565b6004818154811061065357600080fd5b906000526020600020906004020160009150905080600001549080600101805461067c9061315d565b80601f01602080910402602001604051908101604052809291908181526020018280546106a89061315d565b80156106f55780601f106106ca576101008083540402835291602001916106f5565b820191906000526020600020905b8154815290600101906020018083116106d857829003601f168201915b5050505050908060020154908060030154905084565b61075261071661028b565b156040518060400160405280601381526020017f416c726561647920696e697469616c697a656400000000000000000000000000815250610c44565b81600181905550806000816fffffffffffffffffffffffffffffffff19169055505050565b7ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb4781600001356fffffffffffffffffffffffffffffffff19168260400160208101906107c3919061318f565b8380606001906107d391906131cb565b6040516107e394939291906132e2565b60405180910390a150565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806108606108258260000135611171565b6040518060400160405280600b81526020017f496e76616c6964206b6579000000000000000000000000000000000000000000815250610c44565b600483908060018154018082558091505060019003906000526020600020906004020160009091909190915081816108989190613765565b5050600560008154809291906108ad906130e5565b91905055507fbf51327c63fb3c8741d4233ae0315e3e1a74641532f4e59c307f72314a34623583600001358480602001906108e891906133d6565b86604001356040516108fd94939291906137a0565b60405180910390a1806020013560018190555060026000815480929190610923906130e5565b9190505550505050565b606061097561093a610b7c565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c44565b60003073ffffffffffffffffffffffffffffffffffffffff1663ff4aec7d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109bf57600080fd5b505af11580156109d3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109fc9190612fbb565b90506000610a0b8260016115f7565b915050610a5a60008267ffffffffffffffff16116040518060400160405280600b81526020017f65677020746f6f206c6f77000000000000000000000000000000000000000000815250610c44565b6000610a65836116d2565b90506000604051806080016040528060055481526020018781526020018867ffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff1916815250905063ee2cc36460e01b81610abc61112f565b604051602401610acd9291906138ab565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505094505050505092915050565b6060610b40610b7c565b610b4957600080fd5b6000610b53611808565b905080806020019051810190610b699190612fbb565b91505090565b6000600480549050905090565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff16604051610ba89061390c565b600060405180830381855afa9150503d8060008114610be3576040519150601f19603f3d011682016040523d82523d6000602084013e610be8565b606091505b509150915081610c35576342010000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610c2c929190613930565b60405180910390fd5b80516020820151935050505090565b81610c8657806040517f0c25cd98000000000000000000000000000000000000000000000000000000008152600401610c7d9190613960565b60405180910390fd5b5050565b610c92612014565b606060005b600480549050811015610ece57600060048281548110610cba57610cb9613982565b5b906000526020600020906004020160405180608001604052908160008201548152602001600182018054610ced9061315d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d199061315d565b8015610d665780601f10610d3b57610100808354040283529160200191610d66565b820191906000526020600020905b815481529060010190602001808311610d4957829003601f168201915b505050505081526020016002820154815260200160038201546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152505090508481604001511015610dd257610dca82846118df90919063ffffffff16565b925050610ebd565b6000610e1782606001516040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c650000000000000000815250611913565b9050600080610e278360006115f7565b91509150811580610e42575060008167ffffffffffffffff16145b15610e6157610e5a85876118df90919063ffffffff16565b9550610eb8565b866040015167ffffffffffffffff168167ffffffffffffffff161115610eb757604051806080016040528085600001518152602001856020015181526020018267ffffffffffffffff1681526020018481525096505b5b505050505b80610ec7906130e5565b9050610c97565b50915091565b6000600367ffffffffffffffff811115610ef157610ef0612216565b5b604051908082528060200260200182016040528015610f1f5781602001602082028036833780820191505090505b509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110610f5957610f58613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634210000181600181518110610fac57610fab613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503081600281518110610ffb57610ffa613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006110788483846040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152506119fa565b90506110c281600001516040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152508560600151611b00565b61112981600001516040518060400160405280601e81526020017f64656661756c743a76303a65746842756e646c6553696d526573756c74730000815250856040015160405160200161111591906139b1565b604051602081830303815290604052611b00565b50505050565b611137612046565b604051806040016040528061114d600254611be3565b8152602001611169600160025461116491906139cc565b611bfd565b815250905090565b6000600154826040516020016111879190613a31565b60405160208183030381529060405280519060200120149050919050565b60606111b082611c35565b9050919050565b6000815190505b600081111561137e576000826001836111d79190613a4c565b815181106111e8576111e7613982565b5b6020026020010151905060006004828154811061120857611207613982565b5b9060005260206000209060040201600001549050600160048054905061122e9190613a4c565b8210156112e157600460016004805490506112499190613a4c565b8154811061125a57611259613982565b5b90600052602060002090600402016004838154811061127c5761127b613982565b5b90600052602060002090600402016000820154816000015560018201816001019080546112a89061315d565b6112b3929190612066565b5060028201548160020155600382015481600301906fffffffffffffffffffffffffffffffff191690559050505b60048054806112f3576112f2613a80565b5b600190038181906000526020600020906004020160008082016000905560018201600061132091906120f3565b60028201600090556003820160009055505090557f5fa4d8243d9549d33d615899224efcef51bfcacb970a31f68862ce74c858dbf08160405161136391906127b7565b60405180910390a150508061137790613aaf565b90506111be565b5050565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516113ac9190613b0a565b6000604051808303816000865af19150503d80600081146113e9576040519150601f19603f3d011682016040523d82523d6000602084013e6113ee565b606091505b5091509150611432826040518060400160405280601481526020017f45787465726e616c2063616c6c206661696c6564000000000000000000000000815250610c44565b808060200190518101906114469190613b91565b9250505092915050565b600080838060200190518101906114679190613c04565b915091507f91badfc611f9ad79e4d6a58176e5c4cedc4f8ed9001447825f503e792bbf09e282828560405161149e93929190613c44565b60405180910390a150505050565b60606114f46114b9610b7c565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c44565b61153b6114ff61028b565b156040518060400160405280601381526020017f416c726561647920696e697469616c697a656400000000000000000000000000815250610c44565b6000611545611808565b9050600061155282611d00565b905060006115758380602001905181019061156d9190613c97565b600254611edc565b905063bb7bae0a60e01b8183604051602401611592929190613cc4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935050505090565b600080600080634210000073ffffffffffffffffffffffffffffffffffffffff16614e208760405160200161162c919061277c565b6040516020818303038152906040526040516116489190613b0a565b6000604051808303818686fa925050503d8060008114611684576040519150601f19603f3d011682016040523d82523d6000602084013e611689565b606091505b50915091506116a185158061169b5750825b82610c44565b81156116c8576001818060200190518101906116bd9190613ced565b9350935050506116cb565b50505b9250929050565b600080600167ffffffffffffffff8111156116f0576116ef612216565b5b60405190808252806020026020018201604052801561171e5781602001602082028036833780820191505090505b509050308160008151811061173657611735613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006117b4600083846040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c6500000000000000008152506119fa565b90506117fa81600001516040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c65000000000000000081525086611b00565b806000015192505050919050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff1660405160200160405160208183030381529060405260405161184a9190613b0a565b600060405180830381855afa9150503d8060008114611885576040519150601f19603f3d011682016040523d82523d6000602084013e61188a565b606091505b5091509150816118d7576342010001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016118ce929190613930565b60405180910390fd5b809250505090565b6060826118eb83611f16565b6040516020016118fc929190613d1a565b604051602081830303815290604052905092915050565b6060600080634202000173ffffffffffffffffffffffffffffffffffffffff168585604051602001611946929190613d3e565b6040516020818303038152906040526040516119629190613b0a565b600060405180830381855afa9150503d806000811461199d576040519150601f19603f3d011682016040523d82523d6000602084013e6119a2565b606091505b5091509150816119ef576342020001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016119e6929190613930565b60405180910390fd5b809250505092915050565b611a02612133565b600080634203000073ffffffffffffffffffffffffffffffffffffffff1687878787604051602001611a379493929190613df4565b604051602081830303815290604052604051611a539190613b0a565b600060405180830381855afa9150503d8060008114611a8e576040519150601f19603f3d011682016040523d82523d6000602084013e611a93565b606091505b509150915081611ae0576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611ad7929190613930565b60405180910390fd5b80806020019051810190611af4919061402f565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001611b3393929190614078565b604051602081830303815290604052604051611b4f9190613b0a565b600060405180830381855afa9150503d8060008114611b8a576040519150601f19603f3d011682016040523d82523d6000602084013e611b8f565b606091505b509150915081611bdc576342020000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611bd3929190613930565b60405180910390fd5b5050505050565b6000611bf6611bf0611f73565b83611fd3565b9050919050565b6000611c0882611be3565b604051602001611c189190613a31565b604051602081830303815290604052805190602001209050919050565b606060208251611c4591906140ec565b67ffffffffffffffff811115611c5e57611c5d612216565b5b604051908082528060200260200182016040528015611c8c5781602001602082028036833780820191505090505b50905060005b60208351611ca091906140ec565b811015611cfa57611cc88360208084611cb9919061411d565b611cc391906139cc565b612006565b828281518110611cdb57611cda613982565b5b6020026020010181815250508080611cf2906130e5565b915050611c92565b50919050565b600080600367ffffffffffffffff811115611d1e57611d1d612216565b5b604051908082528060200260200182016040528015611d4c5781602001602082028036833780820191505090505b5090503081600081518110611d6457611d63613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634203000181600181518110611db757611db6613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634202000181600281518110611e0a57611e09613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000611e88600083846040518060400160405280601181526020017f626c6f636b61643a76303a7365637265740000000000000000000000000000008152506119fa565b9050611ece81600001516040518060400160405280601181526020017f626c6f636b61643a76303a73656372657400000000000000000000000000000081525086611b00565b806000015192505050919050565b6000611ee88383611fd3565b604051602001611ef89190613a31565b60405160208183030381529060405280519060200120905092915050565b6060602067ffffffffffffffff811115611f3357611f32612216565b5b6040519080825280601f01601f191660200182016040528015611f655781602001600182028036833780820191505090505b509050816020820152919050565b600080611fb76000546040518060400160405280601181526020017f626c6f636b61643a76303a736563726574000000000000000000000000000000815250611913565b905080806020019051810190611fcd9190613c97565b91505090565b60008282604051602001611fe8929190614177565b60405160208183030381529060405280519060200120905092915050565b600081830151905092915050565b60405180608001604052806000815260200160608152602001600067ffffffffffffffff168152602001606081525090565b604051806040016040528060008019168152602001600080191681525090565b8280546120729061315d565b90600052602060002090601f01602090048101928261209457600085556120e2565b82601f106120a557805485556120e2565b828001600101855582156120e257600052602060002091601f016020900482015b828111156120e15782548255916001019190600101906120c6565b5b5090506120ef9190612199565b5090565b5080546120ff9061315d565b6000825580601f106121115750612130565b601f01602090049060005260206000209081019061212f9190612199565b5b50565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b5b808211156121b257600081600090555060010161219a565b5090565b60008115159050919050565b6121cb816121b6565b82525050565b60006020820190506121e660008301846121c2565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61224e82612205565b810181811067ffffffffffffffff8211171561226d5761226c612216565b5b80604052505050565b60006122806121ec565b905061228c8282612245565b919050565b600080fd5b600067ffffffffffffffff82169050919050565b6122b381612296565b81146122be57600080fd5b50565b6000813590506122d0816122aa565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156122fb576122fa612216565b5b61230482612205565b9050602081019050919050565b82818337600083830152505050565b600061233361232e846122e0565b612276565b90508281526020810184848401111561234f5761234e6122db565b5b61235a848285612311565b509392505050565b600082601f830112612377576123766122d6565b5b8135612387848260208601612320565b91505092915050565b6000819050919050565b6123a381612390565b81146123ae57600080fd5b50565b6000813590506123c08161239a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123f1826123c6565b9050919050565b612401816123e6565b811461240c57600080fd5b50565b60008135905061241e816123f8565b92915050565b600067ffffffffffffffff82111561243f5761243e612216565b5b602082029050602081019050919050565b600080fd5b60006080828403121561246b5761246a612200565b5b6124756080612276565b90506000612485848285016122c1565b6000830152506020612499848285016122c1565b60208301525060406124ad8482850161240f565b60408301525060606124c1848285016122c1565b60608301525092915050565b60006124e06124db84612424565b612276565b9050808382526020820190506080840283018581111561250357612502612450565b5b835b8181101561252c57806125188882612455565b845260208401935050608081019050612505565b5050509392505050565b600082601f83011261254b5761254a6122d6565b5b813561255b8482602086016124cd565b91505092915050565b6000610120828403121561257b5761257a612200565b5b612586610120612276565b90506000612596848285016122c1565b600083015250602082013567ffffffffffffffff8111156125ba576125b9612291565b5b6125c684828501612362565b60208301525060406125da848285016123b1565b60408301525060606125ee848285016122c1565b60608301525060806126028482850161240f565b60808301525060a0612616848285016122c1565b60a08301525060c061262a848285016123b1565b60c08301525060e082013567ffffffffffffffff81111561264e5761264d612291565b5b61265a84828501612536565b60e08301525061010082013567ffffffffffffffff81111561267f5761267e612291565b5b61268b84828501612362565b6101008301525092915050565b600080604083850312156126af576126ae6121f6565b5b600083013567ffffffffffffffff8111156126cd576126cc6121fb565b5b6126d985828601612564565b92505060206126ea858286016122c1565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561272e578082015181840152602081019050612713565b8381111561273d576000848401525b50505050565b600061274e826126f4565b61275881856126ff565b9350612768818560208601612710565b61277181612205565b840191505092915050565b600060208201905081810360008301526127968184612743565b905092915050565b6000819050919050565b6127b18161279e565b82525050565b60006020820190506127cc60008301846127a8565b92915050565b600080fd5b6000604082840312156127ed576127ec6127d2565b5b81905092915050565b60008060008060a085870312156128105761280f6121f6565b5b600085013567ffffffffffffffff81111561282e5761282d6121fb565b5b61283a87828801612362565b945050602085013567ffffffffffffffff81111561285b5761285a6121fb565b5b61286787828801612362565b935050604085013567ffffffffffffffff811115612888576128876121fb565b5b61289487828801612362565b92505060606128a5878288016127d7565b91505092959194509250565b6128ba8161279e565b81146128c557600080fd5b50565b6000813590506128d7816128b1565b92915050565b6000602082840312156128f3576128f26121f6565b5b6000612901848285016128c8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006129318261290a565b61293b8185612915565b935061294b818560208601612710565b61295481612205565b840191505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b60006129968261295f565b9050919050565b6129a68161298b565b82525050565b60006080820190506129c160008301876127a8565b81810360208301526129d38186612926565b90506129e260408301856127a8565b6129ef606083018461299d565b95945050505050565b612a018161295f565b8114612a0c57600080fd5b50565b600081359050612a1e816129f8565b92915050565b60008060408385031215612a3b57612a3a6121f6565b5b6000612a49858286016123b1565b9250506020612a5a85828601612a0f565b9150509250929050565b600060c08284031215612a7a57612a796127d2565b5b81905092915050565b600060208284031215612a9957612a986121f6565b5b600082013567ffffffffffffffff811115612ab757612ab66121fb565b5b612ac384828501612a64565b91505092915050565b6000819050919050565b6000612af1612aec612ae7846123c6565b612acc565b6123c6565b9050919050565b6000612b0382612ad6565b9050919050565b6000612b1582612af8565b9050919050565b612b2581612b0a565b82525050565b6000602082019050612b406000830184612b1c565b92915050565b600060808284031215612b5c57612b5b6127d2565b5b81905092915050565b60008060608385031215612b7c57612b7b6121f6565b5b600083013567ffffffffffffffff811115612b9a57612b996121fb565b5b612ba685828601612b46565b9250506020612bb7858286016127d7565b9150509250929050565b600067ffffffffffffffff821115612bdc57612bdb612216565b5b612be582612205565b9050602081019050919050565b6000612c05612c0084612bc1565b612276565b905082815260208101848484011115612c2157612c206122db565b5b612c2c848285612311565b509392505050565b600082601f830112612c4957612c486122d6565b5b8135612c59848260208601612bf2565b91505092915050565b60008060408385031215612c7957612c786121f6565b5b6000612c87858286016122c1565b925050602083013567ffffffffffffffff811115612ca857612ca76121fb565b5b612cb485828601612c34565b9150509250929050565b612cc781612296565b82525050565b600082825260208201905092915050565b6000612ce9826126f4565b612cf38185612ccd565b9350612d03818560208601612710565b612d0c81612205565b840191505092915050565b612d2081612390565b82525050565b612d2f816123e6565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b608082016000820151612d776000850182612cbe565b506020820151612d8a6020850182612cbe565b506040820151612d9d6040850182612d26565b506060820151612db06060850182612cbe565b50505050565b6000612dc28383612d61565b60808301905092915050565b6000602082019050919050565b6000612de682612d35565b612df08185612d40565b9350612dfb83612d51565b8060005b83811015612e2c578151612e138882612db6565b9750612e1e83612dce565b925050600181019050612dff565b5085935050505092915050565b600061012083016000830151612e526000860182612cbe565b5060208301518482036020860152612e6a8282612cde565b9150506040830151612e7f6040860182612d17565b506060830151612e926060860182612cbe565b506080830151612ea56080860182612d26565b5060a0830151612eb860a0860182612cbe565b5060c0830151612ecb60c0860182612d17565b5060e083015184820360e0860152612ee38282612ddb565b915050610100830151848203610100860152612eff8282612cde565b9150508091505092915050565b612f1581612296565b82525050565b60006040820190508181036000830152612f358185612e39565b9050612f446020830184612f0c565b9392505050565b6000612f5e612f59846122e0565b612276565b905082815260208101848484011115612f7a57612f796122db565b5b612f85848285612710565b509392505050565b600082601f830112612fa257612fa16122d6565b5b8151612fb2848260208601612f4b565b91505092915050565b600060208284031215612fd157612fd06121f6565b5b600082015167ffffffffffffffff811115612fef57612fee6121fb565b5b612ffb84828501612f8d565b91505092915050565b600060408201905061301960008301856127a8565b6130266020830184612f0c565b9392505050565b6040820160008201516130436000850182612d17565b5060208201516130566020850182612d17565b50505050565b600060a08201905081810360008301526130768187612743565b9050818103602083015261308a8186612743565b9050818103604083015261309e8185612743565b90506130ad606083018461302d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006130f08261279e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613123576131226130b6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061317557607f821691505b602082108114156131895761318861312e565b5b50919050565b6000602082840312156131a5576131a46121f6565b5b60006131b3848285016122c1565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126131e8576131e76131bc565b5b80840192508235915067ffffffffffffffff82111561320a576132096131c1565b5b602083019250602082023603831315613226576132256131c6565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60006132558383612d26565b60208301905092915050565b6000613270602084018461240f565b905092915050565b6000602082019050919050565b6000613291838561322e565b935061329c8261323f565b8060005b858110156132d5576132b28284613261565b6132bc8882613249565b97506132c783613278565b9250506001810190506132a0565b5085925050509392505050565b60006060820190506132f7600083018761299d565b6133046020830186612f0c565b8181036040830152613317818486613285565b905095945050505050565b6000813561332f816128b1565b80915050919050565b60008160001b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61337184613338565b9350801983169250808416831791505092915050565b60006133a261339d6133988461279e565b612acc565b61279e565b9050919050565b6000819050919050565b6133bc82613387565b6133cf6133c8826133a9565b8354613345565b8255505050565b600080833560016020038436030381126133f3576133f26131bc565b5b80840192508235915067ffffffffffffffff821115613415576134146131c1565b5b602083019250600182023603831315613431576134306131c6565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026134a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613469565b6134b08683613469565b95508019841693508086168417925050509392505050565b6134d183613387565b6134e56134dd826133a9565b848454613476565b825550505050565b600090565b6134fa6134ed565b6135058184846134c8565b505050565b5b818110156135295761351e6000826134f2565b60018101905061350b565b5050565b601f82111561356e5761353f81613444565b61354884613459565b81016020851015613557578190505b61356b61356385613459565b83018261350a565b50505b505050565b600082821c905092915050565b600061359160001984600802613573565b1980831691505092915050565b60006135aa8383613580565b9150826002028217905092915050565b6135c48383613439565b67ffffffffffffffff8111156135dd576135dc612216565b5b6135e7825461315d565b6135f282828561352d565b6000601f831160018114613621576000841561360f578287013590505b613619858261359e565b865550613681565b601f19841661362f86613444565b60005b8281101561365757848901358255600182019150602085019450602081019050613632565b868310156136745784890135613670601f891682613580565b8355505b6001600288020188555050505b50505050505050565b6136958383836135ba565b505050565b600081356136a7816129f8565b80915050919050565b6000819050919050565b6136c38261298b565b6136d66136cf826136b0565b8354613345565b8255505050565b6000810160008301806136ef81613322565b90506136fb81846133b3565b505050600181016020830161371081856133d6565b61371b81838661368a565b5050505060028101604083018061373181613322565b905061373d81846133b3565b5050506003810160608301806137528161369a565b905061375e81846136ba565b5050505050565b61376f82826136dd565b5050565b600061377f8385612915565b935061378c838584612311565b61379583612205565b840190509392505050565b60006060820190506137b560008301876127a8565b81810360208301526137c8818587613773565b90506137d760408301846127a8565b95945050505050565b6137e98161279e565b82525050565b600082825260208201905092915050565b600061380b8261290a565b61381581856137ef565b9350613825818560208601612710565b61382e81612205565b840191505092915050565b6138428161298b565b82525050565b600060808301600083015161386060008601826137e0565b50602083015184820360208601526138788282613800565b915050604083015161388d60408601826137e0565b5060608301516138a06060860182613839565b508091505092915050565b600060608201905081810360008301526138c58185613848565b90506138d4602083018461302d565b9392505050565b600081905092915050565b50565b60006138f66000836138db565b9150613901826138e6565b600082019050919050565b6000613917826138e9565b9150819050919050565b61392a816123e6565b82525050565b60006040820190506139456000830185613921565b81810360208301526139578184612743565b90509392505050565b6000602082019050818103600083015261397a8184612926565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020820190506139c66000830184612f0c565b92915050565b60006139d78261279e565b91506139e28361279e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613a1757613a166130b6565b5b828201905092915050565b613a2b81612390565b82525050565b6000602082019050613a466000830184613a22565b92915050565b6000613a578261279e565b9150613a628361279e565b925082821015613a7557613a746130b6565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613aba8261279e565b91506000821415613ace57613acd6130b6565b5b600182039050919050565b6000613ae4826126f4565b613aee81856138db565b9350613afe818560208601612710565b80840191505092915050565b6000613b168284613ad9565b915081905092915050565b6000613b34613b2f84612bc1565b612276565b905082815260208101848484011115613b5057613b4f6122db565b5b613b5b848285612710565b509392505050565b600082601f830112613b7857613b776122d6565b5b8151613b88848260208601613b21565b91505092915050565b600060208284031215613ba757613ba66121f6565b5b600082015167ffffffffffffffff811115613bc557613bc46121fb565b5b613bd184828501613b63565b91505092915050565b600081519050613be9816128b1565b92915050565b600081519050613bfe816122aa565b92915050565b60008060408385031215613c1b57613c1a6121f6565b5b6000613c2985828601613bda565b9250506020613c3a85828601613bef565b9150509250929050565b6000606082019050613c5960008301866127a8565b613c666020830185612f0c565b8181036040830152613c788184612926565b9050949350505050565b600081519050613c918161239a565b92915050565b600060208284031215613cad57613cac6121f6565b5b6000613cbb84828501613c82565b91505092915050565b6000604082019050613cd96000830185613a22565b613ce6602083018461299d565b9392505050565b600060208284031215613d0357613d026121f6565b5b6000613d1184828501613bef565b91505092915050565b6000613d268285613ad9565b9150613d328284613ad9565b91508190509392505050565b6000604082019050613d53600083018561299d565b8181036020830152613d658184612926565b90509392505050565b600081519050919050565b6000819050602082019050919050565b6000602082019050919050565b6000613da182613d6e565b613dab818561322e565b9350613db683613d79565b8060005b83811015613de7578151613dce8882613249565b9750613dd983613d89565b925050600181019050613dba565b5085935050505092915050565b6000608082019050613e096000830187612f0c565b8181036020830152613e1b8186613d96565b90508181036040830152613e2f8185613d96565b90508181036060830152613e438184612926565b905095945050505050565b600081519050613e5d816129f8565b92915050565b600067ffffffffffffffff821115613e7e57613e7d612216565b5b602082029050602081019050919050565b600081519050613e9e816123f8565b92915050565b6000613eb7613eb284613e63565b612276565b90508083825260208201905060208402830185811115613eda57613ed9612450565b5b835b81811015613f035780613eef8882613e8f565b845260208401935050602081019050613edc565b5050509392505050565b600082601f830112613f2257613f216122d6565b5b8151613f32848260208601613ea4565b91505092915050565b600060c08284031215613f5157613f50612200565b5b613f5b60c0612276565b90506000613f6b84828501613e4e565b6000830152506020613f7f84828501613e4e565b6020830152506040613f9384828501613bef565b604083015250606082015167ffffffffffffffff811115613fb757613fb6612291565b5b613fc384828501613f0d565b606083015250608082015167ffffffffffffffff811115613fe757613fe6612291565b5b613ff384828501613f0d565b60808301525060a082015167ffffffffffffffff81111561401757614016612291565b5b61402384828501613b63565b60a08301525092915050565b600060208284031215614045576140446121f6565b5b600082015167ffffffffffffffff811115614063576140626121fb565b5b61406f84828501613f3b565b91505092915050565b600060608201905061408d600083018661299d565b818103602083015261409f8185612926565b905081810360408301526140b38184612743565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006140f78261279e565b91506141028361279e565b925082614112576141116140bd565b5b828204905092915050565b60006141288261279e565b91506141338361279e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561416c5761416b6130b6565b5b828202905092915050565b600060408201905061418c6000830185613a22565b61419960208301846127a8565b939250505056fea2646970667358221220f94858d7b8106a3aeb4d7f15a5bd0c0fe281b91b5d4ec2ecd55ef61725a43c6d64736f6c6343000808003360806040523480156200001157600080fd5b5060405162004373380380620043738339818101604052810190620000379190620002a4565b80600090805190602001906200004f92919062000057565b50506200035a565b828054620000659062000324565b90600052602060002090601f016020900481019282620000895760008555620000d5565b82601f10620000a457805160ff1916838001178555620000d5565b82800160010185558215620000d5579182015b82811115620000d4578251825591602001919060010190620000b7565b5b509050620000e49190620000e8565b5090565b5b8082111562000103576000816000905550600101620000e9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001708262000125565b810181811067ffffffffffffffff8211171562000192576200019162000136565b5b80604052505050565b6000620001a762000107565b9050620001b5828262000165565b919050565b600067ffffffffffffffff821115620001d857620001d762000136565b5b620001e38262000125565b9050602081019050919050565b60005b8381101562000210578082015181840152602081019050620001f3565b8381111562000220576000848401525b50505050565b60006200023d6200023784620001ba565b6200019b565b9050828152602081018484840111156200025c576200025b62000120565b5b62000269848285620001f0565b509392505050565b600082601f8301126200028957620002886200011b565b5b81516200029b84826020860162000226565b91505092915050565b600060208284031215620002bd57620002bc62000111565b5b600082015167ffffffffffffffff811115620002de57620002dd62000116565b5b620002ec8482850162000271565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200033d57607f821691505b60208210811415620003545762000353620002f5565b5b50919050565b614009806200036a6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b33e471511610071578063b33e4715146101da578063bcbb35971461020b578063d503387a14610227578063e48c31e014610257578063e829cd5d14610287578063ff4aec7d146102b7576100b4565b8063232ef1f4146100b9578063346ab175146100ea578063464b0c3a1461011a5780636a9cc4b31461014a57806373e9710f1461017a5780637df1cde2146101aa575b600080fd5b6100d360048036038101906100ce9190612533565b6102d5565b6040516100e1929190612850565b60405180910390f35b61010460048036038101906100ff9190612887565b6104e4565b60405161011191906128e3565b60405180910390f35b610134600480360381019061012f9190612533565b61090e565b60405161014191906128e3565b60405180910390f35b610164600480360381019061015f919061293b565b610ab0565b60405161017191906129e1565b60405180910390f35b610194600480360381019061018f9190612a03565b610b52565b6040516101a191906128e3565b60405180910390f35b6101c460048036038101906101bf9190612a30565b610c45565b6040516101d191906128e3565b60405180910390f35b6101f460048036038101906101ef9190612c43565b610ca5565b604051610202929190612850565b60405180910390f35b61022560048036038101906102209190612cdf565b610d40565b005b610241600480360381019061023c9190612887565b610db7565b60405161024e91906128e3565b60405180910390f35b610271600480360381019061026c9190612d28565b611404565b60405161027e91906129e1565b60405180910390f35b6102a1600480360381019061029c9190612d84565b611446565b6040516102ae9190612ddf565b60405180910390f35b6102bf61154d565b6040516102cc91906128e3565b60405180910390f35b6102dd611e2e565b60606000600267ffffffffffffffff8111156102fc576102fb611ef5565b5b60405190808252806020026020018201604052801561032a5781602001602082028036833780820191505090505b509050308160008151811061034257610341612dfa565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505063421000018160018151811061039557610394612dfa565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006104128783846040518060400160405280601c81526020017f64656661756c743a76303a6d6572676564446174615265636f72647300000000815250611586565b905061047781600001516040518060400160405280601c81526020017f64656661756c743a76303a6d6572676564446174615265636f72647300000000815250886040516020016104639190612ed8565b60405160208183030381529060405261168c565b6000806104898a84600001518961176f565b915091506104d183600001516040518060400160405280601981526020017f64656661756c743a76303a6275696c6465725061796c6f6164000000000000008152508361168c565b8282955095505050505094509492505050565b60606104ee611870565b6104f757600080fd5b6000610538836040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c65730000000000000000000000815250611938565b905060008151141561058157306040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016105789190612f55565b60405180910390fd5b6000815167ffffffffffffffff81111561059e5761059d611ef5565b5b6040519080825280602002602001820160405280156105d757816020015b6105c4611e94565b8152602001906001900390816105bc5790505b50905060005b82518110156106e25760006106458483815181106105fe576105fd612dfa565b5b6020026020010151600001516040518060400160405280601e81526020017f64656661756c743a76303a65746842756e646c6553696d526573756c74730000815250611a32565b905060008180602001905181019061065d9190612f98565b905060405180604001604052808267ffffffffffffffff16815260200186858151811061068d5761068c612dfa565b5b6020026020010151600001516fffffffffffffffffffffffffffffffff19168152508484815181106106c2576106c1612dfa565b5b6020026020010181905250505080806106da90612ff4565b9150506105dd565b5060008151905060005b6001826106f9919061303d565b81101561081257600060018261070f9190613071565b90505b828110156107fe5783818151811061072d5761072c612dfa565b5b60200260200101516000015167ffffffffffffffff1684838151811061075657610755612dfa565b5b60200260200101516000015167ffffffffffffffff1610156107eb57600084838151811061078757610786612dfa565b5b602002602001015190508482815181106107a4576107a3612dfa565b5b60200260200101518584815181106107bf576107be612dfa565b5b6020026020010181905250808583815181106107de576107dd612dfa565b5b6020026020010181905250505b80806107f690612ff4565b915050610712565b50808061080a90612ff4565b9150506106ec565b506000835167ffffffffffffffff8111156108305761082f611ef5565b5b60405190808252806020026020018201604052801561085e5781602001602082028036833780820191505090505b50905060005b83518110156108e6578381815181106108805761087f612dfa565b5b60200260200101516020015182828151811061089f5761089e612dfa565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505080806108de90612ff4565b915050610864565b506109028787836040518060200160405280600081525061090e565b94505050505092915050565b606061095661091b611870565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250611b19565b6000803073ffffffffffffffffffffffffffffffffffffffff1663232ef1f4888888886040518563ffffffff1660e01b81526004016109989493929190613306565b60006040518083038186803b1580156109b057600080fd5b505afa1580156109c4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109ed91906135f5565b915091506109ff826000015182611b5f565b610a0881611c41565b6000610a2282896000015167ffffffffffffffff16610ab0565b905063e48c31e060e01b818380519060200120604051602401610a4692919061367c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509350505050949350505050565b60606000604090506000610ac384611d1d565b6079610acf9190613071565b905060008267ffffffffffffffff811115610aed57610aec611ef5565b5b6040519080825280601f01601f191660200182016040528015610b1f5781602001600182028036833780820191505090505b50905060205b60208401811015610b455780830187015181830152602081019050610b25565b5080935050505092915050565b6060610b9a610b5f611870565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250611b19565b6000610ba4611d57565b9050610baf81611c41565b6000610bbb8285610ab0565b905063e48c31e060e01b818380519060200120604051602401610bdf92919061367c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505092505050919050565b6060610c4f611870565b610c5857600080fd5b6000610c99846040518060400160405280601981526020017f64656661756c743a76303a6275696c6465725061796c6f616400000000000000815250611a32565b90508091505092915050565b610cad611e2e565b60607f67fa9c16cd72410c4cc1d47205b31852a81ec5e92d1c8cebc3ecbe98ed67fe3f846000015184604051610ce49291906136bb565b60405180910390a17ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb47846000015185604001518660600151604051610d2b9392919061375a565b60405180910390a18383915091509250929050565b7ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb4781600001356fffffffffffffffffffffffffffffffff1916826040016020810190610d8c9190613798565b838060600190610d9c91906137d4565b604051610dac94939291906138c2565b60405180910390a150565b6060610dc1611870565b610dca57600080fd5b6000610e0b836040518060400160405280601c81526020017f6d657673686172653a76303a6d61746368446174615265636f72647300000000815250611938565b90506000610e4e846040518060400160405280601c81526020017f6d657673686172653a76303a756e6d61746368656442756e646c657300000000815250611938565b9050600081511415610e9757306040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610e8e9190612f55565b60405180910390fd5b6000815167ffffffffffffffff811115610eb457610eb3611ef5565b5b604051908082528060200260200182016040528015610eed57816020015b610eda611e2e565b815260200190600190039081610ed25790505b50905060005b825181101561104e576000838281518110610f1157610f10612dfa565b5b6020026020010151905060005b855181101561101a576000610f86878381518110610f3f57610f3e612dfa565b5b6020026020010151600001516040518060400160405280601d81526020017f6d657673686172653a76303a6d6572676564446174615265636f726473000000815250611a32565b806020019051810190610f999190613999565b9050610fde81600081518110610fb257610fb1612dfa565b5b6020026020010151878681518110610fcd57610fcc612dfa565b5b602002602001015160000151611446565b1561100657868281518110610ff657610ff5612dfa565b5b602002602001015192505061101a565b50808061101290612ff4565b915050610f1e565b508083838151811061102f5761102e612dfa565b5b602002602001018190525050808061104690612ff4565b915050610ef3565b506000815167ffffffffffffffff81111561106c5761106b611ef5565b5b6040519080825280602002602001820160405280156110a557816020015b611092611e94565b81526020019060019003908161108a5790505b50905060005b82518110156111b05760006111138483815181106110cc576110cb612dfa565b5b6020026020010151600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c747300815250611a32565b905060008180602001905181019061112b9190612f98565b905060405180604001604052808267ffffffffffffffff16815260200186858151811061115b5761115a612dfa565b5b6020026020010151600001516fffffffffffffffffffffffffffffffff19168152508484815181106111905761118f612dfa565b5b6020026020010181905250505080806111a890612ff4565b9150506110ab565b5060008151905060005b6001826111c7919061303d565b8110156112e05760006001826111dd9190613071565b90505b828110156112cc578381815181106111fb576111fa612dfa565b5b60200260200101516000015167ffffffffffffffff1684838151811061122457611223612dfa565b5b60200260200101516000015167ffffffffffffffff1610156112b957600084838151811061125557611254612dfa565b5b6020026020010151905084828151811061127257611271612dfa565b5b602002602001015185848151811061128d5761128c612dfa565b5b6020026020010181905250808583815181106112ac576112ab612dfa565b5b6020026020010181905250505b80806112c490612ff4565b9150506111e0565b5080806112d890612ff4565b9150506111ba565b506000835167ffffffffffffffff8111156112fe576112fd611ef5565b5b60405190808252806020026020018201604052801561132c5781602001602082028036833780820191505090505b50905060005b83518110156113b45783818151811061134e5761134d612dfa565b5b60200260200101516020015182828151811061136d5761136c612dfa565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505080806113ac90612ff4565b915050611332565b506113f68989836040518060400160405280600b81526020017f6d657673686172653a763000000000000000000000000000000000000000000081525061090e565b965050505050505092915050565b60607f53e8ee078f2cd7d535018fdc18210ac92e4b70ee40542d1a43816dba5faae1698260405161143591906139e2565b60405180910390a182905092915050565b6000808360405160200161145a9190613a1e565b604051602081830303815290604052905060008360405160200161147e9190613a1e565b604051602081830303815290604052905060005b825181101561153f578181815181106114ae576114ad612dfa565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815181106114ee576114ed612dfa565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461152c5760009350505050611547565b808061153790612ff4565b915050611492565b506001925050505b92915050565b6060611557611870565b61156057600080fd5b600061156a611d57565b9050808060200190518101906115809190613a39565b91505090565b61158e611e2e565b600080634203000073ffffffffffffffffffffffffffffffffffffffff16878787876040516020016115c39493929190613a82565b6040516020818303038152906040526040516115df9190613b18565b600060405180830381855afa9150503d806000811461161a576040519150601f19603f3d011682016040523d82523d6000602084013e61161f565b606091505b50915091508161166c576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611663929190613b2f565b60405180910390fd5b808060200190518101906116809190613b5f565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff168585856040516020016116bf93929190613ba8565b6040516020818303038152906040526040516116db9190613b18565b600060405180830381855afa9150503d8060008114611716576040519150601f19603f3d011682016040523d82523d6000602084013e61171b565b606091505b509150915081611768576342020000816040517f75fff46700000000000000000000000000000000000000000000000000000000815260040161175f929190613b2f565b60405180910390fd5b5050505050565b606080600080634210000173ffffffffffffffffffffffffffffffffffffffff168787876040516020016117a593929190613bed565b6040516020818303038152906040526040516117c19190613b18565b600060405180830381855afa9150503d80600081146117fc576040519150601f19603f3d011682016040523d82523d6000602084013e611801565b606091505b50915091508161184e576342100001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611845929190613b2f565b60405180910390fd5b808060200190518101906118629190613c32565b935093505050935093915050565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff1660405161189c90613cd0565b600060405180830381855afa9150503d80600081146118d7576040519150601f19603f3d011682016040523d82523d6000602084013e6118dc565b606091505b509150915081611929576342010000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611920929190613b2f565b60405180910390fd5b80516020820151935050505090565b6060600080634203000173ffffffffffffffffffffffffffffffffffffffff16858560405160200161196b929190613ce5565b6040516020818303038152906040526040516119879190613b18565b600060405180830381855afa9150503d80600081146119c2576040519150601f19603f3d011682016040523d82523d6000602084013e6119c7565b606091505b509150915081611a14576342030001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611a0b929190613b2f565b60405180910390fd5b80806020019051810190611a289190613df6565b9250505092915050565b6060600080634202000173ffffffffffffffffffffffffffffffffffffffff168585604051602001611a65929190613e3f565b604051602081830303815290604052604051611a819190613b18565b600060405180830381855afa9150503d8060008114611abc576040519150601f19603f3d011682016040523d82523d6000602084013e611ac1565b606091505b509150915081611b0e576342020001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611b05929190613b2f565b60405180910390fd5b809250505092915050565b81611b5b57806040517f0c25cd98000000000000000000000000000000000000000000000000000000008152600401611b5291906129e1565b60405180910390fd5b5050565b6000600167ffffffffffffffff811115611b7c57611b7b611ef5565b5b604051908082528060200260200182016040528015611baa5781602001602082028036833780820191505090505b5090503081600081518110611bc257611bc1612dfa565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611c3c836040518060400160405280601581526020017f626c6f636b61643a76303a6275696c64657242696400000000000000000000008152508461168c565b505050565b600080634210000273ffffffffffffffffffffffffffffffffffffffff16600084604051602001611c73929190613f65565b604051602081830303815290604052604051611c8f9190613b18565b600060405180830381855afa9150503d8060008114611cca576040519150601f19603f3d011682016040523d82523d6000602084013e611ccf565b606091505b509150915081611d185780836040517fda3e641f000000000000000000000000000000000000000000000000000000008152600401611d0f929190613f9c565b60405180910390fd5b505050565b6000600a5b600115611d515760018201915080831060018114611d3f57611d45565b50611d51565b50600a81029050611d22565b50919050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff16604051602001604051602081830303815290604052604051611d999190613b18565b600060405180830381855afa9150503d8060008114611dd4576040519150601f19603f3d011682016040523d82523d6000602084013e611dd9565b606091505b509150915081611e26576342010001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611e1d929190613b2f565b60405180910390fd5b809250505090565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b6040518060400160405280600067ffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff191681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f2d82611ee4565b810181811067ffffffffffffffff82111715611f4c57611f4b611ef5565b5b80604052505050565b6000611f5f611ecb565b9050611f6b8282611f24565b919050565b600080fd5b600067ffffffffffffffff82169050919050565b611f9281611f75565b8114611f9d57600080fd5b50565b600081359050611faf81611f89565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115611fda57611fd9611ef5565b5b611fe382611ee4565b9050602081019050919050565b82818337600083830152505050565b600061201261200d84611fbf565b611f55565b90508281526020810184848401111561202e5761202d611fba565b5b612039848285611ff0565b509392505050565b600082601f83011261205657612055611fb5565b5b8135612066848260208601611fff565b91505092915050565b6000819050919050565b6120828161206f565b811461208d57600080fd5b50565b60008135905061209f81612079565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120d0826120a5565b9050919050565b6120e0816120c5565b81146120eb57600080fd5b50565b6000813590506120fd816120d7565b92915050565b600067ffffffffffffffff82111561211e5761211d611ef5565b5b602082029050602081019050919050565b600080fd5b60006080828403121561214a57612149611edf565b5b6121546080611f55565b9050600061216484828501611fa0565b600083015250602061217884828501611fa0565b602083015250604061218c848285016120ee565b60408301525060606121a084828501611fa0565b60608301525092915050565b60006121bf6121ba84612103565b611f55565b905080838252602082019050608084028301858111156121e2576121e161212f565b5b835b8181101561220b57806121f78882612134565b8452602084019350506080810190506121e4565b5050509392505050565b600082601f83011261222a57612229611fb5565b5b813561223a8482602086016121ac565b91505092915050565b6000610120828403121561225a57612259611edf565b5b612265610120611f55565b9050600061227584828501611fa0565b600083015250602082013567ffffffffffffffff81111561229957612298611f70565b5b6122a584828501612041565b60208301525060406122b984828501612090565b60408301525060606122cd84828501611fa0565b60608301525060806122e1848285016120ee565b60808301525060a06122f584828501611fa0565b60a08301525060c061230984828501612090565b60c08301525060e082013567ffffffffffffffff81111561232d5761232c611f70565b5b61233984828501612215565b60e08301525061010082013567ffffffffffffffff81111561235e5761235d611f70565b5b61236a84828501612041565b6101008301525092915050565b600067ffffffffffffffff82111561239257612391611ef5565b5b602082029050602081019050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6123d8816123a3565b81146123e357600080fd5b50565b6000813590506123f5816123cf565b92915050565b600061240e61240984612377565b611f55565b905080838252602082019050602084028301858111156124315761243061212f565b5b835b8181101561245a578061244688826123e6565b845260208401935050602081019050612433565b5050509392505050565b600082601f83011261247957612478611fb5565b5b81356124898482602086016123fb565b91505092915050565b600067ffffffffffffffff8211156124ad576124ac611ef5565b5b6124b682611ee4565b9050602081019050919050565b60006124d66124d184612492565b611f55565b9050828152602081018484840111156124f2576124f1611fba565b5b6124fd848285611ff0565b509392505050565b600082601f83011261251a57612519611fb5565b5b813561252a8482602086016124c3565b91505092915050565b6000806000806080858703121561254d5761254c611ed5565b5b600085013567ffffffffffffffff81111561256b5761256a611eda565b5b61257787828801612243565b945050602061258887828801611fa0565b935050604085013567ffffffffffffffff8111156125a9576125a8611eda565b5b6125b587828801612464565b925050606085013567ffffffffffffffff8111156125d6576125d5611eda565b5b6125e287828801612505565b91505092959194509250565b60006125f9826123a3565b9050919050565b612609816125ee565b82525050565b61261881611f75565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612653816120c5565b82525050565b6000612665838361264a565b60208301905092915050565b6000602082019050919050565b60006126898261261e565b6126938185612629565b935061269e8361263a565b8060005b838110156126cf5781516126b68882612659565b97506126c183612671565b9250506001810190506126a2565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156127165780820151818401526020810190506126fb565b83811115612725576000848401525b50505050565b6000612736826126dc565b61274081856126e7565b93506127508185602086016126f8565b61275981611ee4565b840191505092915050565b600060c08301600083015161277c6000860182612600565b50602083015161278f6020860182612600565b5060408301516127a2604086018261260f565b50606083015184820360608601526127ba828261267e565b915050608083015184820360808601526127d4828261267e565b91505060a083015184820360a08601526127ee828261272b565b9150508091505092915050565b600081519050919050565b600082825260208201905092915050565b6000612822826127fb565b61282c8185612806565b935061283c8185602086016126f8565b61284581611ee4565b840191505092915050565b6000604082019050818103600083015261286a8185612764565b9050818103602083015261287e8184612817565b90509392505050565b6000806040838503121561289e5761289d611ed5565b5b600083013567ffffffffffffffff8111156128bc576128bb611eda565b5b6128c885828601612243565b92505060206128d985828601611fa0565b9150509250929050565b600060208201905081810360008301526128fd8184612817565b905092915050565b6000819050919050565b61291881612905565b811461292357600080fd5b50565b6000813590506129358161290f565b92915050565b6000806040838503121561295257612951611ed5565b5b600083013567ffffffffffffffff8111156129705761296f611eda565b5b61297c85828601612041565b925050602061298d85828601612926565b9150509250929050565b600082825260208201905092915050565b60006129b3826126dc565b6129bd8185612997565b93506129cd8185602086016126f8565b6129d681611ee4565b840191505092915050565b600060208201905081810360008301526129fb81846129a8565b905092915050565b600060208284031215612a1957612a18611ed5565b5b6000612a2784828501612926565b91505092915050565b60008060408385031215612a4757612a46611ed5565b5b6000612a55858286016123e6565b925050602083013567ffffffffffffffff811115612a7657612a75611eda565b5b612a8285828601612041565b9150509250929050565b600067ffffffffffffffff821115612aa757612aa6611ef5565b5b602082029050602081019050919050565b6000612acb612ac684612a8c565b611f55565b90508083825260208201905060208402830185811115612aee57612aed61212f565b5b835b81811015612b175780612b0388826120ee565b845260208401935050602081019050612af0565b5050509392505050565b600082601f830112612b3657612b35611fb5565b5b8135612b46848260208601612ab8565b91505092915050565b600060c08284031215612b6557612b64611edf565b5b612b6f60c0611f55565b90506000612b7f848285016123e6565b6000830152506020612b93848285016123e6565b6020830152506040612ba784828501611fa0565b604083015250606082013567ffffffffffffffff811115612bcb57612bca611f70565b5b612bd784828501612b21565b606083015250608082013567ffffffffffffffff811115612bfb57612bfa611f70565b5b612c0784828501612b21565b60808301525060a082013567ffffffffffffffff811115612c2b57612c2a611f70565b5b612c3784828501612505565b60a08301525092915050565b60008060408385031215612c5a57612c59611ed5565b5b600083013567ffffffffffffffff811115612c7857612c77611eda565b5b612c8485828601612b4f565b925050602083013567ffffffffffffffff811115612ca557612ca4611eda565b5b612cb185828601612041565b9150509250929050565b600080fd5b600060c08284031215612cd657612cd5612cbb565b5b81905092915050565b600060208284031215612cf557612cf4611ed5565b5b600082013567ffffffffffffffff811115612d1357612d12611eda565b5b612d1f84828501612cc0565b91505092915050565b60008060408385031215612d3f57612d3e611ed5565b5b600083013567ffffffffffffffff811115612d5d57612d5c611eda565b5b612d6985828601612505565b9250506020612d7a85828601612090565b9150509250929050565b60008060408385031215612d9b57612d9a611ed5565b5b6000612da9858286016123e6565b9250506020612dba858286016123e6565b9150509250929050565b60008115159050919050565b612dd981612dc4565b82525050565b6000602082019050612df46000830184612dd0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612e618383612600565b60208301905092915050565b6000602082019050919050565b6000612e8582612e29565b612e8f8185612e34565b9350612e9a83612e45565b8060005b83811015612ecb578151612eb28882612e55565b9750612ebd83612e6d565b925050600181019050612e9e565b5085935050505092915050565b60006020820190508181036000830152612ef28184612e7a565b905092915050565b612f03816120c5565b82525050565b7f6e6f2064617461207265636f7264730000000000000000000000000000000000600082015250565b6000612f3f600f83612806565b9150612f4a82612f09565b602082019050919050565b6000604082019050612f6a6000830184612efa565b8181036020830152612f7b81612f32565b905092915050565b600081519050612f9281611f89565b92915050565b600060208284031215612fae57612fad611ed5565b5b6000612fbc84828501612f83565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fff82612905565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561303257613031612fc5565b5b600182019050919050565b600061304882612905565b915061305383612905565b92508282101561306657613065612fc5565b5b828203905092915050565b600061307c82612905565b915061308783612905565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156130bc576130bb612fc5565b5b828201905092915050565b600082825260208201905092915050565b60006130e3826127fb565b6130ed81856130c7565b93506130fd8185602086016126f8565b61310681611ee4565b840191505092915050565b61311a8161206f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b608082016000820151613162600085018261260f565b506020820151613175602085018261260f565b506040820151613188604085018261264a565b50606082015161319b606085018261260f565b50505050565b60006131ad838361314c565b60808301905092915050565b6000602082019050919050565b60006131d182613120565b6131db818561312b565b93506131e68361313c565b8060005b838110156132175781516131fe88826131a1565b9750613209836131b9565b9250506001810190506131ea565b5085935050505092915050565b60006101208301600083015161323d600086018261260f565b506020830151848203602086015261325582826130d8565b915050604083015161326a6040860182613111565b50606083015161327d606086018261260f565b506080830151613290608086018261264a565b5060a08301516132a360a086018261260f565b5060c08301516132b660c0860182613111565b5060e083015184820360e08601526132ce82826131c6565b9150506101008301518482036101008601526132ea82826130d8565b9150508091505092915050565b61330081611f75565b82525050565b600060808201905081810360008301526133208187613224565b905061332f60208301866132f7565b81810360408301526133418185612e7a565b9050818103606083015261335581846129a8565b905095945050505050565b60008151905061336f816123cf565b92915050565b600081519050613384816120d7565b92915050565b600061339d61339884612a8c565b611f55565b905080838252602082019050602084028301858111156133c0576133bf61212f565b5b835b818110156133e957806133d58882613375565b8452602084019350506020810190506133c2565b5050509392505050565b600082601f83011261340857613407611fb5565b5b815161341884826020860161338a565b91505092915050565b600061343461342f84612492565b611f55565b9050828152602081018484840111156134505761344f611fba565b5b61345b8482856126f8565b509392505050565b600082601f83011261347857613477611fb5565b5b8151613488848260208601613421565b91505092915050565b600060c082840312156134a7576134a6611edf565b5b6134b160c0611f55565b905060006134c184828501613360565b60008301525060206134d584828501613360565b60208301525060406134e984828501612f83565b604083015250606082015167ffffffffffffffff81111561350d5761350c611f70565b5b613519848285016133f3565b606083015250608082015167ffffffffffffffff81111561353d5761353c611f70565b5b613549848285016133f3565b60808301525060a082015167ffffffffffffffff81111561356d5761356c611f70565b5b61357984828501613463565b60a08301525092915050565b600061359861359384611fbf565b611f55565b9050828152602081018484840111156135b4576135b3611fba565b5b6135bf8482856126f8565b509392505050565b600082601f8301126135dc576135db611fb5565b5b81516135ec848260208601613585565b91505092915050565b6000806040838503121561360c5761360b611ed5565b5b600083015167ffffffffffffffff81111561362a57613629611eda565b5b61363685828601613491565b925050602083015167ffffffffffffffff81111561365757613656611eda565b5b613663858286016135c7565b9150509250929050565b6136768161206f565b82525050565b6000604082019050818103600083015261369681856129a8565b90506136a5602083018461366d565b9392505050565b6136b5816125ee565b82525050565b60006040820190506136d060008301856136ac565b81810360208301526136e28184612817565b90509392505050565b600082825260208201905092915050565b60006137078261261e565b61371181856136eb565b935061371c8361263a565b8060005b8381101561374d5781516137348882612659565b975061373f83612671565b925050600181019050613720565b5085935050505092915050565b600060608201905061376f60008301866136ac565b61377c60208301856132f7565b818103604083015261378e81846136fc565b9050949350505050565b6000602082840312156137ae576137ad611ed5565b5b60006137bc84828501611fa0565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126137f1576137f06137c5565b5b80840192508235915067ffffffffffffffff821115613813576138126137ca565b5b60208301925060208202360383131561382f5761382e6137cf565b5b509250929050565b6000819050919050565b600061385060208401846120ee565b905092915050565b6000602082019050919050565b600061387183856136eb565b935061387c82613837565b8060005b858110156138b5576138928284613841565b61389c8882612659565b97506138a783613858565b925050600181019050613880565b5085925050509392505050565b60006060820190506138d760008301876136ac565b6138e460208301866132f7565b81810360408301526138f7818486613865565b905095945050505050565b600061391561391084612377565b611f55565b905080838252602082019050602084028301858111156139385761393761212f565b5b835b81811015613961578061394d8882613360565b84526020840193505060208101905061393a565b5050509392505050565b600082601f8301126139805761397f611fb5565b5b8151613990848260208601613902565b91505092915050565b6000602082840312156139af576139ae611ed5565b5b600082015167ffffffffffffffff8111156139cd576139cc611eda565b5b6139d98482850161396b565b91505092915050565b60006020820190506139f7600083018461366d565b92915050565b6000819050919050565b613a18613a13826125ee565b6139fd565b82525050565b6000613a2a8284613a07565b60108201915081905092915050565b600060208284031215613a4f57613a4e611ed5565b5b600082015167ffffffffffffffff811115613a6d57613a6c611eda565b5b613a79848285016135c7565b91505092915050565b6000608082019050613a9760008301876132f7565b8181036020830152613aa981866136fc565b90508181036040830152613abd81856136fc565b90508181036060830152613ad181846129a8565b905095945050505050565b600081905092915050565b6000613af2826127fb565b613afc8185613adc565b9350613b0c8185602086016126f8565b80840191505092915050565b6000613b248284613ae7565b915081905092915050565b6000604082019050613b446000830185612efa565b8181036020830152613b568184612817565b90509392505050565b600060208284031215613b7557613b74611ed5565b5b600082015167ffffffffffffffff811115613b9357613b92611eda565b5b613b9f84828501613491565b91505092915050565b6000606082019050613bbd60008301866136ac565b8181036020830152613bcf81856129a8565b90508181036040830152613be38184612817565b9050949350505050565b60006060820190508181036000830152613c078186613224565b9050613c1660208301856136ac565b8181036040830152613c2881846129a8565b9050949350505050565b60008060408385031215613c4957613c48611ed5565b5b600083015167ffffffffffffffff811115613c6757613c66611eda565b5b613c73858286016135c7565b925050602083015167ffffffffffffffff811115613c9457613c93611eda565b5b613ca0858286016135c7565b9150509250929050565b50565b6000613cba600083613adc565b9150613cc582613caa565b600082019050919050565b6000613cdb82613cad565b9150819050919050565b6000604082019050613cfa60008301856132f7565b8181036020830152613d0c81846129a8565b90509392505050565b600067ffffffffffffffff821115613d3057613d2f611ef5565b5b602082029050602081019050919050565b6000613d54613d4f84613d15565b611f55565b90508083825260208201905060208402830185811115613d7757613d7661212f565b5b835b81811015613dbe57805167ffffffffffffffff811115613d9c57613d9b611fb5565b5b808601613da98982613491565b85526020850194505050602081019050613d79565b5050509392505050565b600082601f830112613ddd57613ddc611fb5565b5b8151613ded848260208601613d41565b91505092915050565b600060208284031215613e0c57613e0b611ed5565b5b600082015167ffffffffffffffff811115613e2a57613e29611eda565b5b613e3684828501613dc8565b91505092915050565b6000604082019050613e5460008301856136ac565b8181036020830152613e6681846129a8565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613eb657607f821691505b60208210811415613eca57613ec9613e6f565b5b50919050565b60008190508160005260206000209050919050565b60008154613ef281613e9e565b613efc8186612997565b94506001821660008114613f175760018114613f2957613f5c565b60ff1983168652602086019350613f5c565b613f3285613ed0565b60005b83811015613f5457815481890152600182019150602081019050613f35565b808801955050505b50505092915050565b60006040820190508181036000830152613f7f8185613ee5565b90508181036020830152613f938184612817565b90509392505050565b60006040820190508181036000830152613fb681856129a8565b90508181036020830152613fca8184612817565b9050939250505056fea2646970667358221220fcdb43b0e6243c4192d2e3121973076a4a598f40394f4de0f4eab2ecb6203e3564736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063bb7bae0a1161008c578063ee2cc36411610066578063ee2cc36414610203578063fd38f21d1461021f578063ff4aec7d1461024f578063ffbbfcb01461026d576100cf565b8063bb7bae0a146101ad578063bcbb3597146101c9578063d7e84fbf146101e5576100cf565b8063392e53cd146100d457806360727f8e146100f257806361b8ce8c1461012257806364e65a62146101405780637e48532c1461015c57806381d12c581461017a575b600080fd5b6100dc61028b565b6040516100e991906121d1565b60405180910390f35b61010c60048036038101906101079190612698565b61029b565b604051610119919061277c565b60405180910390f35b61012a61051b565b60405161013791906127b7565b60405180910390f35b61015a600480360381019061015591906127f6565b610521565b005b6101646105ee565b604051610171919061277c565b60405180910390f35b610194600480360381019061018f91906128dd565b610643565b6040516101a494939291906129ac565b60405180910390f35b6101c760048036038101906101c29190612a24565b61070b565b005b6101e360048036038101906101de9190612a83565b610777565b005b6101ed6107ee565b6040516101fa9190612b2b565b60405180910390f35b61021d60048036038101906102189190612b65565b610814565b005b61023960048036038101906102349190612c62565b61092d565b604051610246919061277c565b60405180910390f35b610257610b36565b604051610264919061277c565b60405180910390f35b610275610b6f565b60405161028291906127b7565b60405180910390f35b60008060001b6001541415905090565b60606102e36102a8610b7c565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c44565b61032a6000600480549050116040518060400160405280600b81526020017f4e6f207265717565737473000000000000000000000000000000000000000000815250610c44565b6000806103408467ffffffffffffffff16610c8a565b915091506103946000836040015167ffffffffffffffff16116040518060400160405280600f81526020017f4e6f2076616c6964206f66666572730000000000000000000000000000000000815250610c44565b61039e8483610ed4565b81602001518561010001819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663346ab17587876040518363ffffffff1660e01b815260040161040b929190612f1b565b600060405180830381600087803b15801561042557600080fd5b505af1158015610439573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104629190612fbb565b90506364e65a6260e01b8184600001518560400151604051602001610488929190613004565b604051602081830303815290604052846104a061112f565b6040516024016104b3949392919061305c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935050505092915050565b60055481565b8061056d6105328260000135611171565b6040518060400160405280600b81526020017f496e76616c6964206b6579000000000000000000000000000000000000000000815250610c44565b60008351111561058957610588610583846111a5565b6111b7565b5b60006105b7600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687611382565b90506105c38582611450565b508060200135600181905550600260008154809291906105e2906130e5565b91905055505050505050565b60606106366105fb610b7c565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c44565b61063e6114ac565b905090565b6004818154811061065357600080fd5b906000526020600020906004020160009150905080600001549080600101805461067c9061315d565b80601f01602080910402602001604051908101604052809291908181526020018280546106a89061315d565b80156106f55780601f106106ca576101008083540402835291602001916106f5565b820191906000526020600020905b8154815290600101906020018083116106d857829003601f168201915b5050505050908060020154908060030154905084565b61075261071661028b565b156040518060400160405280601381526020017f416c726561647920696e697469616c697a656400000000000000000000000000815250610c44565b81600181905550806000816fffffffffffffffffffffffffffffffff19169055505050565b7ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb4781600001356fffffffffffffffffffffffffffffffff19168260400160208101906107c3919061318f565b8380606001906107d391906131cb565b6040516107e394939291906132e2565b60405180910390a150565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806108606108258260000135611171565b6040518060400160405280600b81526020017f496e76616c6964206b6579000000000000000000000000000000000000000000815250610c44565b600483908060018154018082558091505060019003906000526020600020906004020160009091909190915081816108989190613765565b5050600560008154809291906108ad906130e5565b91905055507fbf51327c63fb3c8741d4233ae0315e3e1a74641532f4e59c307f72314a34623583600001358480602001906108e891906133d6565b86604001356040516108fd94939291906137a0565b60405180910390a1806020013560018190555060026000815480929190610923906130e5565b9190505550505050565b606061097561093a610b7c565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c44565b60003073ffffffffffffffffffffffffffffffffffffffff1663ff4aec7d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109bf57600080fd5b505af11580156109d3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109fc9190612fbb565b90506000610a0b8260016115f7565b915050610a5a60008267ffffffffffffffff16116040518060400160405280600b81526020017f65677020746f6f206c6f77000000000000000000000000000000000000000000815250610c44565b6000610a65836116d2565b90506000604051806080016040528060055481526020018781526020018867ffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff1916815250905063ee2cc36460e01b81610abc61112f565b604051602401610acd9291906138ab565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505094505050505092915050565b6060610b40610b7c565b610b4957600080fd5b6000610b53611808565b905080806020019051810190610b699190612fbb565b91505090565b6000600480549050905090565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff16604051610ba89061390c565b600060405180830381855afa9150503d8060008114610be3576040519150601f19603f3d011682016040523d82523d6000602084013e610be8565b606091505b509150915081610c35576342010000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610c2c929190613930565b60405180910390fd5b80516020820151935050505090565b81610c8657806040517f0c25cd98000000000000000000000000000000000000000000000000000000008152600401610c7d9190613960565b60405180910390fd5b5050565b610c92612014565b606060005b600480549050811015610ece57600060048281548110610cba57610cb9613982565b5b906000526020600020906004020160405180608001604052908160008201548152602001600182018054610ced9061315d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d199061315d565b8015610d665780601f10610d3b57610100808354040283529160200191610d66565b820191906000526020600020905b815481529060010190602001808311610d4957829003601f168201915b505050505081526020016002820154815260200160038201546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152505090508481604001511015610dd257610dca82846118df90919063ffffffff16565b925050610ebd565b6000610e1782606001516040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c650000000000000000815250611913565b9050600080610e278360006115f7565b91509150811580610e42575060008167ffffffffffffffff16145b15610e6157610e5a85876118df90919063ffffffff16565b9550610eb8565b866040015167ffffffffffffffff168167ffffffffffffffff161115610eb757604051806080016040528085600001518152602001856020015181526020018267ffffffffffffffff1681526020018481525096505b5b505050505b80610ec7906130e5565b9050610c97565b50915091565b6000600367ffffffffffffffff811115610ef157610ef0612216565b5b604051908082528060200260200182016040528015610f1f5781602001602082028036833780820191505090505b509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110610f5957610f58613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634210000181600181518110610fac57610fab613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503081600281518110610ffb57610ffa613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006110788483846040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152506119fa565b90506110c281600001516040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152508560600151611b00565b61112981600001516040518060400160405280601e81526020017f64656661756c743a76303a65746842756e646c6553696d526573756c74730000815250856040015160405160200161111591906139b1565b604051602081830303815290604052611b00565b50505050565b611137612046565b604051806040016040528061114d600254611be3565b8152602001611169600160025461116491906139cc565b611bfd565b815250905090565b6000600154826040516020016111879190613a31565b60405160208183030381529060405280519060200120149050919050565b60606111b082611c35565b9050919050565b6000815190505b600081111561137e576000826001836111d79190613a4c565b815181106111e8576111e7613982565b5b6020026020010151905060006004828154811061120857611207613982565b5b9060005260206000209060040201600001549050600160048054905061122e9190613a4c565b8210156112e157600460016004805490506112499190613a4c565b8154811061125a57611259613982565b5b90600052602060002090600402016004838154811061127c5761127b613982565b5b90600052602060002090600402016000820154816000015560018201816001019080546112a89061315d565b6112b3929190612066565b5060028201548160020155600382015481600301906fffffffffffffffffffffffffffffffff191690559050505b60048054806112f3576112f2613a80565b5b600190038181906000526020600020906004020160008082016000905560018201600061132091906120f3565b60028201600090556003820160009055505090557f5fa4d8243d9549d33d615899224efcef51bfcacb970a31f68862ce74c858dbf08160405161136391906127b7565b60405180910390a150508061137790613aaf565b90506111be565b5050565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516113ac9190613b0a565b6000604051808303816000865af19150503d80600081146113e9576040519150601f19603f3d011682016040523d82523d6000602084013e6113ee565b606091505b5091509150611432826040518060400160405280601481526020017f45787465726e616c2063616c6c206661696c6564000000000000000000000000815250610c44565b808060200190518101906114469190613b91565b9250505092915050565b600080838060200190518101906114679190613c04565b915091507f91badfc611f9ad79e4d6a58176e5c4cedc4f8ed9001447825f503e792bbf09e282828560405161149e93929190613c44565b60405180910390a150505050565b60606114f46114b9610b7c565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c44565b61153b6114ff61028b565b156040518060400160405280601381526020017f416c726561647920696e697469616c697a656400000000000000000000000000815250610c44565b6000611545611808565b9050600061155282611d00565b905060006115758380602001905181019061156d9190613c97565b600254611edc565b905063bb7bae0a60e01b8183604051602401611592929190613cc4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935050505090565b600080600080634210000073ffffffffffffffffffffffffffffffffffffffff16614e208760405160200161162c919061277c565b6040516020818303038152906040526040516116489190613b0a565b6000604051808303818686fa925050503d8060008114611684576040519150601f19603f3d011682016040523d82523d6000602084013e611689565b606091505b50915091506116a185158061169b5750825b82610c44565b81156116c8576001818060200190518101906116bd9190613ced565b9350935050506116cb565b50505b9250929050565b600080600167ffffffffffffffff8111156116f0576116ef612216565b5b60405190808252806020026020018201604052801561171e5781602001602082028036833780820191505090505b509050308160008151811061173657611735613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006117b4600083846040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c6500000000000000008152506119fa565b90506117fa81600001516040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c65000000000000000081525086611b00565b806000015192505050919050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff1660405160200160405160208183030381529060405260405161184a9190613b0a565b600060405180830381855afa9150503d8060008114611885576040519150601f19603f3d011682016040523d82523d6000602084013e61188a565b606091505b5091509150816118d7576342010001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016118ce929190613930565b60405180910390fd5b809250505090565b6060826118eb83611f16565b6040516020016118fc929190613d1a565b604051602081830303815290604052905092915050565b6060600080634202000173ffffffffffffffffffffffffffffffffffffffff168585604051602001611946929190613d3e565b6040516020818303038152906040526040516119629190613b0a565b600060405180830381855afa9150503d806000811461199d576040519150601f19603f3d011682016040523d82523d6000602084013e6119a2565b606091505b5091509150816119ef576342020001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016119e6929190613930565b60405180910390fd5b809250505092915050565b611a02612133565b600080634203000073ffffffffffffffffffffffffffffffffffffffff1687878787604051602001611a379493929190613df4565b604051602081830303815290604052604051611a539190613b0a565b600060405180830381855afa9150503d8060008114611a8e576040519150601f19603f3d011682016040523d82523d6000602084013e611a93565b606091505b509150915081611ae0576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611ad7929190613930565b60405180910390fd5b80806020019051810190611af4919061402f565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001611b3393929190614078565b604051602081830303815290604052604051611b4f9190613b0a565b600060405180830381855afa9150503d8060008114611b8a576040519150601f19603f3d011682016040523d82523d6000602084013e611b8f565b606091505b509150915081611bdc576342020000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611bd3929190613930565b60405180910390fd5b5050505050565b6000611bf6611bf0611f73565b83611fd3565b9050919050565b6000611c0882611be3565b604051602001611c189190613a31565b604051602081830303815290604052805190602001209050919050565b606060208251611c4591906140ec565b67ffffffffffffffff811115611c5e57611c5d612216565b5b604051908082528060200260200182016040528015611c8c5781602001602082028036833780820191505090505b50905060005b60208351611ca091906140ec565b811015611cfa57611cc88360208084611cb9919061411d565b611cc391906139cc565b612006565b828281518110611cdb57611cda613982565b5b6020026020010181815250508080611cf2906130e5565b915050611c92565b50919050565b600080600367ffffffffffffffff811115611d1e57611d1d612216565b5b604051908082528060200260200182016040528015611d4c5781602001602082028036833780820191505090505b5090503081600081518110611d6457611d63613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634203000181600181518110611db757611db6613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634202000181600281518110611e0a57611e09613982565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000611e88600083846040518060400160405280601181526020017f626c6f636b61643a76303a7365637265740000000000000000000000000000008152506119fa565b9050611ece81600001516040518060400160405280601181526020017f626c6f636b61643a76303a73656372657400000000000000000000000000000081525086611b00565b806000015192505050919050565b6000611ee88383611fd3565b604051602001611ef89190613a31565b60405160208183030381529060405280519060200120905092915050565b6060602067ffffffffffffffff811115611f3357611f32612216565b5b6040519080825280601f01601f191660200182016040528015611f655781602001600182028036833780820191505090505b509050816020820152919050565b600080611fb76000546040518060400160405280601181526020017f626c6f636b61643a76303a736563726574000000000000000000000000000000815250611913565b905080806020019051810190611fcd9190613c97565b91505090565b60008282604051602001611fe8929190614177565b60405160208183030381529060405280519060200120905092915050565b600081830151905092915050565b60405180608001604052806000815260200160608152602001600067ffffffffffffffff168152602001606081525090565b604051806040016040528060008019168152602001600080191681525090565b8280546120729061315d565b90600052602060002090601f01602090048101928261209457600085556120e2565b82601f106120a557805485556120e2565b828001600101855582156120e257600052602060002091601f016020900482015b828111156120e15782548255916001019190600101906120c6565b5b5090506120ef9190612199565b5090565b5080546120ff9061315d565b6000825580601f106121115750612130565b601f01602090049060005260206000209081019061212f9190612199565b5b50565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b5b808211156121b257600081600090555060010161219a565b5090565b60008115159050919050565b6121cb816121b6565b82525050565b60006020820190506121e660008301846121c2565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61224e82612205565b810181811067ffffffffffffffff8211171561226d5761226c612216565b5b80604052505050565b60006122806121ec565b905061228c8282612245565b919050565b600080fd5b600067ffffffffffffffff82169050919050565b6122b381612296565b81146122be57600080fd5b50565b6000813590506122d0816122aa565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156122fb576122fa612216565b5b61230482612205565b9050602081019050919050565b82818337600083830152505050565b600061233361232e846122e0565b612276565b90508281526020810184848401111561234f5761234e6122db565b5b61235a848285612311565b509392505050565b600082601f830112612377576123766122d6565b5b8135612387848260208601612320565b91505092915050565b6000819050919050565b6123a381612390565b81146123ae57600080fd5b50565b6000813590506123c08161239a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123f1826123c6565b9050919050565b612401816123e6565b811461240c57600080fd5b50565b60008135905061241e816123f8565b92915050565b600067ffffffffffffffff82111561243f5761243e612216565b5b602082029050602081019050919050565b600080fd5b60006080828403121561246b5761246a612200565b5b6124756080612276565b90506000612485848285016122c1565b6000830152506020612499848285016122c1565b60208301525060406124ad8482850161240f565b60408301525060606124c1848285016122c1565b60608301525092915050565b60006124e06124db84612424565b612276565b9050808382526020820190506080840283018581111561250357612502612450565b5b835b8181101561252c57806125188882612455565b845260208401935050608081019050612505565b5050509392505050565b600082601f83011261254b5761254a6122d6565b5b813561255b8482602086016124cd565b91505092915050565b6000610120828403121561257b5761257a612200565b5b612586610120612276565b90506000612596848285016122c1565b600083015250602082013567ffffffffffffffff8111156125ba576125b9612291565b5b6125c684828501612362565b60208301525060406125da848285016123b1565b60408301525060606125ee848285016122c1565b60608301525060806126028482850161240f565b60808301525060a0612616848285016122c1565b60a08301525060c061262a848285016123b1565b60c08301525060e082013567ffffffffffffffff81111561264e5761264d612291565b5b61265a84828501612536565b60e08301525061010082013567ffffffffffffffff81111561267f5761267e612291565b5b61268b84828501612362565b6101008301525092915050565b600080604083850312156126af576126ae6121f6565b5b600083013567ffffffffffffffff8111156126cd576126cc6121fb565b5b6126d985828601612564565b92505060206126ea858286016122c1565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561272e578082015181840152602081019050612713565b8381111561273d576000848401525b50505050565b600061274e826126f4565b61275881856126ff565b9350612768818560208601612710565b61277181612205565b840191505092915050565b600060208201905081810360008301526127968184612743565b905092915050565b6000819050919050565b6127b18161279e565b82525050565b60006020820190506127cc60008301846127a8565b92915050565b600080fd5b6000604082840312156127ed576127ec6127d2565b5b81905092915050565b60008060008060a085870312156128105761280f6121f6565b5b600085013567ffffffffffffffff81111561282e5761282d6121fb565b5b61283a87828801612362565b945050602085013567ffffffffffffffff81111561285b5761285a6121fb565b5b61286787828801612362565b935050604085013567ffffffffffffffff811115612888576128876121fb565b5b61289487828801612362565b92505060606128a5878288016127d7565b91505092959194509250565b6128ba8161279e565b81146128c557600080fd5b50565b6000813590506128d7816128b1565b92915050565b6000602082840312156128f3576128f26121f6565b5b6000612901848285016128c8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006129318261290a565b61293b8185612915565b935061294b818560208601612710565b61295481612205565b840191505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b60006129968261295f565b9050919050565b6129a68161298b565b82525050565b60006080820190506129c160008301876127a8565b81810360208301526129d38186612926565b90506129e260408301856127a8565b6129ef606083018461299d565b95945050505050565b612a018161295f565b8114612a0c57600080fd5b50565b600081359050612a1e816129f8565b92915050565b60008060408385031215612a3b57612a3a6121f6565b5b6000612a49858286016123b1565b9250506020612a5a85828601612a0f565b9150509250929050565b600060c08284031215612a7a57612a796127d2565b5b81905092915050565b600060208284031215612a9957612a986121f6565b5b600082013567ffffffffffffffff811115612ab757612ab66121fb565b5b612ac384828501612a64565b91505092915050565b6000819050919050565b6000612af1612aec612ae7846123c6565b612acc565b6123c6565b9050919050565b6000612b0382612ad6565b9050919050565b6000612b1582612af8565b9050919050565b612b2581612b0a565b82525050565b6000602082019050612b406000830184612b1c565b92915050565b600060808284031215612b5c57612b5b6127d2565b5b81905092915050565b60008060608385031215612b7c57612b7b6121f6565b5b600083013567ffffffffffffffff811115612b9a57612b996121fb565b5b612ba685828601612b46565b9250506020612bb7858286016127d7565b9150509250929050565b600067ffffffffffffffff821115612bdc57612bdb612216565b5b612be582612205565b9050602081019050919050565b6000612c05612c0084612bc1565b612276565b905082815260208101848484011115612c2157612c206122db565b5b612c2c848285612311565b509392505050565b600082601f830112612c4957612c486122d6565b5b8135612c59848260208601612bf2565b91505092915050565b60008060408385031215612c7957612c786121f6565b5b6000612c87858286016122c1565b925050602083013567ffffffffffffffff811115612ca857612ca76121fb565b5b612cb485828601612c34565b9150509250929050565b612cc781612296565b82525050565b600082825260208201905092915050565b6000612ce9826126f4565b612cf38185612ccd565b9350612d03818560208601612710565b612d0c81612205565b840191505092915050565b612d2081612390565b82525050565b612d2f816123e6565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b608082016000820151612d776000850182612cbe565b506020820151612d8a6020850182612cbe565b506040820151612d9d6040850182612d26565b506060820151612db06060850182612cbe565b50505050565b6000612dc28383612d61565b60808301905092915050565b6000602082019050919050565b6000612de682612d35565b612df08185612d40565b9350612dfb83612d51565b8060005b83811015612e2c578151612e138882612db6565b9750612e1e83612dce565b925050600181019050612dff565b5085935050505092915050565b600061012083016000830151612e526000860182612cbe565b5060208301518482036020860152612e6a8282612cde565b9150506040830151612e7f6040860182612d17565b506060830151612e926060860182612cbe565b506080830151612ea56080860182612d26565b5060a0830151612eb860a0860182612cbe565b5060c0830151612ecb60c0860182612d17565b5060e083015184820360e0860152612ee38282612ddb565b915050610100830151848203610100860152612eff8282612cde565b9150508091505092915050565b612f1581612296565b82525050565b60006040820190508181036000830152612f358185612e39565b9050612f446020830184612f0c565b9392505050565b6000612f5e612f59846122e0565b612276565b905082815260208101848484011115612f7a57612f796122db565b5b612f85848285612710565b509392505050565b600082601f830112612fa257612fa16122d6565b5b8151612fb2848260208601612f4b565b91505092915050565b600060208284031215612fd157612fd06121f6565b5b600082015167ffffffffffffffff811115612fef57612fee6121fb565b5b612ffb84828501612f8d565b91505092915050565b600060408201905061301960008301856127a8565b6130266020830184612f0c565b9392505050565b6040820160008201516130436000850182612d17565b5060208201516130566020850182612d17565b50505050565b600060a08201905081810360008301526130768187612743565b9050818103602083015261308a8186612743565b9050818103604083015261309e8185612743565b90506130ad606083018461302d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006130f08261279e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613123576131226130b6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061317557607f821691505b602082108114156131895761318861312e565b5b50919050565b6000602082840312156131a5576131a46121f6565b5b60006131b3848285016122c1565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126131e8576131e76131bc565b5b80840192508235915067ffffffffffffffff82111561320a576132096131c1565b5b602083019250602082023603831315613226576132256131c6565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60006132558383612d26565b60208301905092915050565b6000613270602084018461240f565b905092915050565b6000602082019050919050565b6000613291838561322e565b935061329c8261323f565b8060005b858110156132d5576132b28284613261565b6132bc8882613249565b97506132c783613278565b9250506001810190506132a0565b5085925050509392505050565b60006060820190506132f7600083018761299d565b6133046020830186612f0c565b8181036040830152613317818486613285565b905095945050505050565b6000813561332f816128b1565b80915050919050565b60008160001b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61337184613338565b9350801983169250808416831791505092915050565b60006133a261339d6133988461279e565b612acc565b61279e565b9050919050565b6000819050919050565b6133bc82613387565b6133cf6133c8826133a9565b8354613345565b8255505050565b600080833560016020038436030381126133f3576133f26131bc565b5b80840192508235915067ffffffffffffffff821115613415576134146131c1565b5b602083019250600182023603831315613431576134306131c6565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026134a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613469565b6134b08683613469565b95508019841693508086168417925050509392505050565b6134d183613387565b6134e56134dd826133a9565b848454613476565b825550505050565b600090565b6134fa6134ed565b6135058184846134c8565b505050565b5b818110156135295761351e6000826134f2565b60018101905061350b565b5050565b601f82111561356e5761353f81613444565b61354884613459565b81016020851015613557578190505b61356b61356385613459565b83018261350a565b50505b505050565b600082821c905092915050565b600061359160001984600802613573565b1980831691505092915050565b60006135aa8383613580565b9150826002028217905092915050565b6135c48383613439565b67ffffffffffffffff8111156135dd576135dc612216565b5b6135e7825461315d565b6135f282828561352d565b6000601f831160018114613621576000841561360f578287013590505b613619858261359e565b865550613681565b601f19841661362f86613444565b60005b8281101561365757848901358255600182019150602085019450602081019050613632565b868310156136745784890135613670601f891682613580565b8355505b6001600288020188555050505b50505050505050565b6136958383836135ba565b505050565b600081356136a7816129f8565b80915050919050565b6000819050919050565b6136c38261298b565b6136d66136cf826136b0565b8354613345565b8255505050565b6000810160008301806136ef81613322565b90506136fb81846133b3565b505050600181016020830161371081856133d6565b61371b81838661368a565b5050505060028101604083018061373181613322565b905061373d81846133b3565b5050506003810160608301806137528161369a565b905061375e81846136ba565b5050505050565b61376f82826136dd565b5050565b600061377f8385612915565b935061378c838584612311565b61379583612205565b840190509392505050565b60006060820190506137b560008301876127a8565b81810360208301526137c8818587613773565b90506137d760408301846127a8565b95945050505050565b6137e98161279e565b82525050565b600082825260208201905092915050565b600061380b8261290a565b61381581856137ef565b9350613825818560208601612710565b61382e81612205565b840191505092915050565b6138428161298b565b82525050565b600060808301600083015161386060008601826137e0565b50602083015184820360208601526138788282613800565b915050604083015161388d60408601826137e0565b5060608301516138a06060860182613839565b508091505092915050565b600060608201905081810360008301526138c58185613848565b90506138d4602083018461302d565b9392505050565b600081905092915050565b50565b60006138f66000836138db565b9150613901826138e6565b600082019050919050565b6000613917826138e9565b9150819050919050565b61392a816123e6565b82525050565b60006040820190506139456000830185613921565b81810360208301526139578184612743565b90509392505050565b6000602082019050818103600083015261397a8184612926565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020820190506139c66000830184612f0c565b92915050565b60006139d78261279e565b91506139e28361279e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613a1757613a166130b6565b5b828201905092915050565b613a2b81612390565b82525050565b6000602082019050613a466000830184613a22565b92915050565b6000613a578261279e565b9150613a628361279e565b925082821015613a7557613a746130b6565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613aba8261279e565b91506000821415613ace57613acd6130b6565b5b600182039050919050565b6000613ae4826126f4565b613aee81856138db565b9350613afe818560208601612710565b80840191505092915050565b6000613b168284613ad9565b915081905092915050565b6000613b34613b2f84612bc1565b612276565b905082815260208101848484011115613b5057613b4f6122db565b5b613b5b848285612710565b509392505050565b600082601f830112613b7857613b776122d6565b5b8151613b88848260208601613b21565b91505092915050565b600060208284031215613ba757613ba66121f6565b5b600082015167ffffffffffffffff811115613bc557613bc46121fb565b5b613bd184828501613b63565b91505092915050565b600081519050613be9816128b1565b92915050565b600081519050613bfe816122aa565b92915050565b60008060408385031215613c1b57613c1a6121f6565b5b6000613c2985828601613bda565b9250506020613c3a85828601613bef565b9150509250929050565b6000606082019050613c5960008301866127a8565b613c666020830185612f0c565b8181036040830152613c788184612926565b9050949350505050565b600081519050613c918161239a565b92915050565b600060208284031215613cad57613cac6121f6565b5b6000613cbb84828501613c82565b91505092915050565b6000604082019050613cd96000830185613a22565b613ce6602083018461299d565b9392505050565b600060208284031215613d0357613d026121f6565b5b6000613d1184828501613bef565b91505092915050565b6000613d268285613ad9565b9150613d328284613ad9565b91508190509392505050565b6000604082019050613d53600083018561299d565b8181036020830152613d658184612926565b90509392505050565b600081519050919050565b6000819050602082019050919050565b6000602082019050919050565b6000613da182613d6e565b613dab818561322e565b9350613db683613d79565b8060005b83811015613de7578151613dce8882613249565b9750613dd983613d89565b925050600181019050613dba565b5085935050505092915050565b6000608082019050613e096000830187612f0c565b8181036020830152613e1b8186613d96565b90508181036040830152613e2f8185613d96565b90508181036060830152613e438184612926565b905095945050505050565b600081519050613e5d816129f8565b92915050565b600067ffffffffffffffff821115613e7e57613e7d612216565b5b602082029050602081019050919050565b600081519050613e9e816123f8565b92915050565b6000613eb7613eb284613e63565b612276565b90508083825260208201905060208402830185811115613eda57613ed9612450565b5b835b81811015613f035780613eef8882613e8f565b845260208401935050602081019050613edc565b5050509392505050565b600082601f830112613f2257613f216122d6565b5b8151613f32848260208601613ea4565b91505092915050565b600060c08284031215613f5157613f50612200565b5b613f5b60c0612276565b90506000613f6b84828501613e4e565b6000830152506020613f7f84828501613e4e565b6020830152506040613f9384828501613bef565b604083015250606082015167ffffffffffffffff811115613fb757613fb6612291565b5b613fc384828501613f0d565b606083015250608082015167ffffffffffffffff811115613fe757613fe6612291565b5b613ff384828501613f0d565b60808301525060a082015167ffffffffffffffff81111561401757614016612291565b5b61402384828501613b63565b60a08301525092915050565b600060208284031215614045576140446121f6565b5b600082015167ffffffffffffffff811115614063576140626121fb565b5b61406f84828501613f3b565b91505092915050565b600060608201905061408d600083018661299d565b818103602083015261409f8185612926565b905081810360408301526140b38184612743565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006140f78261279e565b91506141028361279e565b925082614112576141116140bd565b5b828204905092915050565b60006141288261279e565b91506141338361279e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561416c5761416b6130b6565b5b828202905092915050565b600060408201905061418c6000830185613a22565b61419960208301846127a8565b939250505056fea2646970667358221220f94858d7b8106a3aeb4d7f15a5bd0c0fe281b91b5d4ec2ecd55ef61725a43c6d64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1385,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "secretBidId",
        "offset": 0,
        "slot": "0",
        "type": "t_userDefinedValueType(DataId)1886"
      },
      {
        "astId": 1387,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "presentHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 1389,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 473,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "builder",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Builder)1344"
      },
      {
        "astId": 477,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "requests",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(AdRequest)432_storage)dyn_storage"
      },
      {
        "astId": 479,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "nextId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_struct(AdRequest)432_storage)dyn_storage": {
        "base": "t_struct(AdRequest)432_storage",
        "encoding": "dynamic_array",
        "label": "struct BlockAdAuctionV2.AdRequest[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Builder)1344": {
        "encoding": "inplace",
        "label": "contract Builder",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AdRequest)432_storage": {
        "encoding": "inplace",
        "label": "struct BlockAdAuctionV2.AdRequest",
        "members": [
          {
            "astId": 424,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 426,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "extra",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 428,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "blockLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 431,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "paymentBidId",
            "offset": 0,
            "slot": "3",
            "type": "t_userDefinedValueType(DataId)1886"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(DataId)1886": {
        "encoding": "inplace",
        "label": "Suave.DataId",
        "numberOfBytes": "32"
      }
    }
  }
}