{
  "address": "0x0829fC66B8D714f789e3f333c10d38B6B92D0D70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "boostRelayUrl_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "PeekerReverted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "SuaveError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "SuaveErrorWithData",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.DataId",
          "name": "dataId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "allowedPeekers",
          "type": "address[]"
        }
      ],
      "name": "DataRecordEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "extra",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockLimit",
          "type": "uint256"
        }
      ],
      "name": "RequestAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "egp",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "blockHash",
          "type": "string"
        }
      ],
      "name": "RequestIncluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RequestRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "extra",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parentBeaconBlockRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "fillPending",
              "type": "bool"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        }
      ],
      "name": "buildBlock",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "builderCall",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "includedRequestB",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "pendingRemovalsB",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ConfidentialControl.UnlockArgs",
          "name": "uArgs",
          "type": "tuple"
        }
      ],
      "name": "buildCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "builder",
      "outputs": [
        {
          "internalType": "contract Builder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "blockLimit",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "extra",
          "type": "string"
        }
      ],
      "name": "buyAd",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "extra",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "blockLimit",
              "type": "uint256"
            },
            {
              "internalType": "Suave.DataId",
              "name": "paymentBidId",
              "type": "bytes16"
            }
          ],
          "internalType": "struct BlockAdAuctionV2.AdRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ConfidentialControl.UnlockArgs",
          "name": "uArgs",
          "type": "tuple"
        }
      ],
      "name": "buyAdCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nextHash",
          "type": "bytes32"
        },
        {
          "internalType": "Suave.DataId",
          "name": "sBidId",
          "type": "bytes16"
        }
      ],
      "name": "ccCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confidentialConstructor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.DataId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.DataId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.DataRecord",
          "name": "dataRecord",
          "type": "tuple"
        }
      ],
      "name": "emitDataRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchConfidentialBundleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "extra",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "blockLimit",
          "type": "uint256"
        },
        {
          "internalType": "Suave.DataId",
          "name": "paymentBidId",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeaa503a088dc938e1e55e437f811fce0ee9996e6af4075cbc27215583856610b",
  "receipt": {
    "to": null,
    "from": "0x16f2Aa8dF055b6e672b93Ded41FecCCabAB565B0",
    "contractAddress": "0x0829fC66B8D714f789e3f333c10d38B6B92D0D70",
    "transactionIndex": 0,
    "gasUsed": "7491349",
    "logsBloom": "0x
    "blockHash": "0xc2f06e0a3a49bc13689a3b19a174937d017347bb238f579637efb5cf706f5e74",
    "transactionHash": "0xeaa503a088dc938e1e55e437f811fce0ee9996e6af4075cbc27215583856610b",
    "logs": [],
    "blockNumber": 2115019,
    "cumulativeGasUsed": "7491349",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://0xafa4c6985aa049fb79dd37010438cfebeb0f2bd42b115b89dd678dab0670c1de38da0c4e9138c9290a398ecd9a0b3110@boost-relay-goerli.flashbots.net"
  ],
  "numDeployments": 1,
  "solcInputHash": "2c77e4990a5e02143cdaa02b8820ef1d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"boostRelayUrl_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"PeekerReverted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"SuaveError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SuaveErrorWithData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.DataId\",\"name\":\"dataId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"}],\"name\":\"DataRecordEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"}],\"name\":\"RequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"egp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"blockHash\",\"type\":\"string\"}],\"name\":\"RequestIncluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RequestRemoved\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extra\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentBeaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"fillPending\",\"type\":\"bool\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"buildBlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"builderCall\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"includedRequestB\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pendingRemovalsB\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ConfidentialControl.UnlockArgs\",\"name\":\"uArgs\",\"type\":\"tuple\"}],\"name\":\"buildCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"builder\",\"outputs\":[{\"internalType\":\"contract Builder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blockLimit\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"}],\"name\":\"buyAd\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"},{\"internalType\":\"Suave.DataId\",\"name\":\"paymentBidId\",\"type\":\"bytes16\"}],\"internalType\":\"struct BlockAdAuctionV2.AdRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ConfidentialControl.UnlockArgs\",\"name\":\"uArgs\",\"type\":\"tuple\"}],\"name\":\"buyAdCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"},{\"internalType\":\"Suave.DataId\",\"name\":\"sBidId\",\"type\":\"bytes16\"}],\"name\":\"ccCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confidentialConstructor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.DataId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.DataId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.DataRecord\",\"name\":\"dataRecord\",\"type\":\"tuple\"}],\"name\":\"emitDataRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchConfidentialBundleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"},{\"internalType\":\"Suave.DataId\",\"name\":\"paymentBidId\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/blockad/BlockAdV2.sol\":\"BlockAdAuctionV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/blockad/BlockAdV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { AnyBundleContract, Suave } from \\\"../standard_peekers/bids.sol\\\";\\nimport { ConfidentialControl } from \\\"./lib/ConfidentialControl.sol\\\";\\nimport { DynamicUintArray } from \\\"./lib/Utils.sol\\\";\\nimport { Builder } from \\\"./lib/Builder.sol\\\";\\n\\n\\ncontract BlockAdAuctionV2 is AnyBundleContract, ConfidentialControl {\\n\\tusing DynamicUintArray for bytes;\\n\\n\\tstruct AdRequest {\\n\\t\\tuint id;\\n\\t\\tstring extra;\\n\\t\\tuint blockLimit;\\n\\t\\tSuave.DataId paymentBidId;\\n\\t}\\n\\tstruct Offer {\\n\\t\\tuint id;\\n\\t\\tstring extra;\\n\\t\\tuint64 egp;\\n\\t\\tbytes paymentBundle;\\n\\t}\\n\\n\\tevent RequestAdded(uint indexed id, string extra, uint blockLimit);\\n\\tevent RequestRemoved(uint indexed id);\\n\\tevent RequestIncluded(uint indexed id, uint64 egp, string blockHash);\\n\\n\\tstring internal constant PB_NAMESPACE = \\\"blockad:v0:paymentBundle\\\";\\n\\tstring internal constant EB_NAMESPACE = \\\"default:v0:ethBundles\\\";\\n\\tstring internal constant EB_SIM_NAMESPACE = \\\"default:v0:ethBundleSimResults\\\";\\n\\tBuilder public builder;\\n\\tAdRequest[] public requests;\\n\\tuint public nextId;\\n\\n\\t/**********************************************************************\\n\\t *                           \\u26d3\\ufe0f ON-CHAIN METHODS                       *\\n\\t ***********************************************************************/\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tbuilder = new Builder(boostRelayUrl_);\\n\\t}\\n\\n\\tfunction buyAdCallback(AdRequest calldata request, UnlockArgs calldata uArgs) external unlock(uArgs) {\\n\\t\\trequests.push(request);\\n\\t\\tnextId++;\\n\\t\\temit RequestAdded(request.id, request.extra, request.blockLimit);\\n\\t}\\n\\n\\tfunction buildCallback(\\n\\t\\tbytes memory builderCall,\\n\\t\\tbytes memory includedRequestB,\\n\\t\\tbytes memory pendingRemovalsB,\\n\\t\\tUnlockArgs calldata uArgs\\n\\t) external unlock(uArgs) {\\n\\t\\tif (pendingRemovalsB.length > 0) {\\n\\t\\t\\tremoveRequests(pendingRemovalsB.export());\\n\\t\\t}\\n\\t\\tstring memory blockHash = handleBuilderCallback(address(builder), builderCall);\\n\\t\\thandleIncludedRequest(includedRequestB, blockHash);\\n\\t}\\n\\n\\tfunction requestsLength() public view returns (uint) {\\n\\t\\treturn requests.length;\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udd12 CONFIDENTIAL METHODS                      *\\n\\t ***********************************************************************/\\n\\n\\tfunction confidentialConstructor() public view override onlyConfidential returns (bytes memory) {\\n\\t\\treturn ConfidentialControl.confidentialConstructor();\\n\\t}\\n\\n\\tfunction buyAd(uint64 blockLimit, string memory extra) external onlyConfidential returns (bytes memory) {\\n\\t\\tbytes memory paymentBundle = this.fetchConfidentialBundleData();\\n\\t\\t(,uint64 egp) = simulateBundleSafe(paymentBundle, true);\\n\\t\\tcrequire(egp > 0, \\\"egp too low\\\");\\n\\t\\tSuave.DataId paymentBidId = storePaymentBundle(paymentBundle);\\n\\t\\tAdRequest memory request = AdRequest(nextId, extra, blockLimit, paymentBidId);\\n\\t\\treturn abi.encodeWithSelector(this.buyAdCallback.selector, request, getUnlockPair());\\n\\t}\\n\\n\\tfunction buildBlock(\\n\\t\\tSuave.BuildBlockArgs memory blockArgs,\\n\\t\\tuint64 blockHeight\\n\\t) public onlyConfidential returns (bytes memory) {\\n\\t\\tcrequire(requests.length > 0, \\\"No requests\\\");\\n\\t\\t(Offer memory bestOffer, bytes memory removals) = filterOffers(blockHeight);\\n\\t\\tcrequire(bestOffer.egp > 0, \\\"No valid offers\\\");\\n\\n\\t\\tstoreBundleInPool(blockHeight, bestOffer);\\n\\t\\tblockArgs.extra = bytes(bestOffer.extra);\\n\\t\\t// Expect flow is ordered by egp; if one wants to fail payment they need higher egp\\n\\t\\tbytes memory externalCallback = builder.buildFromPool(blockArgs, blockHeight);\\n\\n\\t\\treturn\\n\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\tthis.buildCallback.selector,\\n\\t\\t\\t\\texternalCallback,\\n\\t\\t\\t\\tabi.encode(bestOffer.id, bestOffer.egp),\\n\\t\\t\\t\\tremovals,\\n\\t\\t\\t\\tgetUnlockPair()\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udee0\\ufe0f INTERNAL METHODS                          *\\n\\t ***********************************************************************/\\n\\n\\tfunction removeRequests(uint[] memory pendingRemovals) internal {\\n\\t\\t// Assume that the pendingRemovals were added in ascending order\\n\\t\\t// Assume that pendingRemovals.length <= requests.length\\n\\t\\tfor (uint i = pendingRemovals.length; i > 0; --i) {\\n\\t\\t\\tuint indexToRemove = pendingRemovals[i - 1];\\n\\t\\t\\tuint requestId = requests[indexToRemove].id;\\n\\t\\t\\tif (indexToRemove < requests.length - 1) {\\n\\t\\t\\t\\trequests[indexToRemove] = requests[requests.length - 1];\\n\\t\\t\\t}\\n\\t\\t\\trequests.pop();\\n\\t\\t\\temit RequestRemoved(requestId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction handleIncludedRequest(bytes memory includedRequestB, string memory blockHash) internal {\\n\\t\\t(uint id, uint64 egp) = abi.decode(includedRequestB, (uint, uint64));\\n\\t\\temit RequestIncluded(id, egp, blockHash);\\n\\t}\\n\\n\\tfunction handleBuilderCallback(address target, bytes memory data) internal returns (string memory) {\\n\\t\\t(bool success, bytes memory res) = target.call(data);\\n\\t\\tcrequire(success, \\\"External call failed\\\");\\n\\t\\treturn abi.decode(res, (string));\\n\\t}\\n\\n\\tfunction storePaymentBundle(bytes memory paymentBundle) internal view returns (Suave.DataId) {\\n\\t\\taddress[] memory peekers = new address[](1);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tSuave.DataRecord memory paymentBid = Suave.newDataRecord(0, peekers, peekers, PB_NAMESPACE);\\n\\t\\tSuave.confidentialStore(paymentBid.id, PB_NAMESPACE, paymentBundle);\\n\\t\\treturn paymentBid.id;\\n\\t}\\n\\n\\tfunction filterOffers(uint blockHeight) internal view returns (Offer memory bestOffer, bytes memory removals) {\\n\\t\\tfor (uint i; i < requests.length; ++i) {\\n\\t\\t\\tAdRequest memory request = requests[i];\\n\\t\\t\\tif (request.blockLimit < blockHeight) {\\n\\t\\t\\t\\tremovals = removals.append(i);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tbytes memory paymentBundle = Suave.confidentialRetrieve(request.paymentBidId, PB_NAMESPACE);\\n\\t\\t\\t(bool success, uint64 egp) = simulateBundleSafe(paymentBundle, false);\\n\\t\\t\\tif (!success || egp == 0) {\\n\\t\\t\\t\\tremovals = removals.append(i);\\n\\t\\t\\t} else if (egp > bestOffer.egp) {\\n\\t\\t\\t\\tbestOffer = Offer(request.id, request.extra, egp, paymentBundle);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction storeBundleInPool(uint64 blockHeight, Offer memory bestOffer) internal view {\\n\\t\\taddress[] memory allowedPeekers = new address[](3);\\n\\t\\tallowedPeekers[0] = address(builder);\\n\\t\\tallowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\t\\tallowedPeekers[2] = address(this);\\n\\t\\tSuave.DataRecord memory paymentBundleBid = Suave.newDataRecord(\\n\\t\\t\\tblockHeight, \\n\\t\\t\\tallowedPeekers, \\n\\t\\t\\tallowedPeekers, \\n\\t\\t\\tEB_NAMESPACE\\n\\t\\t);\\n\\t\\tSuave.confidentialStore(paymentBundleBid.id, EB_NAMESPACE, bestOffer.paymentBundle);\\n\\t\\tSuave.confidentialStore(paymentBundleBid.id, EB_SIM_NAMESPACE, abi.encode(bestOffer.egp));\\n\\t}\\n}\\n\",\"keccak256\":\"0xb86119584a051b85338532cf92a2dbd58c334e632ef1962c3da0434f11eec203\",\"license\":\"MIT\"},\"contracts/blockad/lib/Builder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { EthBlockContract, Suave } from \\\"../../standard_peekers/bids.sol\\\";\\nimport { SuaveContract } from \\\"./SuaveContract.sol\\\";\\n\\n\\ncontract Builder is EthBlockContract, SuaveContract {\\n\\tstring constant BB_NAMESPACE = \\\"blockad:v0:builderBid\\\";\\n\\tstring boostRelayUrl;\\n\\n\\tevent RelaySubmission(bytes32 bidId);\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tboostRelayUrl = boostRelayUrl_;\\n\\t}\\n\\n\\tfunction buildAndEmitCallback(string memory blockHash, bytes32 id) external returns (string memory) {\\n\\t\\temit RelaySubmission(id);\\n\\t\\treturn blockHash;\\n\\t}\\n\\n\\tfunction buildAndEmit(\\n\\t\\tSuave.BuildBlockArgs memory blockArgs,\\n\\t\\tuint64 blockHeight,\\n\\t\\tSuave.DataId[] memory bids,\\n\\t\\tstring memory namespace\\n\\t) public virtual override onlyConfidential returns (bytes memory) {\\n\\t\\t(Suave.DataRecord memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\t\\tstoreBuilderBid(blockBid.id, builderBid);\\n\\t\\tsubmitToRelay(builderBid);\\n\\t\\tstring memory blockHash = extractBlockHash(builderBid, blockArgs.slot);\\n\\t\\treturn abi.encodeWithSelector(this.buildAndEmitCallback.selector, blockHash, keccak256(builderBid));\\n\\t}\\n\\n\\tfunction submitBlock(uint slot) external view onlyConfidential returns (bytes memory) {\\n\\t\\tbytes memory builderBid = Suave.confidentialInputs();\\n\\t\\tsubmitToRelay(builderBid);\\n\\t\\tstring memory blockHash = extractBlockHash(builderBid, slot);\\n\\t\\treturn abi.encodeWithSelector(this.buildAndEmitCallback.selector, blockHash, keccak256(builderBid));\\n\\t}\\n\\n\\tfunction submitToRelay(bytes memory builderBid) internal view {\\n\\t\\t(bool success, bytes memory data) = Suave.SUBMIT_ETH_BLOCK_BID_TO_RELAY\\n\\t\\t\\t.staticcall(abi.encode(boostRelayUrl, builderBid));\\n\\t\\tif (!success) {\\n\\t\\t\\trevert SuaveErrorWithData(string(data), builderBid);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction storeBuilderBid(Suave.DataId blockBidId, bytes memory builderBid) internal view {\\n\\t\\taddress[] memory peekers = new address[](1);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tSuave.confidentialStore(blockBidId, BB_NAMESPACE, builderBid);\\n\\t}\\n\\n\\t// Extract block-hash from stringified SubmitBlockRequest JSON object - method will fail if the struct changes!\\n\\tfunction extractBlockHash(bytes memory builderBid, uint slot) public pure returns (string memory) {\\n\\t\\tuint resultBytesLen = 64;\\n\\t\\tuint offset = 121 + decLen(slot);\\n\\t\\tbytes memory result = new bytes(resultBytesLen);\\n\\t\\tassembly {\\n\\t\\t\\tfor { let i:=32 } lt(i, add(resultBytesLen, 32)) { i:=add(i, 32) } {\\n\\t\\t\\t\\tmstore(add(result, i), mload(add(builderBid, add(offset, i))))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\tfunction decLen(uint num) internal pure returns (uint count) {\\n\\t\\tassembly {\\n\\t\\t\\tfor { let dec := 10 } true { dec := mul(dec, 10) } {\\n\\t\\t\\t\\tcount := add(count, 1)\\n\\t\\t\\t\\tswitch lt(num, dec)\\n\\t\\t\\t\\t\\tcase 1 { break }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0xef71aa4ebf2e13c292016769e52df249ac1c0617a9aaeb47087a566f934639ef\",\"license\":\"MIT\"},\"contracts/blockad/lib/ConfidentialControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { SuaveContract, Suave } from \\\"./SuaveContract.sol\\\";\\n\\n\\nabstract contract ConfidentialControl is SuaveContract {\\n\\tstruct UnlockArgs {\\n\\t\\tbytes32 key;\\n\\t\\tbytes32 nextHash;\\n\\t}\\n\\n\\tmodifier unlock(UnlockArgs calldata unlockPair) {\\n\\t\\tcrequire(isValidKey(unlockPair.key), \\\"Invalid key\\\");\\n\\t\\t_;\\n\\t\\tpresentHash = unlockPair.nextHash;\\n\\t\\tnonce++;\\n\\t}\\n\\n\\tstring internal constant S_NAMESPACE = \\\"blockad:v0:secret\\\";\\n\\tSuave.DataId internal secretBidId;\\n\\tbytes32 internal presentHash;\\n\\tuint internal nonce;\\n\\n\\t/**********************************************************************\\n\\t *                           \\u26d3\\ufe0f ON-CHAIN METHODS                       *\\n\\t ***********************************************************************/\\n\\n\\tfunction ccCallback(bytes32 nextHash, Suave.DataId sBidId) external {\\n\\t\\tcrequire(!isInitialized(), \\\"Already initialized\\\");\\n\\t\\tpresentHash = nextHash;\\n\\t\\tsecretBidId = sBidId;\\n\\t}\\n\\n\\tfunction isInitialized() public view returns (bool) {\\n\\t\\treturn presentHash != 0;\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udd12 CONFIDENTIAL METHODS                      *\\n\\t ***********************************************************************/\\n\\n\\tfunction confidentialConstructor() public view virtual onlyConfidential returns (bytes memory) {\\n\\t\\tcrequire(!isInitialized(), \\\"Already initialized\\\");\\n\\t\\tbytes memory secret = Suave.confidentialInputs();\\n\\t\\tSuave.DataId sBidId = storeSecret(secret);\\n\\t\\tbytes32 nextHash = makeHash(abi.decode(secret, (bytes32)), nonce);\\n\\t\\treturn abi.encodeWithSelector(this.ccCallback.selector, nextHash, sBidId);\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udee0\\ufe0f INTERNAL METHODS                          *\\n\\t ***********************************************************************/\\n\\n\\tfunction storeSecret(bytes memory secret) internal view returns (Suave.DataId) {\\n\\t\\taddress[] memory peekers = new address[](3);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tpeekers[1] = Suave.FETCH_DATA_RECORDS;\\n\\t\\tpeekers[2] = Suave.CONFIDENTIAL_RETRIEVE;\\n\\t\\tSuave.DataRecord memory secretBid = Suave.newDataRecord(0, peekers, peekers, S_NAMESPACE);\\n\\t\\tSuave.confidentialStore(secretBid.id, S_NAMESPACE, secret);\\n\\t\\treturn secretBid.id;\\n\\t}\\n\\n\\tfunction isValidKey(bytes32 key) internal view returns (bool) {\\n\\t\\treturn keccak256(abi.encode(key)) == presentHash;\\n\\t}\\n\\n\\tfunction getUnlockPair() internal view returns (UnlockArgs memory) {\\n\\t\\treturn UnlockArgs(getKey(nonce), getHash(nonce + 1));\\n\\t}\\n\\n\\tfunction getHash(uint _nonce) internal view returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(getKey(_nonce)));\\n\\t}\\n\\n\\tfunction getKey(uint _nonce) internal view returns (bytes32) {\\n\\t\\treturn makeKey(getSecret(), _nonce);\\n\\t}\\n\\n\\tfunction makeHash(bytes32 secret, uint _nonce) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(makeKey(secret, _nonce)));\\n\\t}\\n\\n\\tfunction makeKey(bytes32 secret, uint _nonce) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(secret, _nonce));\\n\\t}\\n\\n\\tfunction getSecret() internal view returns (bytes32) {\\n\\t\\tbytes memory secretB = Suave.confidentialRetrieve(secretBidId, S_NAMESPACE);\\n\\t\\treturn abi.decode(secretB, (bytes32));\\n\\t}\\n}\\n\",\"keccak256\":\"0x49ac0b4b3dbbe2e58f29454ae8586b6bf97105ad52d2b001867b4930da959217\",\"license\":\"MIT\"},\"contracts/blockad/lib/SuaveContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { Suave } from \\\"../../standard_peekers/bids.sol\\\";\\n\\n\\nabstract contract SuaveContract {\\n\\terror SuaveError(string message);\\n\\terror SuaveErrorWithData(string message, bytes data);\\n\\n\\tmodifier onlyConfidential() {\\n\\t\\tcrequire(Suave.isConfidential(), \\\"Not confidential\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction simulateBundleSafe(bytes memory bundle, bool doRevert) internal view returns (bool valid, uint64 egp) {\\n\\t\\t(bool success, bytes memory d) = Suave.SIMULATE_BUNDLE.staticcall{ gas: 20_000 }(abi.encode(bundle));\\n\\t\\tcrequire(!doRevert || success, string(d));\\n\\t\\tif (success) {\\n\\t\\t\\treturn (true, abi.decode(d, (uint64)));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction crequire(bool condition, string memory message) internal pure {\\n\\t\\tif (!condition) {\\n\\t\\t\\trevert SuaveError(message);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x64eb01469afe18f29050571acd52ee35faca1da2c00a87e01d5ea0fdbcdf4bec\",\"license\":\"MIT\"},\"contracts/blockad/lib/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n\\nlibrary DynamicUintArray {\\n\\tfunction append(bytes memory a, uint e) internal pure returns (bytes memory) {\\n\\t\\treturn bytes.concat(a, TypeConversion.toBytes(e));\\n\\t}\\n\\n\\tfunction export(bytes memory a) internal pure returns (uint[] memory) {\\n\\t\\treturn TypeConversion.toUints(a);\\n\\t}\\n}\\n\\nlibrary TypeConversion {\\n\\tfunction toBytes(uint x) internal pure returns (bytes memory y) {\\n\\t\\ty = new bytes(32);\\n\\t\\tassembly {\\n\\t\\t\\tmstore(add(y, 32), x)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction toUint(bytes memory x, uint offset) internal pure returns (uint y) {\\n\\t\\tassembly {\\n\\t\\t\\ty := mload(add(x, offset))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction toUints(bytes memory xs) internal pure returns (uint[] memory ys) {\\n\\t\\tys = new uint[](xs.length / 32);\\n\\t\\tfor (uint i = 0; i < xs.length / 32; i++) {\\n\\t\\t\\tys[i] = toUint(xs, i * 32 + 32);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xec09eed9c1d6d24228b0473b9614be28b428ed832808ac3a75ffbcb444ac54af\",\"license\":\"MIT\"},\"contracts/libraries/Suave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.8;\\n\\nlibrary Suave {\\n    error PeekerReverted(address, bytes);\\n\\n    type DataId is bytes16;\\n\\n    struct BuildBlockArgs {\\n        uint64 slot;\\n        bytes proposerPubkey;\\n        bytes32 parent;\\n        uint64 timestamp;\\n        address feeRecipient;\\n        uint64 gasLimit;\\n        bytes32 random;\\n        Withdrawal[] withdrawals;\\n        bytes extra;\\n        bytes32 parentBeaconBlockRoot;\\n        bool fillPending;\\n    }\\n\\n    struct DataRecord {\\n        DataId id;\\n        DataId salt;\\n        uint64 decryptionCondition;\\n        address[] allowedPeekers;\\n        address[] allowedStores;\\n        string version;\\n    }\\n\\n    struct HttpRequest {\\n        string url;\\n        string method;\\n        string[] headers;\\n        bytes body;\\n    }\\n\\n    struct Withdrawal {\\n        uint64 index;\\n        uint64 validator;\\n        address Address;\\n        uint64 amount;\\n    }\\n\\n    address public constant ANYALLOWED = 0xC8df3686b4Afb2BB53e60EAe97EF043FE03Fb829;\\n\\n    address public constant IS_CONFIDENTIAL_ADDR = 0x0000000000000000000000000000000042010000;\\n\\n    address public constant BUILD_ETH_BLOCK = 0x0000000000000000000000000000000042100001;\\n\\n    address public constant CONFIDENTIAL_INPUTS = 0x0000000000000000000000000000000042010001;\\n\\n    address public constant CONFIDENTIAL_RETRIEVE = 0x0000000000000000000000000000000042020001;\\n\\n    address public constant CONFIDENTIAL_STORE = 0x0000000000000000000000000000000042020000;\\n\\n    address public constant DO_HTTPREQUEST = 0x0000000000000000000000000000000043200002;\\n\\n    address public constant ETHCALL = 0x0000000000000000000000000000000042100003;\\n\\n    address public constant EXTRACT_HINT = 0x0000000000000000000000000000000042100037;\\n\\n    address public constant FETCH_DATA_RECORDS = 0x0000000000000000000000000000000042030001;\\n\\n    address public constant FILL_MEV_SHARE_BUNDLE = 0x0000000000000000000000000000000043200001;\\n\\n    address public constant NEW_DATA_RECORD = 0x0000000000000000000000000000000042030000;\\n\\n    address public constant SIGN_ETH_TRANSACTION = 0x0000000000000000000000000000000040100001;\\n\\n    address public constant SIMULATE_BUNDLE = 0x0000000000000000000000000000000042100000;\\n\\n    address public constant SUBMIT_BUNDLE_JSON_RPC = 0x0000000000000000000000000000000043000001;\\n\\n    address public constant SUBMIT_ETH_BLOCK_BID_TO_RELAY = 0x0000000000000000000000000000000042100002;\\n\\n    // Returns whether execution is off- or on-chain\\n    function isConfidential() internal view returns (bool b) {\\n        (bool success, bytes memory isConfidentialBytes) = IS_CONFIDENTIAL_ADDR.staticcall(\\\"\\\");\\n        if (!success) {\\n            revert PeekerReverted(IS_CONFIDENTIAL_ADDR, isConfidentialBytes);\\n        }\\n        assembly {\\n            // Load the length of data (first 32 bytes)\\n            let len := mload(isConfidentialBytes)\\n            // Load the data after 32 bytes, so add 0x20\\n            b := mload(add(isConfidentialBytes, 0x20))\\n        }\\n    }\\n\\n    function buildEthBlock(BuildBlockArgs memory blockArgs, DataId dataId, string memory namespace)\\n        internal\\n        view\\n        returns (bytes memory, bytes memory)\\n    {\\n        (bool success, bytes memory data) = BUILD_ETH_BLOCK.staticcall(abi.encode(blockArgs, dataId, namespace));\\n        if (!success) {\\n            revert PeekerReverted(BUILD_ETH_BLOCK, data);\\n        }\\n\\n        return abi.decode(data, (bytes, bytes));\\n    }\\n\\n    function confidentialInputs() internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_INPUTS.staticcall(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_INPUTS, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialRetrieve(DataId dataId, string memory key) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_RETRIEVE.staticcall(abi.encode(dataId, key));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_RETRIEVE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStore(DataId dataId, string memory key, bytes memory data1) internal view {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE.staticcall(abi.encode(dataId, key, data1));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE, data);\\n        }\\n    }\\n\\n    function doHTTPRequest(HttpRequest memory request) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = DO_HTTPREQUEST.staticcall(abi.encode(request));\\n        if (!success) {\\n            revert PeekerReverted(DO_HTTPREQUEST, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function ethcall(address contractAddr, bytes memory input1) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = ETHCALL.staticcall(abi.encode(contractAddr, input1));\\n        if (!success) {\\n            revert PeekerReverted(ETHCALL, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function extractHint(bytes memory bundleData) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = EXTRACT_HINT.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(EXTRACT_HINT, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function fetchDataRecords(uint64 cond, string memory namespace) internal view returns (DataRecord[] memory) {\\n        (bool success, bytes memory data) = FETCH_DATA_RECORDS.staticcall(abi.encode(cond, namespace));\\n        if (!success) {\\n            revert PeekerReverted(FETCH_DATA_RECORDS, data);\\n        }\\n\\n        return abi.decode(data, (DataRecord[]));\\n    }\\n\\n    function fillMevShareBundle(DataId dataId) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = FILL_MEV_SHARE_BUNDLE.staticcall(abi.encode(dataId));\\n        if (!success) {\\n            revert PeekerReverted(FILL_MEV_SHARE_BUNDLE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function newDataRecord(\\n        uint64 decryptionCondition,\\n        address[] memory allowedPeekers,\\n        address[] memory allowedStores,\\n        string memory dataType\\n    ) internal view returns (DataRecord memory) {\\n        (bool success, bytes memory data) =\\n            NEW_DATA_RECORD.staticcall(abi.encode(decryptionCondition, allowedPeekers, allowedStores, dataType));\\n        if (!success) {\\n            revert PeekerReverted(NEW_DATA_RECORD, data);\\n        }\\n\\n        return abi.decode(data, (DataRecord));\\n    }\\n\\n    function signEthTransaction(bytes memory txn, string memory chainId, string memory signingKey)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory data) = SIGN_ETH_TRANSACTION.staticcall(abi.encode(txn, chainId, signingKey));\\n        if (!success) {\\n            revert PeekerReverted(SIGN_ETH_TRANSACTION, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function simulateBundle(bytes memory bundleData) internal view returns (uint64) {\\n        (bool success, bytes memory data) = SIMULATE_BUNDLE.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_BUNDLE, data);\\n        }\\n\\n        return abi.decode(data, (uint64));\\n    }\\n\\n    function submitBundleJsonRPC(string memory url, string memory method, bytes memory params)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_BUNDLE_JSON_RPC.staticcall(abi.encode(url, method, params));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_BUNDLE_JSON_RPC, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function submitEthBlockBidToRelay(string memory relayUrl, bytes memory builderBid)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_ETH_BLOCK_BID_TO_RELAY.staticcall(abi.encode(relayUrl, builderBid));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_ETH_BLOCK_BID_TO_RELAY, data);\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0x429caee8b64a203c3bfeac588d431e38939a15cab57f8185cc108af3f2961ca4\",\"license\":\"UNLICENSED\"},\"contracts/standard_peekers/bids.sol\":{\"content\":\"pragma solidity ^0.8.8;\\n\\nimport \\\"../libraries/Suave.sol\\\";\\n\\ncontract AnyBundleContract {\\n    event DataRecordEvent(Suave.DataId dataId, uint64 decryptionCondition, address[] allowedPeekers);\\n\\n    function fetchConfidentialBundleData() public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        bytes memory confidentialInputs = Suave.confidentialInputs();\\n        return abi.decode(confidentialInputs, (bytes));\\n    }\\n\\n    function emitDataRecord(Suave.DataRecord calldata dataRecord) public {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n    }\\n}\\n\\ncontract BundleContract is AnyBundleContract {\\n    function newBundle(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores\\n    ) external payable returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        bytes memory bundleData = this.fetchConfidentialBundleData();\\n\\n        uint64 egp = Suave.simulateBundle(bundleData);\\n\\n        Suave.DataRecord memory dataRecord =\\n            Suave.newDataRecord(decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"default:v0:ethBundles\\\");\\n\\n        Suave.confidentialStore(dataRecord.id, \\\"default:v0:ethBundles\\\", bundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"default:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\n        return emitAndReturn(dataRecord, bundleData);\\n    }\\n\\n    function emitAndReturn(Suave.DataRecord memory dataRecord, bytes memory) internal virtual returns (bytes memory) {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(dataRecord));\\n    }\\n}\\n\\ncontract EthBundleSenderContract is BundleContract {\\n    string[] public builderUrls;\\n\\n    constructor(string[] memory builderUrls_) {\\n        builderUrls = builderUrls_;\\n    }\\n\\n    function emitAndReturn(Suave.DataRecord memory dataRecord, bytes memory bundleData)\\n        internal\\n        virtual\\n        override\\n        returns (bytes memory)\\n    {\\n        for (uint256 i = 0; i < builderUrls.length; i++) {\\n            Suave.submitBundleJsonRPC(builderUrls[i], \\\"eth_sendBundle\\\", bundleData);\\n        }\\n\\n        return BundleContract.emitAndReturn(dataRecord, bundleData);\\n    }\\n}\\n\\ncontract MevShareContract is AnyBundleContract {\\n    event HintEvent(Suave.DataId dataId, bytes hint);\\n\\n    event MatchEvent(Suave.DataId matchDataId, bytes matchHint);\\n\\n    function newTransaction(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores\\n    ) external payable returns (bytes memory) {\\n        // 0. check confidential execution\\n        require(Suave.isConfidential());\\n\\n        // 1. fetch bundle data\\n        bytes memory bundleData = this.fetchConfidentialBundleData();\\n\\n        // 2. sim bundle\\n        uint64 egp = Suave.simulateBundle(bundleData);\\n\\n        // 3. extract hint\\n        bytes memory hint = Suave.extractHint(bundleData);\\n\\n        // // 4. store bundle and sim results\\n        Suave.DataRecord memory dataRecord = Suave.newDataRecord(\\n            decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"mevshare:v0:unmatchedBundles\\\"\\n        );\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundles\\\", bundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(egp));\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit HintEvent(dataRecord.id, hint);\\n\\n        // // 5. return \\\"callback\\\" to emit hint onchain\\n        return bytes.concat(this.emitDataRecordAndHint.selector, abi.encode(dataRecord, hint));\\n    }\\n\\n    function emitDataRecordAndHint(Suave.DataRecord calldata dataRecord, bytes memory hint) public {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit HintEvent(dataRecord.id, hint);\\n    }\\n\\n    function newMatch(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores,\\n        Suave.DataId sharedataId\\n    ) external payable returns (bytes memory) {\\n        // WARNING : this function will copy the original mev share bid\\n        // into a new key with potentially different permsissions\\n\\n        require(Suave.isConfidential());\\n        // 1. fetch confidential data\\n        bytes memory matchBundleData = this.fetchConfidentialBundleData();\\n\\n        // 2. sim match alone for validity\\n        uint64 egp = Suave.simulateBundle(matchBundleData);\\n\\n        // 3. extract hint\\n        bytes memory matchHint = Suave.extractHint(matchBundleData);\\n\\n        Suave.DataRecord memory dataRecord = Suave.newDataRecord(\\n            decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"mevshare:v0:matchDataRecords\\\"\\n        );\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundles\\\", matchBundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(0));\\n\\n        //4. merge data records\\n        Suave.DataId[] memory dataRecords = new Suave.DataId[](2);\\n        dataRecords[0] = sharedataId;\\n        dataRecords[1] = dataRecord.id;\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:mergedDataRecords\\\", abi.encode(dataRecords));\\n\\n        return emitMatchDataRecordAndHint(dataRecord, matchHint);\\n    }\\n\\n    function emitMatchDataRecordAndHint(Suave.DataRecord memory dataRecord, bytes memory matchHint)\\n        internal\\n        virtual\\n        returns (bytes memory)\\n    {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit MatchEvent(dataRecord.id, matchHint);\\n\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(dataRecord));\\n    }\\n}\\n\\ncontract MevShareBundleSenderContract is MevShareContract {\\n    string[] public builderUrls;\\n\\n    constructor(string[] memory builderUrls_) {\\n        builderUrls = builderUrls_;\\n    }\\n\\n    function emitMatchDataRecordAndHint(Suave.DataRecord memory dataRecord, bytes memory matchHint)\\n        internal\\n        virtual\\n        override\\n        returns (bytes memory)\\n    {\\n        bytes memory bundleData = Suave.fillMevShareBundle(dataRecord.id);\\n        for (uint256 i = 0; i < builderUrls.length; i++) {\\n            Suave.submitBundleJsonRPC(builderUrls[i], \\\"mev_sendBundle\\\", bundleData);\\n        }\\n\\n        return MevShareContract.emitMatchDataRecordAndHint(dataRecord, matchHint);\\n    }\\n}\\n\\n/* Not tested or implemented on the precompile side */\\nstruct EgpRecordPair {\\n    uint64 egp; // in wei, beware overflow\\n    Suave.DataId dataId;\\n}\\n\\ncontract EthBlockContract is AnyBundleContract {\\n    event BuilderBoostBidEvent(Suave.DataId dataId, bytes builderBid);\\n\\n    function idsEqual(Suave.DataId _l, Suave.DataId _r) public pure returns (bool) {\\n        bytes memory l = abi.encodePacked(_l);\\n        bytes memory r = abi.encodePacked(_r);\\n        for (uint256 i = 0; i < l.length; i++) {\\n            if (bytes(l)[i] != r[i]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function buildMevShare(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        Suave.DataRecord[] memory allShareMatchDataRecords =\\n            Suave.fetchDataRecords(blockHeight, \\\"mevshare:v0:matchDataRecords\\\");\\n        Suave.DataRecord[] memory allShareUserDataRecords =\\n            Suave.fetchDataRecords(blockHeight, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\n        if (allShareUserDataRecords.length == 0) {\\n            revert Suave.PeekerReverted(address(this), \\\"no data records\\\");\\n        }\\n\\n        Suave.DataRecord[] memory allRecords = new Suave.DataRecord[](allShareUserDataRecords.length);\\n        for (uint256 i = 0; i < allShareUserDataRecords.length; i++) {\\n            // TODO: sort matches by egp first!\\n            Suave.DataRecord memory dataRecordToInsert = allShareUserDataRecords[i]; // will be updated with the best match if any\\n            for (uint256 j = 0; j < allShareMatchDataRecords.length; j++) {\\n                // TODO: should be done once at the start and sorted\\n                Suave.DataId[] memory mergeddataIds = abi.decode(\\n                    Suave.confidentialRetrieve(allShareMatchDataRecords[j].id, \\\"mevshare:v0:mergedDataRecords\\\"),\\n                    (Suave.DataId[])\\n                );\\n                if (idsEqual(mergeddataIds[0], allShareUserDataRecords[i].id)) {\\n                    dataRecordToInsert = allShareMatchDataRecords[j];\\n                    break;\\n                }\\n            }\\n            allRecords[i] = dataRecordToInsert;\\n        }\\n\\n        EgpRecordPair[] memory bidsByEGP = new EgpRecordPair[](allRecords.length);\\n        for (uint256 i = 0; i < allRecords.length; i++) {\\n            bytes memory simResults = Suave.confidentialRetrieve(allRecords[i].id, \\\"mevshare:v0:ethBundleSimResults\\\");\\n            uint64 egp = abi.decode(simResults, (uint64));\\n            bidsByEGP[i] = EgpRecordPair(egp, allRecords[i].id);\\n        }\\n\\n        // Bubble sort, cause why not\\n        uint256 n = bidsByEGP.length;\\n        for (uint256 i = 0; i < n - 1; i++) {\\n            for (uint256 j = i + 1; j < n; j++) {\\n                if (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n                    EgpRecordPair memory temp = bidsByEGP[i];\\n                    bidsByEGP[i] = bidsByEGP[j];\\n                    bidsByEGP[j] = temp;\\n                }\\n            }\\n        }\\n\\n        Suave.DataId[] memory alldataIds = new Suave.DataId[](allRecords.length);\\n        for (uint256 i = 0; i < bidsByEGP.length; i++) {\\n            alldataIds[i] = bidsByEGP[i].dataId;\\n        }\\n\\n        return buildAndEmit(blockArgs, blockHeight, alldataIds, \\\"mevshare:v0\\\");\\n    }\\n\\n    function buildFromPool(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        Suave.DataRecord[] memory allRecords = Suave.fetchDataRecords(blockHeight, \\\"default:v0:ethBundles\\\");\\n        if (allRecords.length == 0) {\\n            revert Suave.PeekerReverted(address(this), \\\"no data records\\\");\\n        }\\n\\n        EgpRecordPair[] memory bidsByEGP = new EgpRecordPair[](allRecords.length);\\n        for (uint256 i = 0; i < allRecords.length; i++) {\\n            bytes memory simResults = Suave.confidentialRetrieve(allRecords[i].id, \\\"default:v0:ethBundleSimResults\\\");\\n            uint64 egp = abi.decode(simResults, (uint64));\\n            bidsByEGP[i] = EgpRecordPair(egp, allRecords[i].id);\\n        }\\n\\n        // Bubble sort, cause why not\\n        uint256 n = bidsByEGP.length;\\n        for (uint256 i = 0; i < n - 1; i++) {\\n            for (uint256 j = i + 1; j < n; j++) {\\n                if (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n                    EgpRecordPair memory temp = bidsByEGP[i];\\n                    bidsByEGP[i] = bidsByEGP[j];\\n                    bidsByEGP[j] = temp;\\n                }\\n            }\\n        }\\n\\n        Suave.DataId[] memory alldataIds = new Suave.DataId[](allRecords.length);\\n        for (uint256 i = 0; i < bidsByEGP.length; i++) {\\n            alldataIds[i] = bidsByEGP[i].dataId;\\n        }\\n\\n        return buildAndEmit(blockArgs, blockHeight, alldataIds, \\\"\\\");\\n    }\\n\\n    function buildAndEmit(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory records,\\n        string memory namespace\\n    ) public virtual returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        (Suave.DataRecord memory blockBid, bytes memory builderBid) =\\n            this.doBuild(blockArgs, blockHeight, records, namespace);\\n\\n        emit BuilderBoostBidEvent(blockBid.id, builderBid);\\n        emit DataRecordEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n        return bytes.concat(this.emitBuilderBidAndBid.selector, abi.encode(blockBid, builderBid));\\n    }\\n\\n    function doBuild(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory records,\\n        string memory namespace\\n    ) public view returns (Suave.DataRecord memory, bytes memory) {\\n        address[] memory allowedPeekers = new address[](2);\\n        allowedPeekers[0] = address(this);\\n        allowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\n        Suave.DataRecord memory blockBid =\\n            Suave.newDataRecord(blockHeight, allowedPeekers, allowedPeekers, \\\"default:v0:mergedDataRecords\\\");\\n        Suave.confidentialStore(blockBid.id, \\\"default:v0:mergedDataRecords\\\", abi.encode(records));\\n\\n        (bytes memory builderBid, bytes memory payload) = Suave.buildEthBlock(blockArgs, blockBid.id, namespace);\\n        Suave.confidentialStore(blockBid.id, \\\"default:v0:builderPayload\\\", payload); // only through this.unlock\\n\\n        return (blockBid, builderBid);\\n    }\\n\\n    function emitBuilderBidAndBid(Suave.DataRecord memory dataRecord, bytes memory builderBid)\\n        public\\n        returns (Suave.DataRecord memory, bytes memory)\\n    {\\n        emit BuilderBoostBidEvent(dataRecord.id, builderBid);\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        return (dataRecord, builderBid);\\n    }\\n\\n    function unlock(Suave.DataId dataId, bytes memory signedBlindedHeader) public view returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        // TODO: verify the header is correct\\n        // TODO: incorporate protocol name\\n        bytes memory payload = Suave.confidentialRetrieve(dataId, \\\"default:v0:builderPayload\\\");\\n        return payload;\\n    }\\n}\\n\\ncontract EthBlockBidSenderContract is EthBlockContract {\\n    string boostRelayUrl;\\n\\n    constructor(string memory boostRelayUrl_) {\\n        boostRelayUrl = boostRelayUrl_;\\n    }\\n\\n    function buildAndEmit(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory dataRecords,\\n        string memory namespace\\n    ) public virtual override returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        (Suave.DataRecord memory blockDataRecord, bytes memory builderBid) =\\n            this.doBuild(blockArgs, blockHeight, dataRecords, namespace);\\n        Suave.submitEthBlockBidToRelay(boostRelayUrl, builderBid);\\n\\n        emit DataRecordEvent(blockDataRecord.id, blockDataRecord.decryptionCondition, blockDataRecord.allowedPeekers);\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(blockDataRecord));\\n    }\\n}\\n\",\"keccak256\":\"0x7d8b6ebf763b86b5c7404d41d5ba39d19db206418782be279018354de23965fc\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063bb7bae0a1161008c578063ee2cc36411610066578063ee2cc36414610203578063fd38f21d1461021f578063ff4aec7d1461024f578063ffbbfcb01461026d576100cf565b8063bb7bae0a146101ad578063bcbb3597146101c9578063d7e84fbf146101e5576100cf565b8063060b0d17146100d4578063392e53cd1461010457806361b8ce8c1461012257806364e65a62146101405780637e48532c1461015c57806381d12c581461017a575b600080fd5b6100ee60048036038101906100e991906126ba565b61028b565b6040516100fb919061279e565b60405180910390f35b61010c61050b565b60405161011991906127cf565b60405180910390f35b61012a61051b565b6040516101379190612803565b60405180910390f35b61015a60048036038101906101559190612842565b610521565b005b6101646105ee565b604051610171919061279e565b60405180910390f35b610194600480360381019061018f9190612929565b610643565b6040516101a494939291906129f8565b60405180910390f35b6101c760048036038101906101c29190612a70565b61070b565b005b6101e360048036038101906101de9190612acf565b610777565b005b6101ed6107ee565b6040516101fa9190612b77565b60405180910390f35b61021d60048036038101906102189190612bb1565b610814565b005b61023960048036038101906102349190612cae565b61092c565b604051610246919061279e565b60405180910390f35b610257610b35565b604051610264919061279e565b60405180910390f35b610275610b6e565b6040516102829190612803565b60405180910390f35b60606102d3610298610b7b565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c43565b61031a6000600480549050116040518060400160405280600b81526020017f4e6f207265717565737473000000000000000000000000000000000000000000815250610c43565b6000806103308467ffffffffffffffff16610c89565b915091506103846000836040015167ffffffffffffffff16116040518060400160405280600f81526020017f4e6f2076616c6964206f66666572730000000000000000000000000000000000815250610c43565b61038e8483610ed3565b81602001518561010001819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dac44aef87876040518363ffffffff1660e01b81526004016103fb929190612fa0565b600060405180830381600087803b15801561041557600080fd5b505af1158015610429573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104529190613040565b90506364e65a6260e01b8184600001518560400151604051602001610478929190613089565b6040516020818303038152906040528461049061112e565b6040516024016104a394939291906130e1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935050505092915050565b60008060001b6001541415905090565b60055481565b8061056d6105328260000135611170565b6040518060400160405280600b81526020017f496e76616c6964206b6579000000000000000000000000000000000000000000815250610c43565b60008351111561058957610588610583846111a4565b6111b6565b5b60006105b7600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687611377565b90506105c38582611445565b508060200135600181905550600260008154809291906105e29061316a565b91905055505050505050565b60606106366105fb610b7b565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c43565b61063e6114a0565b905090565b6004818154811061065357600080fd5b906000526020600020906004020160009150905080600001549080600101805461067c906131e2565b80601f01602080910402602001604051908101604052809291908181526020018280546106a8906131e2565b80156106f55780601f106106ca576101008083540402835291602001916106f5565b820191906000526020600020905b8154815290600101906020018083116106d857829003601f168201915b5050505050908060020154908060030154905084565b61075261071661050b565b156040518060400160405280601381526020017f416c726561647920696e697469616c697a656400000000000000000000000000815250610c43565b81600181905550806000816fffffffffffffffffffffffffffffffff19169055505050565b7ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb4781600001356fffffffffffffffffffffffffffffffff19168260400160208101906107c39190613214565b8380606001906107d39190613250565b6040516107e39493929190613367565b60405180910390a150565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806108606108258260000135611170565b6040518060400160405280600b81526020017f496e76616c6964206b6579000000000000000000000000000000000000000000815250610c43565b6004839080600181540180825580915050600190039060005260206000209060040201600090919091909150818161089891906137ea565b5050600560008154809291906108ad9061316a565b919050555082600001357fbf51327c63fb3c8741d4233ae0315e3e1a74641532f4e59c307f72314a3462358480602001906108e8919061345b565b86604001356040516108fc93929190613825565b60405180910390a28060200135600181905550600260008154809291906109229061316a565b9190505550505050565b6060610974610939610b7b565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c43565b60003073ffffffffffffffffffffffffffffffffffffffff1663ff4aec7d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109be57600080fd5b505af11580156109d2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109fb9190613040565b90506000610a0a8260016115eb565b915050610a5960008267ffffffffffffffff16116040518060400160405280600b81526020017f65677020746f6f206c6f77000000000000000000000000000000000000000000815250610c43565b6000610a64836116c6565b90506000604051806080016040528060055481526020018781526020018867ffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff1916815250905063ee2cc36460e01b81610abb61112e565b604051602401610acc929190613922565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505094505050505092915050565b6060610b3f610b7b565b610b4857600080fd5b6000610b526117fc565b905080806020019051810190610b689190613040565b91505090565b6000600480549050905090565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff16604051610ba790613983565b600060405180830381855afa9150503d8060008114610be2576040519150601f19603f3d011682016040523d82523d6000602084013e610be7565b606091505b509150915081610c34576342010000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610c2b9291906139a7565b60405180910390fd5b80516020820151935050505090565b81610c8557806040517f0c25cd98000000000000000000000000000000000000000000000000000000008152600401610c7c91906139d7565b60405180910390fd5b5050565b610c91612008565b606060005b600480549050811015610ecd57600060048281548110610cb957610cb86139f9565b5b906000526020600020906004020160405180608001604052908160008201548152602001600182018054610cec906131e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d18906131e2565b8015610d655780601f10610d3a57610100808354040283529160200191610d65565b820191906000526020600020905b815481529060010190602001808311610d4857829003601f168201915b505050505081526020016002820154815260200160038201546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152505090508481604001511015610dd157610dc982846118d390919063ffffffff16565b925050610ebc565b6000610e1682606001516040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c650000000000000000815250611907565b9050600080610e268360006115eb565b91509150811580610e41575060008167ffffffffffffffff16145b15610e6057610e5985876118d390919063ffffffff16565b9550610eb7565b866040015167ffffffffffffffff168167ffffffffffffffff161115610eb657604051806080016040528085600001518152602001856020015181526020018267ffffffffffffffff1681526020018481525096505b5b505050505b80610ec69061316a565b9050610c96565b50915091565b6000600367ffffffffffffffff811115610ef057610eef6121d4565b5b604051908082528060200260200182016040528015610f1e5781602001602082028036833780820191505090505b509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110610f5857610f576139f9565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634210000181600181518110610fab57610faa6139f9565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503081600281518110610ffa57610ff96139f9565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006110778483846040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152506119ee565b90506110c181600001516040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152508560600151611af4565b61112881600001516040518060400160405280601e81526020017f64656661756c743a76303a65746842756e646c6553696d526573756c7473000081525085604001516040516020016111149190613a28565b604051602081830303815290604052611af4565b50505050565b61113661203a565b604051806040016040528061114c600254611bd7565b815260200161116860016002546111639190613a43565b611bf1565b815250905090565b6000600154826040516020016111869190613aa8565b60405160208183030381529060405280519060200120149050919050565b60606111af82611c29565b9050919050565b6000815190505b6000811115611373576000826001836111d69190613ac3565b815181106111e7576111e66139f9565b5b60200260200101519050600060048281548110611207576112066139f9565b5b9060005260206000209060040201600001549050600160048054905061122d9190613ac3565b8210156112e057600460016004805490506112489190613ac3565b81548110611259576112586139f9565b5b90600052602060002090600402016004838154811061127b5761127a6139f9565b5b90600052602060002090600402016000820154816000015560018201816001019080546112a7906131e2565b6112b292919061205a565b5060028201548160020155600382015481600301906fffffffffffffffffffffffffffffffff191690559050505b60048054806112f2576112f1613af7565b5b600190038181906000526020600020906004020160008082016000905560018201600061131f91906120e7565b6002820160009055600382016000905550509055807f5fa4d8243d9549d33d615899224efcef51bfcacb970a31f68862ce74c858dbf060405160405180910390a250508061136c90613b26565b90506111bd565b5050565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516113a19190613b81565b6000604051808303816000865af19150503d80600081146113de576040519150601f19603f3d011682016040523d82523d6000602084013e6113e3565b606091505b5091509150611427826040518060400160405280601481526020017f45787465726e616c2063616c6c206661696c6564000000000000000000000000815250610c43565b8080602001905181019061143b9190613c08565b9250505092915050565b6000808380602001905181019061145c9190613c7b565b91509150817f91badfc611f9ad79e4d6a58176e5c4cedc4f8ed9001447825f503e792bbf09e28285604051611492929190613cbb565b60405180910390a250505050565b60606114e86114ad610b7b565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c43565b61152f6114f361050b565b156040518060400160405280601381526020017f416c726561647920696e697469616c697a656400000000000000000000000000815250610c43565b60006115396117fc565b9050600061154682611cf4565b90506000611569838060200190518101906115619190613d00565b600254611ed0565b905063bb7bae0a60e01b8183604051602401611586929190613d2d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935050505090565b600080600080634210000073ffffffffffffffffffffffffffffffffffffffff16614e2087604051602001611620919061279e565b60405160208183030381529060405260405161163c9190613b81565b6000604051808303818686fa925050503d8060008114611678576040519150601f19603f3d011682016040523d82523d6000602084013e61167d565b606091505b509150915061169585158061168f5750825b82610c43565b81156116bc576001818060200190518101906116b19190613d56565b9350935050506116bf565b50505b9250929050565b600080600167ffffffffffffffff8111156116e4576116e36121d4565b5b6040519080825280602002602001820160405280156117125781602001602082028036833780820191505090505b509050308160008151811061172a576117296139f9565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006117a8600083846040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c6500000000000000008152506119ee565b90506117ee81600001516040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c65000000000000000081525086611af4565b806000015192505050919050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff1660405160200160405160208183030381529060405260405161183e9190613b81565b600060405180830381855afa9150503d8060008114611879576040519150601f19603f3d011682016040523d82523d6000602084013e61187e565b606091505b5091509150816118cb576342010001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016118c29291906139a7565b60405180910390fd5b809250505090565b6060826118df83611f0a565b6040516020016118f0929190613d83565b604051602081830303815290604052905092915050565b6060600080634202000173ffffffffffffffffffffffffffffffffffffffff16858560405160200161193a929190613da7565b6040516020818303038152906040526040516119569190613b81565b600060405180830381855afa9150503d8060008114611991576040519150601f19603f3d011682016040523d82523d6000602084013e611996565b606091505b5091509150816119e3576342020001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016119da9291906139a7565b60405180910390fd5b809250505092915050565b6119f6612127565b600080634203000073ffffffffffffffffffffffffffffffffffffffff1687878787604051602001611a2b9493929190613e5d565b604051602081830303815290604052604051611a479190613b81565b600060405180830381855afa9150503d8060008114611a82576040519150601f19603f3d011682016040523d82523d6000602084013e611a87565b606091505b509150915081611ad4576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611acb9291906139a7565b60405180910390fd5b80806020019051810190611ae89190614098565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001611b27939291906140e1565b604051602081830303815290604052604051611b439190613b81565b600060405180830381855afa9150503d8060008114611b7e576040519150601f19603f3d011682016040523d82523d6000602084013e611b83565b606091505b509150915081611bd0576342020000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611bc79291906139a7565b60405180910390fd5b5050505050565b6000611bea611be4611f67565b83611fc7565b9050919050565b6000611bfc82611bd7565b604051602001611c0c9190613aa8565b604051602081830303815290604052805190602001209050919050565b606060208251611c399190614155565b67ffffffffffffffff811115611c5257611c516121d4565b5b604051908082528060200260200182016040528015611c805781602001602082028036833780820191505090505b50905060005b60208351611c949190614155565b811015611cee57611cbc8360208084611cad9190614186565b611cb79190613a43565b611ffa565b828281518110611ccf57611cce6139f9565b5b6020026020010181815250508080611ce69061316a565b915050611c86565b50919050565b600080600367ffffffffffffffff811115611d1257611d116121d4565b5b604051908082528060200260200182016040528015611d405781602001602082028036833780820191505090505b5090503081600081518110611d5857611d576139f9565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634203000181600181518110611dab57611daa6139f9565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634202000181600281518110611dfe57611dfd6139f9565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000611e7c600083846040518060400160405280601181526020017f626c6f636b61643a76303a7365637265740000000000000000000000000000008152506119ee565b9050611ec281600001516040518060400160405280601181526020017f626c6f636b61643a76303a73656372657400000000000000000000000000000081525086611af4565b806000015192505050919050565b6000611edc8383611fc7565b604051602001611eec9190613aa8565b60405160208183030381529060405280519060200120905092915050565b6060602067ffffffffffffffff811115611f2757611f266121d4565b5b6040519080825280601f01601f191660200182016040528015611f595781602001600182028036833780820191505090505b509050816020820152919050565b600080611fab6000546040518060400160405280601181526020017f626c6f636b61643a76303a736563726574000000000000000000000000000000815250611907565b905080806020019051810190611fc19190613d00565b91505090565b60008282604051602001611fdc9291906141e0565b60405160208183030381529060405280519060200120905092915050565b600081830151905092915050565b60405180608001604052806000815260200160608152602001600067ffffffffffffffff168152602001606081525090565b604051806040016040528060008019168152602001600080191681525090565b828054612066906131e2565b90600052602060002090601f01602090048101928261208857600085556120d6565b82601f1061209957805485556120d6565b828001600101855582156120d657600052602060002091601f016020900482015b828111156120d55782548255916001019190600101906120ba565b5b5090506120e3919061218d565b5090565b5080546120f3906131e2565b6000825580601f106121055750612124565b601f016020900490600052602060002090810190612123919061218d565b5b50565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b5b808211156121a657600081600090555060010161218e565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61220c826121c3565b810181811067ffffffffffffffff8211171561222b5761222a6121d4565b5b80604052505050565b600061223e6121aa565b905061224a8282612203565b919050565b600080fd5b600067ffffffffffffffff82169050919050565b61227181612254565b811461227c57600080fd5b50565b60008135905061228e81612268565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156122b9576122b86121d4565b5b6122c2826121c3565b9050602081019050919050565b82818337600083830152505050565b60006122f16122ec8461229e565b612234565b90508281526020810184848401111561230d5761230c612299565b5b6123188482856122cf565b509392505050565b600082601f83011261233557612334612294565b5b81356123458482602086016122de565b91505092915050565b6000819050919050565b6123618161234e565b811461236c57600080fd5b50565b60008135905061237e81612358565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123af82612384565b9050919050565b6123bf816123a4565b81146123ca57600080fd5b50565b6000813590506123dc816123b6565b92915050565b600067ffffffffffffffff8211156123fd576123fc6121d4565b5b602082029050602081019050919050565b600080fd5b600060808284031215612429576124286121be565b5b6124336080612234565b905060006124438482850161227f565b60008301525060206124578482850161227f565b602083015250604061246b848285016123cd565b604083015250606061247f8482850161227f565b60608301525092915050565b600061249e612499846123e2565b612234565b905080838252602082019050608084028301858111156124c1576124c061240e565b5b835b818110156124ea57806124d68882612413565b8452602084019350506080810190506124c3565b5050509392505050565b600082601f83011261250957612508612294565b5b813561251984826020860161248b565b91505092915050565b60008115159050919050565b61253781612522565b811461254257600080fd5b50565b6000813590506125548161252e565b92915050565b60006101608284031215612571576125706121be565b5b61257c610160612234565b9050600061258c8482850161227f565b600083015250602082013567ffffffffffffffff8111156125b0576125af61224f565b5b6125bc84828501612320565b60208301525060406125d08482850161236f565b60408301525060606125e48482850161227f565b60608301525060806125f8848285016123cd565b60808301525060a061260c8482850161227f565b60a08301525060c06126208482850161236f565b60c08301525060e082013567ffffffffffffffff8111156126445761264361224f565b5b612650848285016124f4565b60e08301525061010082013567ffffffffffffffff8111156126755761267461224f565b5b61268184828501612320565b610100830152506101206126978482850161236f565b610120830152506101406126ad84828501612545565b6101408301525092915050565b600080604083850312156126d1576126d06121b4565b5b600083013567ffffffffffffffff8111156126ef576126ee6121b9565b5b6126fb8582860161255a565b925050602061270c8582860161227f565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612750578082015181840152602081019050612735565b8381111561275f576000848401525b50505050565b600061277082612716565b61277a8185612721565b935061278a818560208601612732565b612793816121c3565b840191505092915050565b600060208201905081810360008301526127b88184612765565b905092915050565b6127c981612522565b82525050565b60006020820190506127e460008301846127c0565b92915050565b6000819050919050565b6127fd816127ea565b82525050565b600060208201905061281860008301846127f4565b92915050565b600080fd5b6000604082840312156128395761283861281e565b5b81905092915050565b60008060008060a0858703121561285c5761285b6121b4565b5b600085013567ffffffffffffffff81111561287a576128796121b9565b5b61288687828801612320565b945050602085013567ffffffffffffffff8111156128a7576128a66121b9565b5b6128b387828801612320565b935050604085013567ffffffffffffffff8111156128d4576128d36121b9565b5b6128e087828801612320565b92505060606128f187828801612823565b91505092959194509250565b612906816127ea565b811461291157600080fd5b50565b600081359050612923816128fd565b92915050565b60006020828403121561293f5761293e6121b4565b5b600061294d84828501612914565b91505092915050565b600081519050919050565b600082825260208201905092915050565b600061297d82612956565b6129878185612961565b9350612997818560208601612732565b6129a0816121c3565b840191505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b60006129e2826129ab565b9050919050565b6129f2816129d7565b82525050565b6000608082019050612a0d60008301876127f4565b8181036020830152612a1f8186612972565b9050612a2e60408301856127f4565b612a3b60608301846129e9565b95945050505050565b612a4d816129ab565b8114612a5857600080fd5b50565b600081359050612a6a81612a44565b92915050565b60008060408385031215612a8757612a866121b4565b5b6000612a958582860161236f565b9250506020612aa685828601612a5b565b9150509250929050565b600060c08284031215612ac657612ac561281e565b5b81905092915050565b600060208284031215612ae557612ae46121b4565b5b600082013567ffffffffffffffff811115612b0357612b026121b9565b5b612b0f84828501612ab0565b91505092915050565b6000819050919050565b6000612b3d612b38612b3384612384565b612b18565b612384565b9050919050565b6000612b4f82612b22565b9050919050565b6000612b6182612b44565b9050919050565b612b7181612b56565b82525050565b6000602082019050612b8c6000830184612b68565b92915050565b600060808284031215612ba857612ba761281e565b5b81905092915050565b60008060608385031215612bc857612bc76121b4565b5b600083013567ffffffffffffffff811115612be657612be56121b9565b5b612bf285828601612b92565b9250506020612c0385828601612823565b9150509250929050565b600067ffffffffffffffff821115612c2857612c276121d4565b5b612c31826121c3565b9050602081019050919050565b6000612c51612c4c84612c0d565b612234565b905082815260208101848484011115612c6d57612c6c612299565b5b612c788482856122cf565b509392505050565b600082601f830112612c9557612c94612294565b5b8135612ca5848260208601612c3e565b91505092915050565b60008060408385031215612cc557612cc46121b4565b5b6000612cd38582860161227f565b925050602083013567ffffffffffffffff811115612cf457612cf36121b9565b5b612d0085828601612c80565b9150509250929050565b612d1381612254565b82525050565b600082825260208201905092915050565b6000612d3582612716565b612d3f8185612d19565b9350612d4f818560208601612732565b612d58816121c3565b840191505092915050565b612d6c8161234e565b82525050565b612d7b816123a4565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b608082016000820151612dc36000850182612d0a565b506020820151612dd66020850182612d0a565b506040820151612de96040850182612d72565b506060820151612dfc6060850182612d0a565b50505050565b6000612e0e8383612dad565b60808301905092915050565b6000602082019050919050565b6000612e3282612d81565b612e3c8185612d8c565b9350612e4783612d9d565b8060005b83811015612e78578151612e5f8882612e02565b9750612e6a83612e1a565b925050600181019050612e4b565b5085935050505092915050565b612e8e81612522565b82525050565b600061016083016000830151612ead6000860182612d0a565b5060208301518482036020860152612ec58282612d2a565b9150506040830151612eda6040860182612d63565b506060830151612eed6060860182612d0a565b506080830151612f006080860182612d72565b5060a0830151612f1360a0860182612d0a565b5060c0830151612f2660c0860182612d63565b5060e083015184820360e0860152612f3e8282612e27565b915050610100830151848203610100860152612f5a8282612d2a565b915050610120830151612f71610120860182612d63565b50610140830151612f86610140860182612e85565b508091505092915050565b612f9a81612254565b82525050565b60006040820190508181036000830152612fba8185612e94565b9050612fc96020830184612f91565b9392505050565b6000612fe3612fde8461229e565b612234565b905082815260208101848484011115612fff57612ffe612299565b5b61300a848285612732565b509392505050565b600082601f83011261302757613026612294565b5b8151613037848260208601612fd0565b91505092915050565b600060208284031215613056576130556121b4565b5b600082015167ffffffffffffffff811115613074576130736121b9565b5b61308084828501613012565b91505092915050565b600060408201905061309e60008301856127f4565b6130ab6020830184612f91565b9392505050565b6040820160008201516130c86000850182612d63565b5060208201516130db6020850182612d63565b50505050565b600060a08201905081810360008301526130fb8187612765565b9050818103602083015261310f8186612765565b905081810360408301526131238185612765565b905061313260608301846130b2565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613175826127ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156131a8576131a761313b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806131fa57607f821691505b6020821081141561320e5761320d6131b3565b5b50919050565b60006020828403121561322a576132296121b4565b5b60006132388482850161227f565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261326d5761326c613241565b5b80840192508235915067ffffffffffffffff82111561328f5761328e613246565b5b6020830192506020820236038313156132ab576132aa61324b565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60006132da8383612d72565b60208301905092915050565b60006132f560208401846123cd565b905092915050565b6000602082019050919050565b600061331683856132b3565b9350613321826132c4565b8060005b8581101561335a5761333782846132e6565b61334188826132ce565b975061334c836132fd565b925050600181019050613325565b5085925050509392505050565b600060608201905061337c60008301876129e9565b6133896020830186612f91565b818103604083015261339c81848661330a565b905095945050505050565b600081356133b4816128fd565b80915050919050565b60008160001b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6133f6846133bd565b9350801983169250808416831791505092915050565b600061342761342261341d846127ea565b612b18565b6127ea565b9050919050565b6000819050919050565b6134418261340c565b61345461344d8261342e565b83546133ca565b8255505050565b6000808335600160200384360303811261347857613477613241565b5b80840192508235915067ffffffffffffffff82111561349a57613499613246565b5b6020830192506001820236038313156134b6576134b561324b565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261352b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826134ee565b61353586836134ee565b95508019841693508086168417925050509392505050565b6135568361340c565b61356a6135628261342e565b8484546134fb565b825550505050565b600090565b61357f613572565b61358a81848461354d565b505050565b5b818110156135ae576135a3600082613577565b600181019050613590565b5050565b601f8211156135f3576135c4816134c9565b6135cd846134de565b810160208510156135dc578190505b6135f06135e8856134de565b83018261358f565b50505b505050565b600082821c905092915050565b6000613616600019846008026135f8565b1980831691505092915050565b600061362f8383613605565b9150826002028217905092915050565b61364983836134be565b67ffffffffffffffff811115613662576136616121d4565b5b61366c82546131e2565b6136778282856135b2565b6000601f8311600181146136a65760008415613694578287013590505b61369e8582613623565b865550613706565b601f1984166136b4866134c9565b60005b828110156136dc578489013582556001820191506020850194506020810190506136b7565b868310156136f957848901356136f5601f891682613605565b8355505b6001600288020188555050505b50505050505050565b61371a83838361363f565b505050565b6000813561372c81612a44565b80915050919050565b6000819050919050565b613748826129d7565b61375b61375482613735565b83546133ca565b8255505050565b600081016000830180613774816133a7565b90506137808184613438565b5050506001810160208301613795818561345b565b6137a081838661370f565b505050506002810160408301806137b6816133a7565b90506137c28184613438565b5050506003810160608301806137d78161371f565b90506137e3818461373f565b5050505050565b6137f48282613762565b5050565b60006138048385612961565b93506138118385846122cf565b61381a836121c3565b840190509392505050565b600060408201905081810360008301526138408185876137f8565b905061384f60208301846127f4565b949350505050565b613860816127ea565b82525050565b600082825260208201905092915050565b600061388282612956565b61388c8185613866565b935061389c818560208601612732565b6138a5816121c3565b840191505092915050565b6138b9816129d7565b82525050565b60006080830160008301516138d76000860182613857565b50602083015184820360208601526138ef8282613877565b91505060408301516139046040860182613857565b50606083015161391760608601826138b0565b508091505092915050565b6000606082019050818103600083015261393c81856138bf565b905061394b60208301846130b2565b9392505050565b600081905092915050565b50565b600061396d600083613952565b91506139788261395d565b600082019050919050565b600061398e82613960565b9150819050919050565b6139a1816123a4565b82525050565b60006040820190506139bc6000830185613998565b81810360208301526139ce8184612765565b90509392505050565b600060208201905081810360008301526139f18184612972565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082019050613a3d6000830184612f91565b92915050565b6000613a4e826127ea565b9150613a59836127ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613a8e57613a8d61313b565b5b828201905092915050565b613aa28161234e565b82525050565b6000602082019050613abd6000830184613a99565b92915050565b6000613ace826127ea565b9150613ad9836127ea565b925082821015613aec57613aeb61313b565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613b31826127ea565b91506000821415613b4557613b4461313b565b5b600182039050919050565b6000613b5b82612716565b613b658185613952565b9350613b75818560208601612732565b80840191505092915050565b6000613b8d8284613b50565b915081905092915050565b6000613bab613ba684612c0d565b612234565b905082815260208101848484011115613bc757613bc6612299565b5b613bd2848285612732565b509392505050565b600082601f830112613bef57613bee612294565b5b8151613bff848260208601613b98565b91505092915050565b600060208284031215613c1e57613c1d6121b4565b5b600082015167ffffffffffffffff811115613c3c57613c3b6121b9565b5b613c4884828501613bda565b91505092915050565b600081519050613c60816128fd565b92915050565b600081519050613c7581612268565b92915050565b60008060408385031215613c9257613c916121b4565b5b6000613ca085828601613c51565b9250506020613cb185828601613c66565b9150509250929050565b6000604082019050613cd06000830185612f91565b8181036020830152613ce28184612972565b90509392505050565b600081519050613cfa81612358565b92915050565b600060208284031215613d1657613d156121b4565b5b6000613d2484828501613ceb565b91505092915050565b6000604082019050613d426000830185613a99565b613d4f60208301846129e9565b9392505050565b600060208284031215613d6c57613d6b6121b4565b5b6000613d7a84828501613c66565b91505092915050565b6000613d8f8285613b50565b9150613d9b8284613b50565b91508190509392505050565b6000604082019050613dbc60008301856129e9565b8181036020830152613dce8184612972565b90509392505050565b600081519050919050565b6000819050602082019050919050565b6000602082019050919050565b6000613e0a82613dd7565b613e1481856132b3565b9350613e1f83613de2565b8060005b83811015613e50578151613e3788826132ce565b9750613e4283613df2565b925050600181019050613e23565b5085935050505092915050565b6000608082019050613e726000830187612f91565b8181036020830152613e848186613dff565b90508181036040830152613e988185613dff565b90508181036060830152613eac8184612972565b905095945050505050565b600081519050613ec681612a44565b92915050565b600067ffffffffffffffff821115613ee757613ee66121d4565b5b602082029050602081019050919050565b600081519050613f07816123b6565b92915050565b6000613f20613f1b84613ecc565b612234565b90508083825260208201905060208402830185811115613f4357613f4261240e565b5b835b81811015613f6c5780613f588882613ef8565b845260208401935050602081019050613f45565b5050509392505050565b600082601f830112613f8b57613f8a612294565b5b8151613f9b848260208601613f0d565b91505092915050565b600060c08284031215613fba57613fb96121be565b5b613fc460c0612234565b90506000613fd484828501613eb7565b6000830152506020613fe884828501613eb7565b6020830152506040613ffc84828501613c66565b604083015250606082015167ffffffffffffffff8111156140205761401f61224f565b5b61402c84828501613f76565b606083015250608082015167ffffffffffffffff8111156140505761404f61224f565b5b61405c84828501613f76565b60808301525060a082015167ffffffffffffffff8111156140805761407f61224f565b5b61408c84828501613bda565b60a08301525092915050565b6000602082840312156140ae576140ad6121b4565b5b600082015167ffffffffffffffff8111156140cc576140cb6121b9565b5b6140d884828501613fa4565b91505092915050565b60006060820190506140f660008301866129e9565b81810360208301526141088185612972565b9050818103604083015261411c8184612765565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614160826127ea565b915061416b836127ea565b92508261417b5761417a614126565b5b828204905092915050565b6000614191826127ea565b915061419c836127ea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156141d5576141d461313b565b5b828202905092915050565b60006040820190506141f56000830185613a99565b61420260208301846127f4565b939250505056fea264697066735822122034f98af89b41f53cdbb5e7c71b3745678f1ac236e88890aac447aa77b5f4c41064736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1385,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "secretBidId",
        "offset": 0,
        "slot": "0",
        "type": "t_userDefinedValueType(DataId)2393"
      },
      {
        "astId": 1387,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "presentHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 1389,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 473,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "builder",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Builder)1344"
      },
      {
        "astId": 477,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "requests",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(AdRequest)432_storage)dyn_storage"
      },
      {
        "astId": 479,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "nextId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_struct(AdRequest)432_storage)dyn_storage": {
        "base": "t_struct(AdRequest)432_storage",
        "encoding": "dynamic_array",
        "label": "struct BlockAdAuctionV2.AdRequest[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Builder)1344": {
        "encoding": "inplace",
        "label": "contract Builder",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AdRequest)432_storage": {
        "encoding": "inplace",
        "label": "struct BlockAdAuctionV2.AdRequest",
        "members": [
          {
            "astId": 424,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 426,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "extra",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 428,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "blockLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 431,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "paymentBidId",
            "offset": 0,
            "slot": "3",
            "type": "t_userDefinedValueType(DataId)2393"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(DataId)2393": {
        "encoding": "inplace",
        "label": "Suave.DataId",
        "numberOfBytes": "16"
      }
    }
  }
}