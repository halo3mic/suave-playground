{
  "address": "0xee9794177378e98268b30Ca14964f2FDFc71bD6D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "boostRelayUrl_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "PeekerReverted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "SuaveError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "SuaveErrorWithData",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.BidId",
          "name": "bidId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "allowedPeekers",
          "type": "address[]"
        }
      ],
      "name": "BidEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "extra",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockLimit",
          "type": "uint256"
        }
      ],
      "name": "RequestAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "egp",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "blockHash",
          "type": "string"
        }
      ],
      "name": "RequestIncluded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RequestRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "extra",
              "type": "bytes"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        }
      ],
      "name": "buildBlock",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "builderCall",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "includedRequestB",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "pendingRemovalsB",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ConfidentialControl.UnlockArgs",
          "name": "uArgs",
          "type": "tuple"
        }
      ],
      "name": "buildCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "builder",
      "outputs": [
        {
          "internalType": "contract Builder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "blockLimit",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "extra",
          "type": "string"
        }
      ],
      "name": "buyAd",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "extra",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "blockLimit",
              "type": "uint256"
            },
            {
              "internalType": "Suave.BidId",
              "name": "paymentBidId",
              "type": "bytes16"
            }
          ],
          "internalType": "struct BlockAdAuctionV2.AdRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ConfidentialControl.UnlockArgs",
          "name": "uArgs",
          "type": "tuple"
        }
      ],
      "name": "buyAdCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nextHash",
          "type": "bytes32"
        },
        {
          "internalType": "Suave.BidId",
          "name": "sBidId",
          "type": "bytes16"
        }
      ],
      "name": "ccCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confidentialConstructor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.BidId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.BidId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.Bid",
          "name": "bid",
          "type": "tuple"
        }
      ],
      "name": "emitBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchBidConfidentialBundleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "extra",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "blockLimit",
          "type": "uint256"
        },
        {
          "internalType": "Suave.BidId",
          "name": "paymentBidId",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a8101606f4e0bb6e50e4b026b6aab1f40bf1b2a851fdf2a4e52a37eb12f3bf1",
  "receipt": {
    "to": null,
    "from": "0x16f2Aa8dF055b6e672b93Ded41FecCCabAB565B0",
    "contractAddress": "0xee9794177378e98268b30Ca14964f2FDFc71bD6D",
    "transactionIndex": 0,
    "gasUsed": "7483166",
    "logsBloom": "0x
    "blockHash": "0xfc27b5895a58586894a00513ad1f30e83072db859660bc531bcc43e65c5ecb6b",
    "transactionHash": "0x1a8101606f4e0bb6e50e4b026b6aab1f40bf1b2a851fdf2a4e52a37eb12f3bf1",
    "logs": [],
    "blockNumber": 687029,
    "cumulativeGasUsed": "7483166",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://0xafa4c6985aa049fb79dd37010438cfebeb0f2bd42b115b89dd678dab0670c1de38da0c4e9138c9290a398ecd9a0b3110@boost-relay-goerli.flashbots.net"
  ],
  "numDeployments": 2,
  "solcInputHash": "d56c3b6b48ef78ff3bd00d86650d8c66",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"boostRelayUrl_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"PeekerReverted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"SuaveError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SuaveErrorWithData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.BidId\",\"name\":\"bidId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"}],\"name\":\"BidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"}],\"name\":\"RequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"egp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"blockHash\",\"type\":\"string\"}],\"name\":\"RequestIncluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RequestRemoved\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extra\",\"type\":\"bytes\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"buildBlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"builderCall\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"includedRequestB\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pendingRemovalsB\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ConfidentialControl.UnlockArgs\",\"name\":\"uArgs\",\"type\":\"tuple\"}],\"name\":\"buildCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"builder\",\"outputs\":[{\"internalType\":\"contract Builder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blockLimit\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"}],\"name\":\"buyAd\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"},{\"internalType\":\"Suave.BidId\",\"name\":\"paymentBidId\",\"type\":\"bytes16\"}],\"internalType\":\"struct BlockAdAuctionV2.AdRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ConfidentialControl.UnlockArgs\",\"name\":\"uArgs\",\"type\":\"tuple\"}],\"name\":\"buyAdCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nextHash\",\"type\":\"bytes32\"},{\"internalType\":\"Suave.BidId\",\"name\":\"sBidId\",\"type\":\"bytes16\"}],\"name\":\"ccCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confidentialConstructor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.BidId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.BidId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"emitBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchBidConfidentialBundleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extra\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockLimit\",\"type\":\"uint256\"},{\"internalType\":\"Suave.BidId\",\"name\":\"paymentBidId\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/blockad/BlockAdV2.sol\":\"BlockAdAuctionV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/blockad/BlockAdV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { AnyBidContract, Suave } from \\\"../standard_peekers/bids.sol\\\";\\nimport { ConfidentialControl } from \\\"./lib/ConfidentialControl.sol\\\";\\nimport { DynamicUintArray } from \\\"./lib/Utils.sol\\\";\\nimport { Builder } from \\\"./lib/Builder.sol\\\";\\n\\n\\ncontract BlockAdAuctionV2 is AnyBidContract, ConfidentialControl {\\n\\tusing DynamicUintArray for bytes;\\n\\n\\tstruct AdRequest {\\n\\t\\tuint id;\\n\\t\\tstring extra;\\n\\t\\tuint blockLimit;\\n\\t\\tSuave.BidId paymentBidId;\\n\\t}\\n\\tstruct Offer {\\n\\t\\tuint id;\\n\\t\\tstring extra;\\n\\t\\tuint64 egp;\\n\\t\\tbytes paymentBundle;\\n\\t}\\n\\n\\tevent RequestAdded(uint id, string extra, uint blockLimit);\\n\\tevent RequestRemoved(uint id);\\n\\tevent RequestIncluded(uint id, uint64 egp, string blockHash);\\n\\n\\tstring internal constant PB_NAMESPACE = \\\"blockad:v0:paymentBundle\\\";\\n\\tstring internal constant EB_NAMESPACE = \\\"default:v0:ethBundles\\\";\\n\\tstring internal constant EB_SIM_NAMESPACE = \\\"default:v0:ethBundleSimResults\\\";\\n\\tBuilder public builder;\\n\\tAdRequest[] public requests;\\n\\tuint public nextId;\\n\\n\\t/**********************************************************************\\n\\t *                           \\u26d3\\ufe0f ON-CHAIN METHODS                       *\\n\\t ***********************************************************************/\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tbuilder = new Builder(boostRelayUrl_);\\n\\t}\\n\\n\\tfunction buyAdCallback(AdRequest calldata request, UnlockArgs calldata uArgs) external unlock(uArgs) {\\n\\t\\trequests.push(request);\\n\\t\\tnextId++;\\n\\t\\temit RequestAdded(request.id, request.extra, request.blockLimit);\\n\\t}\\n\\n\\tfunction buildCallback(\\n\\t\\tbytes memory builderCall,\\n\\t\\tbytes memory includedRequestB,\\n\\t\\tbytes memory pendingRemovalsB,\\n\\t\\tUnlockArgs calldata uArgs\\n\\t) external unlock(uArgs) {\\n\\t\\tif (pendingRemovalsB.length > 0) {\\n\\t\\t\\tremoveRequests(pendingRemovalsB.export());\\n\\t\\t}\\n\\t\\tstring memory blockHash = handleBuilderCallback(address(builder), builderCall);\\n\\t\\thandleIncludedRequest(includedRequestB, blockHash);\\n\\t}\\n\\n\\tfunction requestsLength() public view returns (uint) {\\n\\t\\treturn requests.length;\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udd12 CONFIDENTIAL METHODS                      *\\n\\t ***********************************************************************/\\n\\n\\tfunction confidentialConstructor() public view override onlyConfidential returns (bytes memory) {\\n\\t\\treturn ConfidentialControl.confidentialConstructor();\\n\\t}\\n\\n\\tfunction buyAd(uint64 blockLimit, string memory extra) external onlyConfidential returns (bytes memory) {\\n\\t\\tbytes memory paymentBundle = this.fetchBidConfidentialBundleData();\\n\\t\\tcrequire(Suave.simulateBundle(paymentBundle) != 0, \\\"egp too low\\\");\\n\\t\\tSuave.BidId paymentBidId = storePaymentBundle(paymentBundle);\\n\\t\\tAdRequest memory request = AdRequest(nextId, extra, blockLimit, paymentBidId);\\n\\t\\treturn abi.encodeWithSelector(this.buyAdCallback.selector, request, getUnlockPair());\\n\\t}\\n\\n\\tfunction buildBlock(\\n\\t\\tSuave.BuildBlockArgs memory blockArgs,\\n\\t\\tuint64 blockHeight\\n\\t) public onlyConfidential returns (bytes memory) {\\n\\t\\tcrequire(requests.length > 0, \\\"No requests\\\");\\n\\t\\t(Offer memory bestOffer, bytes memory removals) = filterOffers(blockHeight);\\n\\t\\tcrequire(bestOffer.egp > 0, \\\"No valid offers\\\");\\n\\n\\t\\tstoreBundleInPool(blockHeight, bestOffer);\\n\\t\\tblockArgs.extra = bytes(bestOffer.extra);\\n\\t\\t// Expect flow is ordered by egp; if one wants to fail payment they need higher egp\\n\\t\\tbytes memory externalCallback = builder.buildFromPool(blockArgs, blockHeight);\\n\\n\\t\\treturn\\n\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\tthis.buildCallback.selector,\\n\\t\\t\\t\\texternalCallback,\\n\\t\\t\\t\\tabi.encode(bestOffer.id, bestOffer.egp),\\n\\t\\t\\t\\tremovals,\\n\\t\\t\\t\\tgetUnlockPair()\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udee0\\ufe0f INTERNAL METHODS                          *\\n\\t ***********************************************************************/\\n\\n\\tfunction removeRequests(uint[] memory pendingRemovals) internal {\\n\\t\\t// Assume that the pendingRemovals were added in ascending order\\n\\t\\t// Assume that pendingRemovals.length <= requests.length\\n\\t\\tfor (uint i = pendingRemovals.length; i > 0; --i) {\\n\\t\\t\\tuint indexToRemove = pendingRemovals[i - 1];\\n\\t\\t\\tuint requestId = requests[indexToRemove].id;\\n\\t\\t\\tif (indexToRemove < requests.length - 1) {\\n\\t\\t\\t\\trequests[indexToRemove] = requests[requests.length - 1];\\n\\t\\t\\t}\\n\\t\\t\\trequests.pop();\\n\\t\\t\\temit RequestRemoved(requestId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction handleIncludedRequest(bytes memory includedRequestB, string memory blockHash) internal {\\n\\t\\t(uint id, uint64 egp) = abi.decode(includedRequestB, (uint, uint64));\\n\\t\\temit RequestIncluded(id, egp, blockHash);\\n\\t}\\n\\n\\tfunction handleBuilderCallback(address target, bytes memory data) internal returns (string memory) {\\n\\t\\t(bool success, bytes memory res) = target.call(data);\\n\\t\\tcrequire(success, \\\"External call failed\\\");\\n\\t\\treturn abi.decode(res, (string));\\n\\t}\\n\\n\\tfunction storePaymentBundle(bytes memory paymentBundle) internal view returns (Suave.BidId) {\\n\\t\\taddress[] memory peekers = new address[](1);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tSuave.Bid memory paymentBid = Suave.newBid(0, peekers, peekers, PB_NAMESPACE);\\n\\t\\tSuave.confidentialStore(paymentBid.id, PB_NAMESPACE, paymentBundle);\\n\\t\\treturn paymentBid.id;\\n\\t}\\n\\n\\tfunction filterOffers(uint blockHeight) internal view returns (Offer memory bestOffer, bytes memory removals) {\\n\\t\\tfor (uint i; i < requests.length; ++i) {\\n\\t\\t\\tAdRequest memory request = requests[i];\\n\\t\\t\\tif (request.blockLimit < blockHeight) {\\n\\t\\t\\t\\tremovals = removals.append(i);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tbytes memory paymentBundle = Suave.confidentialRetrieve(request.paymentBidId, PB_NAMESPACE);\\n\\t\\t\\t(bool success, uint64 egp) = simulateBundleSafe(paymentBundle);\\n\\t\\t\\tif (!success || egp == 0) {\\n\\t\\t\\t\\tremovals = removals.append(i);\\n\\t\\t\\t} else if (egp > bestOffer.egp) {\\n\\t\\t\\t\\tbestOffer = Offer(request.id, request.extra, egp, paymentBundle);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction storeBundleInPool(uint64 blockHeight, Offer memory bestOffer) internal view {\\n\\t\\taddress[] memory allowedPeekers = new address[](3);\\n\\t\\tallowedPeekers[0] = address(builder);\\n\\t\\tallowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\t\\tallowedPeekers[2] = address(this);\\n\\t\\tSuave.Bid memory paymentBundleBid = Suave.newBid(blockHeight, allowedPeekers, allowedPeekers, EB_NAMESPACE);\\n\\t\\tSuave.confidentialStore(paymentBundleBid.id, EB_NAMESPACE, bestOffer.paymentBundle);\\n\\t\\tSuave.confidentialStore(paymentBundleBid.id, EB_SIM_NAMESPACE, abi.encode(bestOffer.egp));\\n\\t}\\n}\\n\",\"keccak256\":\"0x3252b58ef9b46a08e027a4417d6140228ad7c1d06c7342ec7668b73ffe899151\",\"license\":\"MIT\"},\"contracts/blockad/lib/Builder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { EthBlockBidContract, Suave } from \\\"../../standard_peekers/bids.sol\\\";\\nimport { SuaveContract } from \\\"./SuaveContract.sol\\\";\\n\\n\\ncontract Builder is EthBlockBidContract, SuaveContract {\\n\\tstring constant BB_NAMESPACE = \\\"blockad:v0:builderBid\\\";\\n\\tstring boostRelayUrl;\\n\\n\\tevent RelaySubmission(bytes32 bidId);\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tboostRelayUrl = boostRelayUrl_;\\n\\t}\\n\\n\\tfunction buildAndEmitCallback(string memory blockHash, bytes32 id) external returns (string memory) {\\n\\t\\temit RelaySubmission(id);\\n\\t\\treturn blockHash;\\n\\t}\\n\\n\\tfunction buildAndEmit(\\n\\t\\tSuave.BuildBlockArgs memory blockArgs,\\n\\t\\tuint64 blockHeight,\\n\\t\\tSuave.BidId[] memory bids,\\n\\t\\tstring memory namespace\\n\\t) public virtual override onlyConfidential returns (bytes memory) {\\n\\t\\t(Suave.Bid memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\t\\tstoreBuilderBid(blockBid.id, builderBid);\\n\\t\\tsubmitToRelay(builderBid);\\n\\t\\tstring memory blockHash = extractBlockHash(builderBid, blockArgs.slot);\\n\\t\\treturn abi.encodeWithSelector(this.buildAndEmitCallback.selector, blockHash, keccak256(builderBid));\\n\\t}\\n\\n\\tfunction submitBlock(uint slot) external view onlyConfidential returns (bytes memory) {\\n\\t\\tbytes memory builderBid = Suave.confidentialInputs();\\n\\t\\tsubmitToRelay(builderBid);\\n\\t\\tstring memory blockHash = extractBlockHash(builderBid, slot);\\n\\t\\treturn abi.encodeWithSelector(this.buildAndEmitCallback.selector, blockHash, keccak256(builderBid));\\n\\t}\\n\\n\\tfunction submitToRelay(bytes memory builderBid) internal view {\\n\\t\\t(bool success, bytes memory data) = Suave.SUBMIT_ETH_BLOCK_BID_TO_RELAY\\n\\t\\t\\t.staticcall(abi.encode(boostRelayUrl, builderBid));\\n\\t\\tif (!success) {\\n\\t\\t\\trevert SuaveErrorWithData(string(data), builderBid);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction storeBuilderBid(Suave.BidId blockBidId, bytes memory builderBid) internal view {\\n\\t\\taddress[] memory peekers = new address[](1);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tSuave.confidentialStore(blockBidId, BB_NAMESPACE, builderBid);\\n\\t}\\n\\n\\t// Extract block-hash from stringified SubmitBlockRequest JSON object - method will fail if the struct changes!\\n\\tfunction extractBlockHash(bytes memory builderBid, uint slot) public pure returns (string memory) {\\n\\t\\tuint resultBytesLen = 64;\\n\\t\\tuint offset = 121 + decLen(slot);\\n\\t\\tbytes memory result = new bytes(resultBytesLen);\\n\\t\\tassembly {\\n\\t\\t\\tfor { let i:=32 } lt(i, add(resultBytesLen, 32)) { i:=add(i, 32) } {\\n\\t\\t\\t\\tmstore(add(result, i), mload(add(builderBid, add(offset, i))))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\tfunction decLen(uint num) internal pure returns (uint count) {\\n\\t\\tassembly {\\n\\t\\t\\tfor { let dec := 10 } true { dec := mul(dec, 10) } {\\n\\t\\t\\t\\tcount := add(count, 1)\\n\\t\\t\\t\\tswitch lt(num, dec)\\n\\t\\t\\t\\t\\tcase 1 { break }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x3933c4db8fd90321043e64f1ec5dd575cc220cc5d648400d6e2f7da4b002dead\",\"license\":\"MIT\"},\"contracts/blockad/lib/ConfidentialControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { SuaveContract, Suave } from \\\"./SuaveContract.sol\\\";\\n\\n\\nabstract contract ConfidentialControl is SuaveContract {\\n\\tstruct UnlockArgs {\\n\\t\\tbytes32 key;\\n\\t\\tbytes32 nextHash;\\n\\t}\\n\\n\\tmodifier unlock(UnlockArgs calldata unlockPair) {\\n\\t\\tcrequire(isValidKey(unlockPair.key), \\\"Invalid key\\\");\\n\\t\\t_;\\n\\t\\tpresentHash = unlockPair.nextHash;\\n\\t\\tnonce++;\\n\\t}\\n\\n\\tstring internal constant S_NAMESPACE = \\\"blockad:v0:secret\\\";\\n\\tSuave.BidId internal secretBidId;\\n\\tbytes32 internal presentHash;\\n\\tuint internal nonce;\\n\\n\\t/**********************************************************************\\n\\t *                           \\u26d3\\ufe0f ON-CHAIN METHODS                       *\\n\\t ***********************************************************************/\\n\\n\\tfunction ccCallback(bytes32 nextHash, Suave.BidId sBidId) external {\\n\\t\\tcrequire(!isInitialized(), \\\"Already initialized\\\");\\n\\t\\tpresentHash = nextHash;\\n\\t\\tsecretBidId = sBidId;\\n\\t}\\n\\n\\tfunction isInitialized() public view returns (bool) {\\n\\t\\treturn presentHash != 0;\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udd12 CONFIDENTIAL METHODS                      *\\n\\t ***********************************************************************/\\n\\n\\tfunction confidentialConstructor() public view virtual onlyConfidential returns (bytes memory) {\\n\\t\\tcrequire(!isInitialized(), \\\"Already initialized\\\");\\n\\t\\tbytes memory secret = Suave.confidentialInputs();\\n\\t\\tSuave.BidId sBidId = storeSecret(secret);\\n\\t\\tbytes32 nextHash = makeHash(abi.decode(secret, (bytes32)), nonce);\\n\\t\\treturn abi.encodeWithSelector(this.ccCallback.selector, nextHash, sBidId);\\n\\t}\\n\\n\\t/**********************************************************************\\n\\t *                         \\ud83d\\udee0\\ufe0f INTERNAL METHODS                          *\\n\\t ***********************************************************************/\\n\\n\\tfunction storeSecret(bytes memory secret) internal view returns (Suave.BidId) {\\n\\t\\taddress[] memory peekers = new address[](3);\\n\\t\\tpeekers[0] = address(this);\\n\\t\\tpeekers[1] = Suave.FETCH_BIDS;\\n\\t\\tpeekers[2] = Suave.CONFIDENTIAL_RETRIEVE;\\n\\t\\tSuave.Bid memory secretBid = Suave.newBid(0, peekers, peekers, S_NAMESPACE);\\n\\t\\tSuave.confidentialStore(secretBid.id, S_NAMESPACE, secret);\\n\\t\\treturn secretBid.id;\\n\\t}\\n\\n\\tfunction isValidKey(bytes32 key) internal view returns (bool) {\\n\\t\\treturn keccak256(abi.encode(key)) == presentHash;\\n\\t}\\n\\n\\tfunction getUnlockPair() internal view returns (UnlockArgs memory) {\\n\\t\\treturn UnlockArgs(getKey(nonce), getHash(nonce + 1));\\n\\t}\\n\\n\\tfunction getHash(uint _nonce) internal view returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(getKey(_nonce)));\\n\\t}\\n\\n\\tfunction getKey(uint _nonce) internal view returns (bytes32) {\\n\\t\\treturn makeKey(getSecret(), _nonce);\\n\\t}\\n\\n\\tfunction makeHash(bytes32 secret, uint _nonce) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(makeKey(secret, _nonce)));\\n\\t}\\n\\n\\tfunction makeKey(bytes32 secret, uint _nonce) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(secret, _nonce));\\n\\t}\\n\\n\\tfunction getSecret() internal view returns (bytes32) {\\n\\t\\tbytes memory secretB = Suave.confidentialRetrieve(secretBidId, S_NAMESPACE);\\n\\t\\treturn abi.decode(secretB, (bytes32));\\n\\t}\\n}\\n\",\"keccak256\":\"0x6fdfea1e6ff1ed99e9e5029d42aaea2b620463e67c5903b7d34743ccdc30e4b0\",\"license\":\"MIT\"},\"contracts/blockad/lib/SuaveContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Miha Lotric (halo3mic)\\n\\npragma solidity ^0.8.8;\\n\\nimport { Suave } from \\\"../../standard_peekers/bids.sol\\\";\\n\\n\\nabstract contract SuaveContract {\\n\\terror SuaveError(string message);\\n\\terror SuaveErrorWithData(string message, bytes data);\\n\\n\\tmodifier onlyConfidential() {\\n\\t\\tcrequire(Suave.isConfidential(), \\\"Not confidential\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction simulateBundleSafe(bytes memory bundle) internal view returns (bool valid, uint64 egp) {\\n\\t\\t(bool success, bytes memory d) = Suave.SIMULATE_BUNDLE.staticcall{ gas: 20_000 }(abi.encode(bundle));\\n\\t\\tif (success) {\\n\\t\\t\\treturn (true, abi.decode(d, (uint64)));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction crequire(bool condition, string memory message) internal pure {\\n\\t\\tif (!condition) {\\n\\t\\t\\trevert SuaveError(message);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xebe3f757af470a48864918423280ac6e2048698e3d8f99bc7074402c1681cb4f\",\"license\":\"MIT\"},\"contracts/blockad/lib/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n\\nlibrary DynamicUintArray {\\n\\tfunction append(bytes memory a, uint e) internal pure returns (bytes memory) {\\n\\t\\treturn bytes.concat(a, TypeConversion.toBytes(e));\\n\\t}\\n\\n\\tfunction export(bytes memory a) internal pure returns (uint[] memory) {\\n\\t\\treturn TypeConversion.toUints(a);\\n\\t}\\n}\\n\\nlibrary TypeConversion {\\n\\tfunction toBytes(uint x) internal pure returns (bytes memory y) {\\n\\t\\ty = new bytes(32);\\n\\t\\tassembly {\\n\\t\\t\\tmstore(add(y, 32), x)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction toUint(bytes memory x, uint offset) internal pure returns (uint y) {\\n\\t\\tassembly {\\n\\t\\t\\ty := mload(add(x, offset))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction toUints(bytes memory xs) internal pure returns (uint[] memory ys) {\\n\\t\\tys = new uint[](xs.length / 32);\\n\\t\\tfor (uint i = 0; i < xs.length / 32; i++) {\\n\\t\\t\\tys[i] = toUint(xs, i * 32 + 32);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xec09eed9c1d6d24228b0473b9614be28b428ed832808ac3a75ffbcb444ac54af\",\"license\":\"MIT\"},\"contracts/libraries/Suave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.8;\\n\\nlibrary Suave {\\n    error PeekerReverted(address, bytes);\\n\\n    type BidId is bytes16;\\n\\n    struct Bid {\\n        BidId id;\\n        BidId salt;\\n        uint64 decryptionCondition;\\n        address[] allowedPeekers;\\n        address[] allowedStores;\\n        string version;\\n    }\\n\\n    struct BuildBlockArgs {\\n        uint64 slot;\\n        bytes proposerPubkey;\\n        bytes32 parent;\\n        uint64 timestamp;\\n        address feeRecipient;\\n        uint64 gasLimit;\\n        bytes32 random;\\n        Withdrawal[] withdrawals;\\n        bytes extra;\\n    }\\n\\n    struct SubmitBlockRequest {\\n        BidTrace message;\\n        ExecutionPayload executionPayload;\\n        bytes signature; // BLSSignature as bytes of fixed length 96\\n    }\\n\\n    struct BidTrace {\\n        uint256 slot;\\n        bytes32 parentHash;\\n        bytes32 blockHash;\\n        bytes builderPubkey; // Representing BLSPubKey with dynamic bytes\\n        bytes proposerPubkey;\\n        address proposerFeeRecipient; // ExecutionAddress as Ethereum address\\n        uint256 gasLimit;\\n        uint256 gasUsed;\\n        uint256 value; // uint256.Int as uint256\\n    }\\n\\n    struct ExecutionPayload {\\n        bytes32 parentHash;\\n        address feeRecipient; // ExecutionAddress as Ethereum address\\n        bytes32 stateRoot;\\n        bytes32 receiptsRoot;\\n        bytes32 logsBloom; // Assuming fixed size 256 bytes, may need adjustment\\n        bytes32 prevRandao;\\n        uint256 blockNumber;\\n        uint256 gasLimit;\\n        uint256 gasUsed;\\n        uint256 timestamp;\\n        bytes32 extraData; // Assuming fixed size, may need adjustment\\n        bytes32 baseFeePerGas;\\n        bytes32 blockHash;\\n        bytes transactions; // Assuming Transaction is another struct\\n        Withdrawal[] withdrawals; // Assuming Withdrawal is another struct\\n    }\\n\\n    struct ExecutionPayloadEnvelope {\\n        ExecutableData executionPayload;\\n        uint256 blockValue;\\n    }\\n\\n    struct ExecutableData {\\n        bytes32 parentHash;\\n        address feeRecipient;\\n        bytes32 stateRoot;\\n        bytes32 receiptsRoot;\\n        bytes32 logsBloom; // Fixed size, change accordingly\\n        bytes32 random;\\n        uint256 number;\\n        uint256 gasLimit;\\n        uint256 gasUsed;\\n        uint256 timestamp;\\n        bytes32 extraData; // Fixed size, change accordingly\\n        uint256 baseFeePerGas;\\n        bytes32 blockHash;\\n        bytes32[] transactions; // Fixed size arrays or handle dynamically\\n        Withdrawal[] withdrawals; // Assuming Withdrawal is another struct\\n    }\\n\\n    struct Withdrawal {\\n        uint64 index;\\n        uint64 validator;\\n        address Address;\\n        uint64 amount;\\n    }\\n\\n    address public constant ANYALLOWED = 0xC8df3686b4Afb2BB53e60EAe97EF043FE03Fb829;\\n\\n    address public constant IS_CONFIDENTIAL_ADDR = 0x0000000000000000000000000000000042010000;\\n\\n    address public constant BUILD_ETH_BLOCK = 0x0000000000000000000000000000000042100001;\\n\\n    address public constant CONFIDENTIAL_INPUTS = 0x0000000000000000000000000000000042010001;\\n\\n    address public constant CONFIDENTIAL_RETRIEVE = 0x0000000000000000000000000000000042020001;\\n\\n    address public constant CONFIDENTIAL_STORE = 0x0000000000000000000000000000000042020000;\\n\\n    address public constant ETHCALL = 0x0000000000000000000000000000000042100003;\\n\\n    address public constant EXTRACT_HINT = 0x0000000000000000000000000000000042100037;\\n\\n    address public constant FETCH_BIDS = 0x0000000000000000000000000000000042030001;\\n\\n    address public constant FILL_MEV_SHARE_BUNDLE = 0x0000000000000000000000000000000043200001;\\n\\n    address public constant NEW_BID = 0x0000000000000000000000000000000042030000;\\n\\n    address public constant SIGN_ETH_TRANSACTION = 0x0000000000000000000000000000000040100001;\\n\\n    address public constant SIMULATE_BUNDLE = 0x0000000000000000000000000000000042100000;\\n\\n    address public constant SUBMIT_BUNDLE_JSON_RPC = 0x0000000000000000000000000000000043000001;\\n\\n    address public constant SUBMIT_ETH_BLOCK_BID_TO_RELAY = 0x0000000000000000000000000000000042100002;\\n\\n    // Returns whether execution is off- or on-chain\\n    function isConfidential() internal view returns (bool b) {\\n        (bool success, bytes memory isConfidentialBytes) = IS_CONFIDENTIAL_ADDR.staticcall(\\\"\\\");\\n        if (!success) {\\n            revert PeekerReverted(IS_CONFIDENTIAL_ADDR, isConfidentialBytes);\\n        }\\n        assembly {\\n            // Load the length of data (first 32 bytes)\\n            let len := mload(isConfidentialBytes)\\n            // Load the data after 32 bytes, so add 0x20\\n            b := mload(add(isConfidentialBytes, 0x20))\\n        }\\n    }\\n\\n    function buildEthBlock(BuildBlockArgs memory blockArgs, BidId bidId, string memory namespace)\\n        internal\\n        view\\n        returns (bytes memory, bytes memory)\\n    {\\n        (bool success, bytes memory data) = BUILD_ETH_BLOCK.staticcall(abi.encode(blockArgs, bidId, namespace));\\n        if (!success) {\\n            revert PeekerReverted(BUILD_ETH_BLOCK, data);\\n        }\\n\\n        return abi.decode(data, (bytes, bytes));\\n    }\\n\\n    function confidentialInputs() internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_INPUTS.staticcall(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_INPUTS, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialRetrieve(BidId bidId, string memory key) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_RETRIEVE.staticcall(abi.encode(bidId, key));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_RETRIEVE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStore(BidId bidId, string memory key, bytes memory data1) internal view {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE.staticcall(abi.encode(bidId, key, data1));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE, data);\\n        }\\n    }\\n\\n    function ethcall(address contractAddr, bytes memory input1) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = ETHCALL.staticcall(abi.encode(contractAddr, input1));\\n        if (!success) {\\n            revert PeekerReverted(ETHCALL, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function extractHint(bytes memory bundleData) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = EXTRACT_HINT.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(EXTRACT_HINT, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function fetchBids(uint64 cond, string memory namespace) internal view returns (Bid[] memory) {\\n        (bool success, bytes memory data) = FETCH_BIDS.staticcall(abi.encode(cond, namespace));\\n        if (!success) {\\n            revert PeekerReverted(FETCH_BIDS, data);\\n        }\\n\\n        return abi.decode(data, (Bid[]));\\n    }\\n\\n    function fillMevShareBundle(BidId bidId) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = FILL_MEV_SHARE_BUNDLE.staticcall(abi.encode(bidId));\\n        if (!success) {\\n            revert PeekerReverted(FILL_MEV_SHARE_BUNDLE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function newBid(\\n        uint64 decryptionCondition,\\n        address[] memory allowedPeekers,\\n        address[] memory allowedStores,\\n        string memory bidType\\n    ) internal view returns (Bid memory) {\\n        (bool success, bytes memory data) =\\n            NEW_BID.staticcall(abi.encode(decryptionCondition, allowedPeekers, allowedStores, bidType));\\n        if (!success) {\\n            revert PeekerReverted(NEW_BID, data);\\n        }\\n\\n        return abi.decode(data, (Bid));\\n    }\\n\\n    function signEthTransaction(bytes memory txn, string memory chainId, string memory signingKey)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory data) = SIGN_ETH_TRANSACTION.staticcall(abi.encode(txn, chainId, signingKey));\\n        if (!success) {\\n            revert PeekerReverted(SIGN_ETH_TRANSACTION, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function simulateBundle(bytes memory bundleData) internal view returns (uint64) {\\n        (bool success, bytes memory data) = SIMULATE_BUNDLE.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_BUNDLE, data);\\n        }\\n\\n        return abi.decode(data, (uint64));\\n    }\\n\\n    function submitBundleJsonRPC(string memory url, string memory method, bytes memory params)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_BUNDLE_JSON_RPC.staticcall(abi.encode(url, method, params));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_BUNDLE_JSON_RPC, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function submitEthBlockBidToRelay(string memory relayUrl, bytes memory builderBid)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_ETH_BLOCK_BID_TO_RELAY.staticcall(abi.encode(relayUrl, builderBid));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_ETH_BLOCK_BID_TO_RELAY, data);\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0x418ecb63f0466422faaae0a0d725da46374a68431022438815c72e12a863bdf4\",\"license\":\"UNLICENSED\"},\"contracts/standard_peekers/bids.sol\":{\"content\":\"pragma solidity ^0.8.8;\\n\\nimport \\\"../libraries/Suave.sol\\\";\\n\\ncontract AnyBidContract {\\n\\n\\tevent BidEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tuint64 decryptionCondition,\\n\\t\\taddress[] allowedPeekers\\n\\t);\\n\\n\\tfunction fetchBidConfidentialBundleData() public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\t\\t\\n\\t\\tbytes memory confidentialInputs = Suave.confidentialInputs();\\n\\t\\treturn abi.decode(confidentialInputs, (bytes));\\n\\t}\\n\\n\\t// Bids to this contract should not be trusted!\\n\\tfunction emitBid(Suave.Bid calldata bid) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t}\\n}\\n\\ncontract BundleBidContract is AnyBidContract {\\n\\n\\tfunction newBid(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores) external payable returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tbytes memory bundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\tuint64 egp = Suave.simulateBundle(bundleData);\\n\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"default:v0:ethBundles\\\");\\n\\n\\t\\tSuave.confidentialStore(bid.id, \\\"default:v0:ethBundles\\\", bundleData);\\n\\t\\tSuave.confidentialStore(bid.id, \\\"default:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\n\\t\\treturn emitAndReturn(bid, bundleData);\\n\\t}\\n\\n\\tfunction emitAndReturn(Suave.Bid memory bid, bytes memory) internal virtual returns (bytes memory) {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(bid));\\n\\t}\\n}\\n\\ncontract EthBundleSenderContract is BundleBidContract {\\n\\tstring[] public builderUrls;\\n\\n\\tconstructor(string[] memory builderUrls_) {\\n\\t\\tbuilderUrls = builderUrls_;\\n\\t}\\n\\n\\tfunction emitAndReturn(Suave.Bid memory bid, bytes memory bundleData) internal virtual override returns (bytes memory) {\\n\\t\\tfor (uint i = 0; i < builderUrls.length; i++) {\\n\\t\\t\\tSuave.submitBundleJsonRPC(builderUrls[i], \\\"eth_sendBundle\\\", bundleData);\\n\\t\\t}\\n\\n\\t\\treturn BundleBidContract.emitAndReturn(bid, bundleData);\\n\\t}\\n}\\n\\ncontract MevShareBidContract is AnyBidContract {\\n\\n\\tevent HintEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tbytes hint\\n\\t);\\n\\n\\tevent MatchEvent(\\n\\t\\tSuave.BidId matchBidId,\\n\\t\\tbytes matchHint\\n\\t);\\n\\n\\tfunction newBid(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores) external payable returns (bytes memory) {\\n\\t\\t// 0. check confidential execution\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t// 1. fetch bundle data\\n\\t\\tbytes memory bundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\t// 2. sim bundle\\n\\t\\tuint64 egp = Suave.simulateBundle(bundleData);\\n\\t\\t\\n\\t\\t// 3. extract hint\\n\\t\\tbytes memory hint = Suave.extractHint(bundleData);\\n\\t\\t\\n\\t\\t// // 4. store bundle and sim results\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\t\\tSuave.confidentialStore(bid.id, \\\"mevshare:v0:ethBundles\\\", bundleData);\\n\\t\\tSuave.confidentialStore(bid.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit HintEvent(bid.id, hint);\\n\\n\\t\\t// // 5. return \\\"callback\\\" to emit hint onchain\\n\\t\\treturn bytes.concat(this.emitBidAndHint.selector, abi.encode(bid, hint));\\n\\t}\\n\\n\\tfunction emitBidAndHint(Suave.Bid calldata bid, bytes memory hint) public {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit HintEvent(bid.id, hint);\\n\\t}\\n\\n\\tfunction newMatch(uint64 decryptionCondition, address[] memory bidAllowedPeekers, address[] memory bidAllowedStores, Suave.BidId shareBidId) external payable returns (bytes memory) {\\n\\t\\t// WARNING : this function will copy the original mev share bid\\n\\t\\t// into a new key with potentially different permsissions\\n\\t\\t\\n\\t\\trequire(Suave.isConfidential());\\n\\t\\t// 1. fetch confidential data\\n\\t\\tbytes memory matchBundleData = this.fetchBidConfidentialBundleData();\\n\\n\\t\\t// 2. sim match alone for validity\\n\\t\\tuint64 egp = Suave.simulateBundle(matchBundleData);\\n\\n\\t\\t// 3. extract hint\\n\\t\\tbytes memory matchHint = Suave.extractHint(matchBundleData);\\n\\t\\t\\n\\t\\tSuave.Bid memory bid = Suave.newBid(decryptionCondition, bidAllowedPeekers, bidAllowedStores, \\\"mevshare:v0:matchBids\\\");\\n\\t\\tSuave.confidentialStore(bid.id, \\\"mevshare:v0:ethBundles\\\", matchBundleData);\\n\\t\\tSuave.confidentialStore(bid.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(0));\\n\\n\\t\\t//4. merge bids\\n\\t\\tSuave.BidId[] memory bids = new Suave.BidId[](2);\\n\\t\\tbids[0] = shareBidId;\\n\\t\\tbids[1] = bid.id;\\n\\t\\tSuave.confidentialStore(bid.id, \\\"mevshare:v0:mergedBids\\\", abi.encode(bids));\\n\\n\\t\\treturn emitMatchBidAndHint(bid, matchHint);\\n\\t}\\n\\n\\tfunction emitMatchBidAndHint(Suave.Bid memory bid, bytes memory matchHint) internal virtual returns (bytes memory) {\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\temit MatchEvent(bid.id, matchHint);\\n\\n\\t\\treturn bytes.concat(this.emitBid.selector, abi.encode(bid));\\n\\t}\\n}\\n\\ncontract MevShareBundleSenderContract is MevShareBidContract {\\n\\tstring[] public builderUrls;\\n\\n\\tconstructor(string[] memory builderUrls_) {\\n\\t\\tbuilderUrls = builderUrls_;\\n\\t}\\n\\n\\tfunction emitMatchBidAndHint(Suave.Bid memory bid, bytes memory matchHint) internal virtual override returns (bytes memory) {\\n\\t\\tbytes memory bundleData = Suave.fillMevShareBundle(bid.id);\\n\\t\\tfor (uint i = 0; i < builderUrls.length; i++) {\\n\\t\\t\\tSuave.submitBundleJsonRPC(builderUrls[i], \\\"mev_sendBundle\\\", bundleData);\\n\\t\\t}\\n\\n\\t\\treturn MevShareBidContract.emitMatchBidAndHint(bid, matchHint);\\n\\t}\\n}\\n\\n/* Not tested or implemented on the precompile side */\\nstruct EgpBidPair {\\n\\tuint64 egp; // in wei, beware overflow\\n\\tSuave.BidId bidId;\\n}\\n\\n// todo: instead of inherit interact with deployed builder contract\\ncontract EthBlockBidContract is AnyBidContract {\\n\\n\\tevent BuilderBoostBidEvent(\\n\\t\\tSuave.BidId bidId,\\n\\t\\tbytes builderBid\\n\\t);\\n\\t\\n\\tfunction idsEqual(Suave.BidId _l, Suave.BidId _r) public pure returns (bool) {\\n\\t\\tbytes memory l = abi.encodePacked(_l);\\n\\t\\tbytes memory r = abi.encodePacked(_r);\\n\\t\\tfor (uint i = 0; i < l.length; i++) {\\n\\t\\t\\tif (bytes(l)[i] != r[i]) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction buildMevShare(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public virtual returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\t\\tSuave.Bid[] memory allShareMatchBids = Suave.fetchBids(blockHeight, \\\"mevshare:v0:matchBids\\\");\\n\\t\\tSuave.Bid[] memory allShareUserBids = Suave.fetchBids(blockHeight, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\n\\t\\tif (allShareUserBids.length == 0) {\\n\\t\\t\\trevert Suave.PeekerReverted(address(this), \\\"no bids\\\");\\n\\t\\t}\\n\\n\\t\\tSuave.Bid[] memory allBids = new Suave.Bid[](allShareUserBids.length);\\n\\t\\tfor (uint i = 0; i < allShareUserBids.length; i++) {\\n\\t\\t\\t// TODO: sort matches by egp first!\\n\\t\\t\\tSuave.Bid memory bidToInsert = allShareUserBids[i]; // will be updated with the best match if any\\n\\t\\t\\tfor (uint j = 0; j < allShareMatchBids.length; j++) {\\n\\t\\t\\t\\t// TODO: should be done once at the start and sorted\\n\\t\\t\\t\\tSuave.BidId[] memory mergedBidIds = abi.decode(Suave.confidentialRetrieve(allShareMatchBids[j].id, \\\"mevshare:v0:mergedBids\\\"), (Suave.BidId[]));\\n\\t\\t\\t\\tif (idsEqual(mergedBidIds[0], allShareUserBids[i].id)) {\\n\\t\\t\\t\\t\\tbidToInsert = allShareMatchBids[j];\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tallBids[i] = bidToInsert;\\n\\t\\t}\\n\\n\\t\\tEgpBidPair[] memory bidsByEGP = new EgpBidPair[](allBids.length);\\n\\t\\tfor (uint i = 0; i < allBids.length; i++) {\\n\\t\\t\\tbytes memory simResults = Suave.confidentialRetrieve(allBids[i].id, \\\"mevshare:v0:ethBundleSimResults\\\");\\n\\t\\t\\tuint64 egp = abi.decode(simResults, (uint64));\\n\\t\\t\\tbidsByEGP[i] = EgpBidPair(egp, allBids[i].id);\\n\\t\\t}\\n\\n\\t\\t// Bubble sort, cause why not\\n\\t\\tuint n = bidsByEGP.length;\\n\\t\\tfor (uint i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint j = i + 1; j < n; j++) {\\n\\t\\t\\t\\tif (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n\\t\\t\\t\\t\\tEgpBidPair memory temp = bidsByEGP[i];\\n\\t\\t\\t\\t\\tbidsByEGP[i] = bidsByEGP[j];\\n\\t\\t\\t\\t\\tbidsByEGP[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tSuave.BidId[] memory allBidIds = new Suave.BidId[](allBids.length);\\n\\t\\tfor (uint i = 0; i < bidsByEGP.length; i++) {\\n\\t\\t\\tallBidIds[i] = bidsByEGP[i].bidId;\\n\\t\\t}\\n\\n\\t\\treturn buildAndEmit(blockArgs, blockHeight, allBidIds, \\\"mevshare:v0\\\");\\n\\t}\\n\\n\\tfunction buildFromPool(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\tSuave.Bid[] memory allBids = Suave.fetchBids(blockHeight, \\\"default:v0:ethBundles\\\");\\n\\t\\tif (allBids.length == 0) {\\n\\t\\t\\trevert Suave.PeekerReverted(address(this), \\\"no bids\\\");\\n\\t\\t}\\n\\n\\t\\tEgpBidPair[] memory bidsByEGP = new EgpBidPair[](allBids.length);\\n\\t\\tfor (uint i = 0; i < allBids.length; i++) {\\n\\t\\t\\tbytes memory simResults = Suave.confidentialRetrieve(allBids[i].id, \\\"default:v0:ethBundleSimResults\\\");\\n\\t\\t\\tuint64 egp = abi.decode(simResults, (uint64));\\n\\t\\t\\tbidsByEGP[i] = EgpBidPair(egp, allBids[i].id);\\n\\t\\t}\\n\\n\\t\\t// Bubble sort, cause why not\\n\\t\\tuint n = bidsByEGP.length;\\n\\t\\tfor (uint i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint j = i + 1; j < n; j++) {\\n\\t\\t\\t\\tif (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n\\t\\t\\t\\t\\tEgpBidPair memory temp = bidsByEGP[i];\\n\\t\\t\\t\\t\\tbidsByEGP[i] = bidsByEGP[j];\\n\\t\\t\\t\\t\\tbidsByEGP[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tSuave.BidId[] memory allBidIds = new Suave.BidId[](allBids.length);\\n\\t\\tfor (uint i = 0; i < bidsByEGP.length; i++) {\\n\\t\\t\\tallBidIds[i] = bidsByEGP[i].bidId;\\n\\t\\t}\\n\\n\\t\\treturn buildAndEmit(blockArgs, blockHeight, allBidIds, \\\"\\\");\\n\\t}\\n\\n\\tfunction buildAndEmit(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public virtual returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t(Suave.Bid memory blockBid, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\n\\t\\temit BuilderBoostBidEvent(blockBid.id, builderBid);\\n\\t\\temit BidEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n\\t\\treturn bytes.concat(this.emitBuilderBidAndBid.selector, abi.encode(blockBid, builderBid));\\n\\t}\\n\\n\\tfunction doBuild(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public view returns (Suave.Bid memory, bytes memory) {\\n\\t\\taddress[] memory allowedPeekers = new address[](2);\\n\\t\\tallowedPeekers[0] = address(this);\\n\\t\\tallowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\n\\t\\tSuave.Bid memory blockBid = Suave.newBid(blockHeight, allowedPeekers, allowedPeekers, \\\"default:v0:mergedBids\\\");\\n\\t\\tSuave.confidentialStore(blockBid.id, \\\"default:v0:mergedBids\\\", abi.encode(bids));\\n\\t\\t \\n\\t\\t(bytes memory builderBid, bytes memory payload) = Suave.buildEthBlock(blockArgs, blockBid.id, namespace);\\n\\t\\tSuave.confidentialStore(blockBid.id, \\\"default:v0:builderPayload\\\", payload); // only through this.unlock\\n\\n\\t\\treturn (blockBid, builderBid);\\n\\t}\\n\\n\\tfunction emitBuilderBidAndBid(Suave.Bid memory bid, bytes memory builderBid) public returns (Suave.Bid memory, bytes memory) {\\n\\t\\temit BuilderBoostBidEvent(bid.id, builderBid);\\n\\t\\temit BidEvent(bid.id, bid.decryptionCondition, bid.allowedPeekers);\\n\\t\\treturn (bid, builderBid);\\n\\t}\\n\\n\\tfunction unlock(Suave.BidId bidId, bytes memory signedBlindedHeader) public view returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t// TODO: verify the header is correct\\n\\t\\t// TODO: incorporate protocol name\\n\\t\\tbytes memory payload = Suave.confidentialRetrieve(bidId, \\\"default:v0:builderPayload\\\");\\n\\t\\treturn payload;\\n\\t}\\n}\\n\\ncontract EthBlockBidSenderContract is EthBlockBidContract {\\n\\tstring boostRelayUrl;\\n\\n\\tevent RelaySubmissionEvent(\\n\\t\\tbytes blockHash\\n\\t);\\n\\n\\tconstructor(string memory boostRelayUrl_) {\\n\\t\\tboostRelayUrl = boostRelayUrl_;\\n\\t}\\n\\n\\tfunction buildAndEmitCallback(bytes memory blockHash) external {\\n\\t\\temit RelaySubmissionEvent(blockHash);\\n\\t}\\n\\n\\tfunction buildAndEmit(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight, Suave.BidId[] memory bids, string memory namespace) public virtual override returns (bytes memory) {\\n\\t\\trequire(Suave.isConfidential());\\n\\n\\t\\t(, bytes memory builderBid) = this.doBuild(blockArgs, blockHeight, bids, namespace);\\n\\t\\tSuave.submitEthBlockBidToRelay(boostRelayUrl, builderBid);\\n\\n\\t\\tbytes memory blockHash = extractBlockHash(builderBid, blockArgs.slot);\\n\\t\\treturn abi.encodeWithSelector(this.buildAndEmitCallback.selector, blockHash);\\n\\t}\\n\\n\\tfunction extractBlockHash(bytes memory builderBid, uint slot) public pure returns (bytes memory) {\\n\\t\\tuint resultBytesLen = 64;\\n\\t\\tuint offset = 121 + decLen(slot);\\n        bytes memory result = new bytes(resultBytesLen);\\n\\t\\tassembly { \\n\\t\\t\\tfor { let i:=32 } lt(i, add(resultBytesLen, 32)) { i:=add(i, 32) } {\\n\\t\\t\\t\\tmstore(add(result, i), mload(add(builderBid, add(offset, i))))\\n            }\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\tfunction decLen(uint num) internal pure returns (uint count) {\\n        assembly {\\n            for { let dec := 10 } true { dec := mul(dec, 10) } {\\n                count := add(count, 1)\\n                switch lt(num, dec)\\n                    case 1 { break }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b5527c3da4e67191882d0031536d0749f56dcf83fceb16edfddfc308737fc3f\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806392f07a581161008c578063d7e84fbf11610066578063d7e84fbf14610203578063ee2cc36414610221578063fd38f21d1461023d578063ffbbfcb01461026d576100cf565b806392f07a58146101ad578063bb7bae0a146101cb578063c0b9d287146101e7576100cf565b8063392e53cd146100d457806360727f8e146100f257806361b8ce8c1461012257806364e65a62146101405780637e48532c1461015c57806381d12c581461017a575b600080fd5b6100dc61028b565b6040516100e991906122a9565b60405180910390f35b61010c60048036038101906101079190612770565b61029b565b6040516101199190612854565b60405180910390f35b61012a61051b565b604051610137919061288f565b60405180910390f35b61015a600480360381019061015591906128ce565b610521565b005b6101646105ee565b6040516101719190612854565b60405180910390f35b610194600480360381019061018f91906129b5565b610643565b6040516101a49493929190612a84565b60405180910390f35b6101b561070b565b6040516101c29190612854565b60405180910390f35b6101e560048036038101906101e09190612afc565b610744565b005b61020160048036038101906101fc9190612b5b565b6107b0565b005b61020b610827565b6040516102189190612c03565b60405180910390f35b61023b60048036038101906102369190612c3d565b61084d565b005b61025760048036038101906102529190612d3a565b610966565b6040516102649190612854565b60405180910390f35b610275610b67565b604051610282919061288f565b60405180910390f35b60008060001b6001541415905090565b60606102e36102a8610b74565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c3c565b61032a6000600480549050116040518060400160405280600b81526020017f4e6f207265717565737473000000000000000000000000000000000000000000815250610c3c565b6000806103408467ffffffffffffffff16610c82565b915091506103946000836040015167ffffffffffffffff16116040518060400160405280600f81526020017f4e6f2076616c6964206f66666572730000000000000000000000000000000000815250610c3c565b61039e8483610eca565b81602001518561010001819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663346ab17587876040518363ffffffff1660e01b815260040161040b929190612ff3565b600060405180830381600087803b15801561042557600080fd5b505af1158015610439573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104629190613093565b90506364e65a6260e01b81846000015185604001516040516020016104889291906130dc565b604051602081830303815290604052846104a0611125565b6040516024016104b39493929190613134565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935050505092915050565b60055481565b8061056d6105328260000135611167565b6040518060400160405280600b81526020017f496e76616c6964206b6579000000000000000000000000000000000000000000815250610c3c565b600083511115610589576105886105838461119b565b6111ad565b5b60006105b7600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687611378565b90506105c38582611446565b508060200135600181905550600260008154809291906105e2906131bd565b91905055505050505050565b60606106366105fb610b74565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c3c565b61063e6114a2565b905090565b6004818154811061065357600080fd5b906000526020600020906004020160009150905080600001549080600101805461067c90613235565b80601f01602080910402602001604051908101604052809291908181526020018280546106a890613235565b80156106f55780601f106106ca576101008083540402835291602001916106f5565b820191906000526020600020905b8154815290600101906020018083116106d857829003601f168201915b5050505050908060020154908060030154905084565b6060610715610b74565b61071e57600080fd5b60006107286115ed565b90508080602001905181019061073e9190613093565b91505090565b61078b61074f61028b565b156040518060400160405280601381526020017f416c726561647920696e697469616c697a656400000000000000000000000000815250610c3c565b81600181905550806000816fffffffffffffffffffffffffffffffff19169055505050565b7f83481d5b04dea534715acad673a8177a46fc93882760f36bdc16ccac439d504e81600001356fffffffffffffffffffffffffffffffff19168260400160208101906107fc9190613267565b83806060019061080c91906132a3565b60405161081c94939291906133ba565b60405180910390a150565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8061089961085e8260000135611167565b6040518060400160405280600b81526020017f496e76616c6964206b6579000000000000000000000000000000000000000000815250610c3c565b600483908060018154018082558091505060019003906000526020600020906004020160009091909190915081816108d1919061383d565b5050600560008154809291906108e6906131bd565b91905055507fbf51327c63fb3c8741d4233ae0315e3e1a74641532f4e59c307f72314a346235836000013584806020019061092191906134ae565b86604001356040516109369493929190613878565b60405180910390a180602001356001819055506002600081548092919061095c906131bd565b9190505550505050565b60606109ae610973610b74565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c3c565b60003073ffffffffffffffffffffffffffffffffffffffff166392f07a586040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109f857600080fd5b505af1158015610a0c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a359190613093565b9050610a8c6000610a45836116c4565b67ffffffffffffffff1614156040518060400160405280600b81526020017f65677020746f6f206c6f77000000000000000000000000000000000000000000815250610c3c565b6000610a97826117bb565b90506000604051806080016040528060055481526020018681526020018767ffffffffffffffff168152602001836fffffffffffffffffffffffffffffffff1916815250905063ee2cc36460e01b81610aee611125565b604051602401610aff929190613983565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935050505092915050565b6000600480549050905090565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff16604051610ba0906139e4565b600060405180830381855afa9150503d8060008114610bdb576040519150601f19603f3d011682016040523d82523d6000602084013e610be0565b606091505b509150915081610c2d576342010000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610c24929190613a08565b60405180910390fd5b80516020820151935050505090565b81610c7e57806040517f0c25cd98000000000000000000000000000000000000000000000000000000008152600401610c759190613a38565b60405180910390fd5b5050565b610c8a6120ec565b606060005b600480549050811015610ec457600060048281548110610cb257610cb1613a5a565b5b906000526020600020906004020160405180608001604052908160008201548152602001600182018054610ce590613235565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1190613235565b8015610d5e5780601f10610d3357610100808354040283529160200191610d5e565b820191906000526020600020905b815481529060010190602001808311610d4157829003601f168201915b505050505081526020016002820154815260200160038201546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152505090508481604001511015610dca57610dc282846118f190919063ffffffff16565b925050610eb3565b6000610e0f82606001516040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c650000000000000000815250611925565b9050600080610e1d83611a0c565b91509150811580610e38575060008167ffffffffffffffff16145b15610e5757610e5085876118f190919063ffffffff16565b9550610eae565b866040015167ffffffffffffffff168167ffffffffffffffff161115610ead57604051806080016040528085600001518152602001856020015181526020018267ffffffffffffffff1681526020018481525096505b5b505050505b80610ebd906131bd565b9050610c8f565b50915091565b6000600367ffffffffffffffff811115610ee757610ee66122ee565b5b604051908082528060200260200182016040528015610f155781602001602082028036833780820191505090505b509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110610f4f57610f4e613a5a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634210000181600181518110610fa257610fa1613a5a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503081600281518110610ff157610ff0613a5a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600061106e8483846040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c65730000000000000000000000815250611ad2565b90506110b881600001516040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152508560600151611bd8565b61111f81600001516040518060400160405280601e81526020017f64656661756c743a76303a65746842756e646c6553696d526573756c74730000815250856040015160405160200161110b9190613a89565b604051602081830303815290604052611bd8565b50505050565b61112d61211e565b6040518060400160405280611143600254611cbb565b815260200161115f600160025461115a9190613aa4565b611cd5565b815250905090565b60006001548260405160200161117d9190613b09565b60405160208183030381529060405280519060200120149050919050565b60606111a682611d0d565b9050919050565b6000815190505b6000811115611374576000826001836111cd9190613b24565b815181106111de576111dd613a5a565b5b602002602001015190506000600482815481106111fe576111fd613a5a565b5b906000526020600020906004020160000154905060016004805490506112249190613b24565b8210156112d7576004600160048054905061123f9190613b24565b815481106112505761124f613a5a565b5b90600052602060002090600402016004838154811061127257611271613a5a565b5b906000526020600020906004020160008201548160000155600182018160010190805461129e90613235565b6112a992919061213e565b5060028201548160020155600382015481600301906fffffffffffffffffffffffffffffffff191690559050505b60048054806112e9576112e8613b58565b5b600190038181906000526020600020906004020160008082016000905560018201600061131691906121cb565b60028201600090556003820160009055505090557f5fa4d8243d9549d33d615899224efcef51bfcacb970a31f68862ce74c858dbf081604051611359919061288f565b60405180910390a150508061136d90613b87565b90506111b4565b5050565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516113a29190613be2565b6000604051808303816000865af19150503d80600081146113df576040519150601f19603f3d011682016040523d82523d6000602084013e6113e4565b606091505b5091509150611428826040518060400160405280601481526020017f45787465726e616c2063616c6c206661696c6564000000000000000000000000815250610c3c565b8080602001905181019061143c9190613c69565b9250505092915050565b6000808380602001905181019061145d9190613cdc565b915091507f91badfc611f9ad79e4d6a58176e5c4cedc4f8ed9001447825f503e792bbf09e282828560405161149493929190613d1c565b60405180910390a150505050565b60606114ea6114af610b74565b6040518060400160405280601081526020017f4e6f7420636f6e666964656e7469616c00000000000000000000000000000000815250610c3c565b6115316114f561028b565b156040518060400160405280601381526020017f416c726561647920696e697469616c697a656400000000000000000000000000815250610c3c565b600061153b6115ed565b9050600061154882611dd8565b9050600061156b838060200190518101906115639190613d6f565b600254611fb4565b905063bb7bae0a60e01b8183604051602401611588929190613d9c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050935050505090565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff1660405160200160405160208183030381529060405260405161162f9190613be2565b600060405180830381855afa9150503d806000811461166a576040519150601f19603f3d011682016040523d82523d6000602084013e61166f565b606091505b5091509150816116bc576342010001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016116b3929190613a08565b60405180910390fd5b809250505090565b6000806000634210000073ffffffffffffffffffffffffffffffffffffffff16846040516020016116f59190612854565b6040516020818303038152906040526040516117119190613be2565b600060405180830381855afa9150503d806000811461174c576040519150601f19603f3d011682016040523d82523d6000602084013e611751565b606091505b50915091508161179e576342100000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611795929190613a08565b60405180910390fd5b808060200190518101906117b29190613dc5565b92505050919050565b600080600167ffffffffffffffff8111156117d9576117d86122ee565b5b6040519080825280602002602001820160405280156118075781602001602082028036833780820191505090505b509050308160008151811061181f5761181e613a5a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600061189d600083846040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c650000000000000000815250611ad2565b90506118e381600001516040518060400160405280601881526020017f626c6f636b61643a76303a7061796d656e7442756e646c65000000000000000081525086611bd8565b806000015192505050919050565b6060826118fd83611fee565b60405160200161190e929190613df2565b604051602081830303815290604052905092915050565b6060600080634202000173ffffffffffffffffffffffffffffffffffffffff168585604051602001611958929190613e16565b6040516020818303038152906040526040516119749190613be2565b600060405180830381855afa9150503d80600081146119af576040519150601f19603f3d011682016040523d82523d6000602084013e6119b4565b606091505b509150915081611a01576342020001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016119f8929190613a08565b60405180910390fd5b809250505092915050565b600080600080634210000073ffffffffffffffffffffffffffffffffffffffff16614e2086604051602001611a419190612854565b604051602081830303815290604052604051611a5d9190613be2565b6000604051808303818686fa925050503d8060008114611a99576040519150601f19603f3d011682016040523d82523d6000602084013e611a9e565b606091505b50915091508115611aca57600181806020019051810190611abf9190613dc5565b935093505050611acd565b50505b915091565b611ada61220b565b600080634203000073ffffffffffffffffffffffffffffffffffffffff1687878787604051602001611b0f9493929190613ecc565b604051602081830303815290604052604051611b2b9190613be2565b600060405180830381855afa9150503d8060008114611b66576040519150601f19603f3d011682016040523d82523d6000602084013e611b6b565b606091505b509150915081611bb8576342030000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611baf929190613a08565b60405180910390fd5b80806020019051810190611bcc9190614107565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001611c0b93929190614150565b604051602081830303815290604052604051611c279190613be2565b600060405180830381855afa9150503d8060008114611c62576040519150601f19603f3d011682016040523d82523d6000602084013e611c67565b606091505b509150915081611cb4576342020000816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611cab929190613a08565b60405180910390fd5b5050505050565b6000611cce611cc861204b565b836120ab565b9050919050565b6000611ce082611cbb565b604051602001611cf09190613b09565b604051602081830303815290604052805190602001209050919050565b606060208251611d1d91906141c4565b67ffffffffffffffff811115611d3657611d356122ee565b5b604051908082528060200260200182016040528015611d645781602001602082028036833780820191505090505b50905060005b60208351611d7891906141c4565b811015611dd257611da08360208084611d9191906141f5565b611d9b9190613aa4565b6120de565b828281518110611db357611db2613a5a565b5b6020026020010181815250508080611dca906131bd565b915050611d6a565b50919050565b600080600367ffffffffffffffff811115611df657611df56122ee565b5b604051908082528060200260200182016040528015611e245781602001602082028036833780820191505090505b5090503081600081518110611e3c57611e3b613a5a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634203000181600181518110611e8f57611e8e613a5a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634202000181600281518110611ee257611ee1613a5a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000611f60600083846040518060400160405280601181526020017f626c6f636b61643a76303a736563726574000000000000000000000000000000815250611ad2565b9050611fa681600001516040518060400160405280601181526020017f626c6f636b61643a76303a73656372657400000000000000000000000000000081525086611bd8565b806000015192505050919050565b6000611fc083836120ab565b604051602001611fd09190613b09565b60405160208183030381529060405280519060200120905092915050565b6060602067ffffffffffffffff81111561200b5761200a6122ee565b5b6040519080825280601f01601f19166020018201604052801561203d5781602001600182028036833780820191505090505b509050816020820152919050565b60008061208f6000546040518060400160405280601181526020017f626c6f636b61643a76303a736563726574000000000000000000000000000000815250611925565b9050808060200190518101906120a59190613d6f565b91505090565b600082826040516020016120c092919061424f565b60405160208183030381529060405280519060200120905092915050565b600081830151905092915050565b60405180608001604052806000815260200160608152602001600067ffffffffffffffff168152602001606081525090565b604051806040016040528060008019168152602001600080191681525090565b82805461214a90613235565b90600052602060002090601f01602090048101928261216c57600085556121ba565b82601f1061217d57805485556121ba565b828001600101855582156121ba57600052602060002091601f016020900482015b828111156121b957825482559160010191906001019061219e565b5b5090506121c79190612271565b5090565b5080546121d790613235565b6000825580601f106121e95750612208565b601f0160209004906000526020600020908101906122079190612271565b5b50565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b5b8082111561228a576000816000905550600101612272565b5090565b60008115159050919050565b6122a38161228e565b82525050565b60006020820190506122be600083018461229a565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612326826122dd565b810181811067ffffffffffffffff82111715612345576123446122ee565b5b80604052505050565b60006123586122c4565b9050612364828261231d565b919050565b600080fd5b600067ffffffffffffffff82169050919050565b61238b8161236e565b811461239657600080fd5b50565b6000813590506123a881612382565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156123d3576123d26122ee565b5b6123dc826122dd565b9050602081019050919050565b82818337600083830152505050565b600061240b612406846123b8565b61234e565b905082815260208101848484011115612427576124266123b3565b5b6124328482856123e9565b509392505050565b600082601f83011261244f5761244e6123ae565b5b813561245f8482602086016123f8565b91505092915050565b6000819050919050565b61247b81612468565b811461248657600080fd5b50565b60008135905061249881612472565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124c98261249e565b9050919050565b6124d9816124be565b81146124e457600080fd5b50565b6000813590506124f6816124d0565b92915050565b600067ffffffffffffffff821115612517576125166122ee565b5b602082029050602081019050919050565b600080fd5b600060808284031215612543576125426122d8565b5b61254d608061234e565b9050600061255d84828501612399565b600083015250602061257184828501612399565b6020830152506040612585848285016124e7565b604083015250606061259984828501612399565b60608301525092915050565b60006125b86125b3846124fc565b61234e565b905080838252602082019050608084028301858111156125db576125da612528565b5b835b8181101561260457806125f0888261252d565b8452602084019350506080810190506125dd565b5050509392505050565b600082601f830112612623576126226123ae565b5b81356126338482602086016125a5565b91505092915050565b60006101208284031215612653576126526122d8565b5b61265e61012061234e565b9050600061266e84828501612399565b600083015250602082013567ffffffffffffffff81111561269257612691612369565b5b61269e8482850161243a565b60208301525060406126b284828501612489565b60408301525060606126c684828501612399565b60608301525060806126da848285016124e7565b60808301525060a06126ee84828501612399565b60a08301525060c061270284828501612489565b60c08301525060e082013567ffffffffffffffff81111561272657612725612369565b5b6127328482850161260e565b60e08301525061010082013567ffffffffffffffff81111561275757612756612369565b5b6127638482850161243a565b6101008301525092915050565b60008060408385031215612787576127866122ce565b5b600083013567ffffffffffffffff8111156127a5576127a46122d3565b5b6127b18582860161263c565b92505060206127c285828601612399565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156128065780820151818401526020810190506127eb565b83811115612815576000848401525b50505050565b6000612826826127cc565b61283081856127d7565b93506128408185602086016127e8565b612849816122dd565b840191505092915050565b6000602082019050818103600083015261286e818461281b565b905092915050565b6000819050919050565b61288981612876565b82525050565b60006020820190506128a46000830184612880565b92915050565b600080fd5b6000604082840312156128c5576128c46128aa565b5b81905092915050565b60008060008060a085870312156128e8576128e76122ce565b5b600085013567ffffffffffffffff811115612906576129056122d3565b5b6129128782880161243a565b945050602085013567ffffffffffffffff811115612933576129326122d3565b5b61293f8782880161243a565b935050604085013567ffffffffffffffff8111156129605761295f6122d3565b5b61296c8782880161243a565b925050606061297d878288016128af565b91505092959194509250565b61299281612876565b811461299d57600080fd5b50565b6000813590506129af81612989565b92915050565b6000602082840312156129cb576129ca6122ce565b5b60006129d9848285016129a0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000612a09826129e2565b612a1381856129ed565b9350612a238185602086016127e8565b612a2c816122dd565b840191505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000612a6e82612a37565b9050919050565b612a7e81612a63565b82525050565b6000608082019050612a996000830187612880565b8181036020830152612aab81866129fe565b9050612aba6040830185612880565b612ac76060830184612a75565b95945050505050565b612ad981612a37565b8114612ae457600080fd5b50565b600081359050612af681612ad0565b92915050565b60008060408385031215612b1357612b126122ce565b5b6000612b2185828601612489565b9250506020612b3285828601612ae7565b9150509250929050565b600060c08284031215612b5257612b516128aa565b5b81905092915050565b600060208284031215612b7157612b706122ce565b5b600082013567ffffffffffffffff811115612b8f57612b8e6122d3565b5b612b9b84828501612b3c565b91505092915050565b6000819050919050565b6000612bc9612bc4612bbf8461249e565b612ba4565b61249e565b9050919050565b6000612bdb82612bae565b9050919050565b6000612bed82612bd0565b9050919050565b612bfd81612be2565b82525050565b6000602082019050612c186000830184612bf4565b92915050565b600060808284031215612c3457612c336128aa565b5b81905092915050565b60008060608385031215612c5457612c536122ce565b5b600083013567ffffffffffffffff811115612c7257612c716122d3565b5b612c7e85828601612c1e565b9250506020612c8f858286016128af565b9150509250929050565b600067ffffffffffffffff821115612cb457612cb36122ee565b5b612cbd826122dd565b9050602081019050919050565b6000612cdd612cd884612c99565b61234e565b905082815260208101848484011115612cf957612cf86123b3565b5b612d048482856123e9565b509392505050565b600082601f830112612d2157612d206123ae565b5b8135612d31848260208601612cca565b91505092915050565b60008060408385031215612d5157612d506122ce565b5b6000612d5f85828601612399565b925050602083013567ffffffffffffffff811115612d8057612d7f6122d3565b5b612d8c85828601612d0c565b9150509250929050565b612d9f8161236e565b82525050565b600082825260208201905092915050565b6000612dc1826127cc565b612dcb8185612da5565b9350612ddb8185602086016127e8565b612de4816122dd565b840191505092915050565b612df881612468565b82525050565b612e07816124be565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b608082016000820151612e4f6000850182612d96565b506020820151612e626020850182612d96565b506040820151612e756040850182612dfe565b506060820151612e886060850182612d96565b50505050565b6000612e9a8383612e39565b60808301905092915050565b6000602082019050919050565b6000612ebe82612e0d565b612ec88185612e18565b9350612ed383612e29565b8060005b83811015612f04578151612eeb8882612e8e565b9750612ef683612ea6565b925050600181019050612ed7565b5085935050505092915050565b600061012083016000830151612f2a6000860182612d96565b5060208301518482036020860152612f428282612db6565b9150506040830151612f576040860182612def565b506060830151612f6a6060860182612d96565b506080830151612f7d6080860182612dfe565b5060a0830151612f9060a0860182612d96565b5060c0830151612fa360c0860182612def565b5060e083015184820360e0860152612fbb8282612eb3565b915050610100830151848203610100860152612fd78282612db6565b9150508091505092915050565b612fed8161236e565b82525050565b6000604082019050818103600083015261300d8185612f11565b905061301c6020830184612fe4565b9392505050565b6000613036613031846123b8565b61234e565b905082815260208101848484011115613052576130516123b3565b5b61305d8482856127e8565b509392505050565b600082601f83011261307a576130796123ae565b5b815161308a848260208601613023565b91505092915050565b6000602082840312156130a9576130a86122ce565b5b600082015167ffffffffffffffff8111156130c7576130c66122d3565b5b6130d384828501613065565b91505092915050565b60006040820190506130f16000830185612880565b6130fe6020830184612fe4565b9392505050565b60408201600082015161311b6000850182612def565b50602082015161312e6020850182612def565b50505050565b600060a082019050818103600083015261314e818761281b565b90508181036020830152613162818661281b565b90508181036040830152613176818561281b565b90506131856060830184613105565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131c882612876565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156131fb576131fa61318e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061324d57607f821691505b6020821081141561326157613260613206565b5b50919050565b60006020828403121561327d5761327c6122ce565b5b600061328b84828501612399565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126132c0576132bf613294565b5b80840192508235915067ffffffffffffffff8211156132e2576132e1613299565b5b6020830192506020820236038313156132fe576132fd61329e565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b600061332d8383612dfe565b60208301905092915050565b600061334860208401846124e7565b905092915050565b6000602082019050919050565b60006133698385613306565b935061337482613317565b8060005b858110156133ad5761338a8284613339565b6133948882613321565b975061339f83613350565b925050600181019050613378565b5085925050509392505050565b60006060820190506133cf6000830187612a75565b6133dc6020830186612fe4565b81810360408301526133ef81848661335d565b905095945050505050565b6000813561340781612989565b80915050919050565b60008160001b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61344984613410565b9350801983169250808416831791505092915050565b600061347a61347561347084612876565b612ba4565b612876565b9050919050565b6000819050919050565b6134948261345f565b6134a76134a082613481565b835461341d565b8255505050565b600080833560016020038436030381126134cb576134ca613294565b5b80840192508235915067ffffffffffffffff8211156134ed576134ec613299565b5b6020830192506001820236038313156135095761350861329e565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261357e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613541565b6135888683613541565b95508019841693508086168417925050509392505050565b6135a98361345f565b6135bd6135b582613481565b84845461354e565b825550505050565b600090565b6135d26135c5565b6135dd8184846135a0565b505050565b5b81811015613601576135f66000826135ca565b6001810190506135e3565b5050565b601f821115613646576136178161351c565b61362084613531565b8101602085101561362f578190505b61364361363b85613531565b8301826135e2565b50505b505050565b600082821c905092915050565b60006136696000198460080261364b565b1980831691505092915050565b60006136828383613658565b9150826002028217905092915050565b61369c8383613511565b67ffffffffffffffff8111156136b5576136b46122ee565b5b6136bf8254613235565b6136ca828285613605565b6000601f8311600181146136f957600084156136e7578287013590505b6136f18582613676565b865550613759565b601f1984166137078661351c565b60005b8281101561372f5784890135825560018201915060208501945060208101905061370a565b8683101561374c5784890135613748601f891682613658565b8355505b6001600288020188555050505b50505050505050565b61376d838383613692565b505050565b6000813561377f81612ad0565b80915050919050565b6000819050919050565b61379b82612a63565b6137ae6137a782613788565b835461341d565b8255505050565b6000810160008301806137c7816133fa565b90506137d3818461348b565b50505060018101602083016137e881856134ae565b6137f3818386613762565b50505050600281016040830180613809816133fa565b9050613815818461348b565b50505060038101606083018061382a81613772565b90506138368184613792565b5050505050565b61384782826137b5565b5050565b600061385783856129ed565b93506138648385846123e9565b61386d836122dd565b840190509392505050565b600060608201905061388d6000830187612880565b81810360208301526138a081858761384b565b90506138af6040830184612880565b95945050505050565b6138c181612876565b82525050565b600082825260208201905092915050565b60006138e3826129e2565b6138ed81856138c7565b93506138fd8185602086016127e8565b613906816122dd565b840191505092915050565b61391a81612a63565b82525050565b600060808301600083015161393860008601826138b8565b506020830151848203602086015261395082826138d8565b915050604083015161396560408601826138b8565b5060608301516139786060860182613911565b508091505092915050565b6000606082019050818103600083015261399d8185613920565b90506139ac6020830184613105565b9392505050565b600081905092915050565b50565b60006139ce6000836139b3565b91506139d9826139be565b600082019050919050565b60006139ef826139c1565b9150819050919050565b613a02816124be565b82525050565b6000604082019050613a1d60008301856139f9565b8181036020830152613a2f818461281b565b90509392505050565b60006020820190508181036000830152613a5281846129fe565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082019050613a9e6000830184612fe4565b92915050565b6000613aaf82612876565b9150613aba83612876565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613aef57613aee61318e565b5b828201905092915050565b613b0381612468565b82525050565b6000602082019050613b1e6000830184613afa565b92915050565b6000613b2f82612876565b9150613b3a83612876565b925082821015613b4d57613b4c61318e565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613b9282612876565b91506000821415613ba657613ba561318e565b5b600182039050919050565b6000613bbc826127cc565b613bc681856139b3565b9350613bd68185602086016127e8565b80840191505092915050565b6000613bee8284613bb1565b915081905092915050565b6000613c0c613c0784612c99565b61234e565b905082815260208101848484011115613c2857613c276123b3565b5b613c338482856127e8565b509392505050565b600082601f830112613c5057613c4f6123ae565b5b8151613c60848260208601613bf9565b91505092915050565b600060208284031215613c7f57613c7e6122ce565b5b600082015167ffffffffffffffff811115613c9d57613c9c6122d3565b5b613ca984828501613c3b565b91505092915050565b600081519050613cc181612989565b92915050565b600081519050613cd681612382565b92915050565b60008060408385031215613cf357613cf26122ce565b5b6000613d0185828601613cb2565b9250506020613d1285828601613cc7565b9150509250929050565b6000606082019050613d316000830186612880565b613d3e6020830185612fe4565b8181036040830152613d5081846129fe565b9050949350505050565b600081519050613d6981612472565b92915050565b600060208284031215613d8557613d846122ce565b5b6000613d9384828501613d5a565b91505092915050565b6000604082019050613db16000830185613afa565b613dbe6020830184612a75565b9392505050565b600060208284031215613ddb57613dda6122ce565b5b6000613de984828501613cc7565b91505092915050565b6000613dfe8285613bb1565b9150613e0a8284613bb1565b91508190509392505050565b6000604082019050613e2b6000830185612a75565b8181036020830152613e3d81846129fe565b90509392505050565b600081519050919050565b6000819050602082019050919050565b6000602082019050919050565b6000613e7982613e46565b613e838185613306565b9350613e8e83613e51565b8060005b83811015613ebf578151613ea68882613321565b9750613eb183613e61565b925050600181019050613e92565b5085935050505092915050565b6000608082019050613ee16000830187612fe4565b8181036020830152613ef38186613e6e565b90508181036040830152613f078185613e6e565b90508181036060830152613f1b81846129fe565b905095945050505050565b600081519050613f3581612ad0565b92915050565b600067ffffffffffffffff821115613f5657613f556122ee565b5b602082029050602081019050919050565b600081519050613f76816124d0565b92915050565b6000613f8f613f8a84613f3b565b61234e565b90508083825260208201905060208402830185811115613fb257613fb1612528565b5b835b81811015613fdb5780613fc78882613f67565b845260208401935050602081019050613fb4565b5050509392505050565b600082601f830112613ffa57613ff96123ae565b5b815161400a848260208601613f7c565b91505092915050565b600060c08284031215614029576140286122d8565b5b61403360c061234e565b9050600061404384828501613f26565b600083015250602061405784828501613f26565b602083015250604061406b84828501613cc7565b604083015250606082015167ffffffffffffffff81111561408f5761408e612369565b5b61409b84828501613fe5565b606083015250608082015167ffffffffffffffff8111156140bf576140be612369565b5b6140cb84828501613fe5565b60808301525060a082015167ffffffffffffffff8111156140ef576140ee612369565b5b6140fb84828501613c3b565b60a08301525092915050565b60006020828403121561411d5761411c6122ce565b5b600082015167ffffffffffffffff81111561413b5761413a6122d3565b5b61414784828501614013565b91505092915050565b60006060820190506141656000830186612a75565b818103602083015261417781856129fe565b9050818103604083015261418b818461281b565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006141cf82612876565b91506141da83612876565b9250826141ea576141e9614195565b5b828204905092915050565b600061420082612876565b915061420b83612876565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156142445761424361318e565b5b828202905092915050565b60006040820190506142646000830185613afa565b6142716020830184612880565b939250505056fea2646970667358221220ac913f6142a02fac4dc6530a9626a04768e11731f9a8dd8c6cdbac4125ab33d264736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 975,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "secretBidId",
        "offset": 0,
        "slot": "0",
        "type": "t_userDefinedValueType(BidId)1463"
      },
      {
        "astId": 977,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "presentHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 979,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 68,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "builder",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Builder)934"
      },
      {
        "astId": 72,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "requests",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(AdRequest)27_storage)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
        "label": "nextId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_struct(AdRequest)27_storage)dyn_storage": {
        "base": "t_struct(AdRequest)27_storage",
        "encoding": "dynamic_array",
        "label": "struct BlockAdAuctionV2.AdRequest[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Builder)934": {
        "encoding": "inplace",
        "label": "contract Builder",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AdRequest)27_storage": {
        "encoding": "inplace",
        "label": "struct BlockAdAuctionV2.AdRequest",
        "members": [
          {
            "astId": 19,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "extra",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 23,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "blockLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 26,
            "contract": "contracts/blockad/BlockAdV2.sol:BlockAdAuctionV2",
            "label": "paymentBidId",
            "offset": 0,
            "slot": "3",
            "type": "t_userDefinedValueType(BidId)1463"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(BidId)1463": {
        "encoding": "inplace",
        "label": "Suave.BidId",
        "numberOfBytes": "32"
      }
    }
  }
}