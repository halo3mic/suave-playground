{
  "address": "0xaA7A86B84384e204Faa54F26e6C5BEFEd1C3F193",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "boostRelayUrl_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "PeekerReverted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.DataId",
          "name": "dataId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "builderBid",
          "type": "bytes"
        }
      ],
      "name": "BuilderBoostBidEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "Suave.DataId",
          "name": "dataId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "decryptionCondition",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "allowedPeekers",
          "type": "address[]"
        }
      ],
      "name": "DataRecordEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "extra",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parentBeaconBlockRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "fillPending",
              "type": "bool"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        },
        {
          "internalType": "Suave.DataId[]",
          "name": "dataRecords",
          "type": "bytes16[]"
        },
        {
          "internalType": "string",
          "name": "namespace",
          "type": "string"
        }
      ],
      "name": "buildAndEmit",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "extra",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parentBeaconBlockRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "fillPending",
              "type": "bool"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        }
      ],
      "name": "buildFromPool",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "extra",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parentBeaconBlockRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "fillPending",
              "type": "bool"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        }
      ],
      "name": "buildMevShare",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "proposerPubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "random",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "index",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "validator",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "Address",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "amount",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Suave.Withdrawal[]",
              "name": "withdrawals",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "extra",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parentBeaconBlockRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "fillPending",
              "type": "bool"
            }
          ],
          "internalType": "struct Suave.BuildBlockArgs",
          "name": "blockArgs",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "blockHeight",
          "type": "uint64"
        },
        {
          "internalType": "Suave.DataId[]",
          "name": "records",
          "type": "bytes16[]"
        },
        {
          "internalType": "string",
          "name": "namespace",
          "type": "string"
        }
      ],
      "name": "doBuild",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Suave.DataId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.DataId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.DataRecord",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.DataId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.DataId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.DataRecord",
          "name": "dataRecord",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "builderBid",
          "type": "bytes"
        }
      ],
      "name": "emitBuilderBidAndBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Suave.DataId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.DataId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.DataRecord",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Suave.DataId",
              "name": "id",
              "type": "bytes16"
            },
            {
              "internalType": "Suave.DataId",
              "name": "salt",
              "type": "bytes16"
            },
            {
              "internalType": "uint64",
              "name": "decryptionCondition",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "allowedPeekers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "allowedStores",
              "type": "address[]"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Suave.DataRecord",
          "name": "dataRecord",
          "type": "tuple"
        }
      ],
      "name": "emitDataRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchConfidentialBundleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Suave.DataId",
          "name": "_l",
          "type": "bytes16"
        },
        {
          "internalType": "Suave.DataId",
          "name": "_r",
          "type": "bytes16"
        }
      ],
      "name": "idsEqual",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Suave.DataId",
          "name": "dataId",
          "type": "bytes16"
        },
        {
          "internalType": "bytes",
          "name": "signedBlindedHeader",
          "type": "bytes"
        }
      ],
      "name": "unlock",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf909157e9754abe7c2230dd8fda0fecf19f5e935de0a68df25ec2bb0e636b2a9",
  "receipt": {
    "to": null,
    "from": "0x16f2Aa8dF055b6e672b93Ded41FecCCabAB565B0",
    "contractAddress": "0xaA7A86B84384e204Faa54F26e6C5BEFEd1C3F193",
    "transactionIndex": 0,
    "gasUsed": "3476989",
    "logsBloom": "0x
    "blockHash": "0xbffac9c6b634c05843df21dd80f7cfb4b0731715a83a2b3dc63ff47a474cb3ad",
    "transactionHash": "0xf909157e9754abe7c2230dd8fda0fecf19f5e935de0a68df25ec2bb0e636b2a9",
    "logs": [],
    "blockNumber": 3253326,
    "cumulativeGasUsed": "3476989",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://0xafa4c6985aa049fb79dd37010438cfebeb0f2bd42b115b89dd678dab0670c1de38da0c4e9138c9290a398ecd9a0b3110@boost-relay-holesky.flashbots.net"
  ],
  "numDeployments": 1,
  "solcInputHash": "a1b1af2d2035bafa057f1c83964300c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"boostRelayUrl_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"PeekerReverted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.DataId\",\"name\":\"dataId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"builderBid\",\"type\":\"bytes\"}],\"name\":\"BuilderBoostBidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Suave.DataId\",\"name\":\"dataId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"}],\"name\":\"DataRecordEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extra\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentBeaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"fillPending\",\"type\":\"bool\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"Suave.DataId[]\",\"name\":\"dataRecords\",\"type\":\"bytes16[]\"},{\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"}],\"name\":\"buildAndEmit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extra\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentBeaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"fillPending\",\"type\":\"bool\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"buildFromPool\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extra\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentBeaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"fillPending\",\"type\":\"bool\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"buildMevShare\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proposerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"random\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validator\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Suave.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extra\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentBeaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"fillPending\",\"type\":\"bool\"}],\"internalType\":\"struct Suave.BuildBlockArgs\",\"name\":\"blockArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"Suave.DataId[]\",\"name\":\"records\",\"type\":\"bytes16[]\"},{\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"}],\"name\":\"doBuild\",\"outputs\":[{\"components\":[{\"internalType\":\"Suave.DataId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.DataId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.DataRecord\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.DataId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.DataId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.DataRecord\",\"name\":\"dataRecord\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"builderBid\",\"type\":\"bytes\"}],\"name\":\"emitBuilderBidAndBid\",\"outputs\":[{\"components\":[{\"internalType\":\"Suave.DataId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.DataId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.DataRecord\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Suave.DataId\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.DataId\",\"name\":\"salt\",\"type\":\"bytes16\"},{\"internalType\":\"uint64\",\"name\":\"decryptionCondition\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"allowedPeekers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedStores\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Suave.DataRecord\",\"name\":\"dataRecord\",\"type\":\"tuple\"}],\"name\":\"emitDataRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchConfidentialBundleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Suave.DataId\",\"name\":\"_l\",\"type\":\"bytes16\"},{\"internalType\":\"Suave.DataId\",\"name\":\"_r\",\"type\":\"bytes16\"}],\"name\":\"idsEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Suave.DataId\",\"name\":\"dataId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes\",\"name\":\"signedBlindedHeader\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/standard_peekers/bids.sol\":\"EthBlockBidSenderContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Suave.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.8;\\n\\nlibrary Suave {\\n    error PeekerReverted(address, bytes);\\n\\n    enum CryptoSignature {\\n        SECP256,\\n        BLS\\n    }\\n\\n    type DataId is bytes16;\\n\\n    struct BuildBlockArgs {\\n        uint64 slot;\\n        bytes proposerPubkey;\\n        bytes32 parent;\\n        uint64 timestamp;\\n        address feeRecipient;\\n        uint64 gasLimit;\\n        bytes32 random;\\n        Withdrawal[] withdrawals;\\n        bytes extra;\\n        bytes32 parentBeaconBlockRoot;\\n        bool fillPending;\\n    }\\n\\n    struct DataRecord {\\n        DataId id;\\n        DataId salt;\\n        uint64 decryptionCondition;\\n        address[] allowedPeekers;\\n        address[] allowedStores;\\n        string version;\\n    }\\n\\n    struct HttpRequest {\\n        string url;\\n        string method;\\n        string[] headers;\\n        bytes body;\\n        bool withFlashbotsSignature;\\n    }\\n\\n    struct SimulateTransactionResult {\\n        uint64 egp;\\n        SimulatedLog[] logs;\\n        bool success;\\n        string error;\\n    }\\n\\n    struct SimulatedLog {\\n        bytes data;\\n        address addr;\\n        bytes32[] topics;\\n    }\\n\\n    struct Withdrawal {\\n        uint64 index;\\n        uint64 validator;\\n        address Address;\\n        uint64 amount;\\n    }\\n\\n    address public constant ANYALLOWED = 0xC8df3686b4Afb2BB53e60EAe97EF043FE03Fb829;\\n\\n    address public constant IS_CONFIDENTIAL_ADDR = 0x0000000000000000000000000000000042010000;\\n\\n    address public constant BUILD_ETH_BLOCK = 0x0000000000000000000000000000000042100001;\\n\\n    address public constant CONFIDENTIAL_INPUTS = 0x0000000000000000000000000000000042010001;\\n\\n    address public constant CONFIDENTIAL_RETRIEVE = 0x0000000000000000000000000000000042020001;\\n\\n    address public constant CONFIDENTIAL_STORE = 0x0000000000000000000000000000000042020000;\\n\\n    address public constant DO_HTTPREQUEST = 0x0000000000000000000000000000000043200002;\\n\\n    address public constant ETHstaticcall = 0x0000000000000000000000000000000042100003;\\n\\n    address public constant EXTRACT_HINT = 0x0000000000000000000000000000000042100037;\\n\\n    address public constant FETCH_DATA_RECORDS = 0x0000000000000000000000000000000042030001;\\n\\n    address public constant FILL_MEV_SHARE_BUNDLE = 0x0000000000000000000000000000000043200001;\\n\\n    address public constant NEW_BUILDER = 0x0000000000000000000000000000000053200001;\\n\\n    address public constant NEW_DATA_RECORD = 0x0000000000000000000000000000000042030000;\\n\\n    address public constant PRIVATE_KEY_GEN = 0x0000000000000000000000000000000053200003;\\n\\n    address public constant SIGN_ETH_TRANSACTION = 0x0000000000000000000000000000000040100001;\\n\\n    address public constant SIGN_MESSAGE = 0x0000000000000000000000000000000040100003;\\n\\n    address public constant SIMULATE_BUNDLE = 0x0000000000000000000000000000000042100000;\\n\\n    address public constant SIMULATE_TRANSACTION = 0x0000000000000000000000000000000053200002;\\n\\n    address public constant SUBMIT_BUNDLE_JSON_RPC = 0x0000000000000000000000000000000043000001;\\n\\n    address public constant SUBMIT_ETH_BLOCK_TO_RELAY = 0x0000000000000000000000000000000042100002;\\n\\n    // Returns whether execution is off- or on-chain\\n    function isConfidential() internal view returns (bool b) {\\n        (bool success, bytes memory isConfidentialBytes) = IS_CONFIDENTIAL_ADDR.staticcall(\\\"\\\");\\n        if (!success) {\\n            revert PeekerReverted(IS_CONFIDENTIAL_ADDR, isConfidentialBytes);\\n        }\\n        assembly {\\n            // Load the length of data (first 32 bytes)\\n            let len := mload(isConfidentialBytes)\\n            // Load the data after 32 bytes, so add 0x20\\n            b := mload(add(isConfidentialBytes, 0x20))\\n        }\\n    }\\n\\n    function buildEthBlock(BuildBlockArgs memory blockArgs, DataId dataId, string memory namespace)\\n        internal\\n        view\\n        returns (bytes memory, bytes memory)\\n    {\\n        (bool success, bytes memory data) = BUILD_ETH_BLOCK.staticcall(abi.encode(blockArgs, dataId, namespace));\\n        if (!success) {\\n            revert PeekerReverted(BUILD_ETH_BLOCK, data);\\n        }\\n\\n        return abi.decode(data, (bytes, bytes));\\n    }\\n\\n    function confidentialInputs() internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_INPUTS.staticcall(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_INPUTS, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialRetrieve(DataId dataId, string memory key) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = CONFIDENTIAL_RETRIEVE.staticcall(abi.encode(dataId, key));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_RETRIEVE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function confidentialStore(DataId dataId, string memory key, bytes memory value) internal view {\\n        (bool success, bytes memory data) = CONFIDENTIAL_STORE.staticcall(abi.encode(dataId, key, value));\\n        if (!success) {\\n            revert PeekerReverted(CONFIDENTIAL_STORE, data);\\n        }\\n    }\\n\\n    function doHTTPRequest(HttpRequest memory request) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = DO_HTTPREQUEST.staticcall(abi.encode(request));\\n        if (!success) {\\n            revert PeekerReverted(DO_HTTPREQUEST, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function ethstaticcall(address contractAddr, bytes memory input1) internal view returns (bytes memory) {\\n        (bool success, bytes memory data) = ETHstaticcall.staticcall(abi.encode(contractAddr, input1));\\n        if (!success) {\\n            revert PeekerReverted(ETHstaticcall, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function extractHint(bytes memory bundleData) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = EXTRACT_HINT.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(EXTRACT_HINT, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function fetchDataRecords(uint64 cond, string memory namespace) internal view returns (DataRecord[] memory) {\\n        (bool success, bytes memory data) = FETCH_DATA_RECORDS.staticcall(abi.encode(cond, namespace));\\n        if (!success) {\\n            revert PeekerReverted(FETCH_DATA_RECORDS, data);\\n        }\\n\\n        return abi.decode(data, (DataRecord[]));\\n    }\\n\\n    function fillMevShareBundle(DataId dataId) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = FILL_MEV_SHARE_BUNDLE.staticcall(abi.encode(dataId));\\n        if (!success) {\\n            revert PeekerReverted(FILL_MEV_SHARE_BUNDLE, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function newBuilder() internal view returns (string memory) {\\n        (bool success, bytes memory data) = NEW_BUILDER.staticcall(abi.encode());\\n        if (!success) {\\n            revert PeekerReverted(NEW_BUILDER, data);\\n        }\\n\\n        return abi.decode(data, (string));\\n    }\\n\\n    function newDataRecord(\\n        uint64 decryptionCondition,\\n        address[] memory allowedPeekers,\\n        address[] memory allowedStores,\\n        string memory dataType\\n    ) internal view returns (DataRecord memory) {\\n        (bool success, bytes memory data) =\\n            NEW_DATA_RECORD.staticcall(abi.encode(decryptionCondition, allowedPeekers, allowedStores, dataType));\\n        if (!success) {\\n            revert PeekerReverted(NEW_DATA_RECORD, data);\\n        }\\n\\n        return abi.decode(data, (DataRecord));\\n    }\\n\\n    function privateKeyGen(CryptoSignature crypto) internal view returns (string memory) {\\n        (bool success, bytes memory data) = PRIVATE_KEY_GEN.staticcall(abi.encode(crypto));\\n        if (!success) {\\n            revert PeekerReverted(PRIVATE_KEY_GEN, data);\\n        }\\n\\n        return abi.decode(data, (string));\\n    }\\n\\n    function signEthTransaction(bytes memory txn, string memory chainId, string memory signingKey)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory data) = SIGN_ETH_TRANSACTION.staticcall(abi.encode(txn, chainId, signingKey));\\n        if (!success) {\\n            revert PeekerReverted(SIGN_ETH_TRANSACTION, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function signMessage(bytes memory digest, CryptoSignature crypto, string memory signingKey)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SIGN_MESSAGE.staticcall(abi.encode(digest, crypto, signingKey));\\n        if (!success) {\\n            revert PeekerReverted(SIGN_MESSAGE, data);\\n        }\\n\\n        return abi.decode(data, (bytes));\\n    }\\n\\n    function simulateBundle(bytes memory bundleData) internal view returns (uint64) {\\n        (bool success, bytes memory data) = SIMULATE_BUNDLE.staticcall(abi.encode(bundleData));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_BUNDLE, data);\\n        }\\n\\n        return abi.decode(data, (uint64));\\n    }\\n\\n    function simulateTransaction(string memory sessionid, bytes memory txn)\\n        internal\\n        view\\n        returns (SimulateTransactionResult memory)\\n    {\\n        (bool success, bytes memory data) = SIMULATE_TRANSACTION.staticcall(abi.encode(sessionid, txn));\\n        if (!success) {\\n            revert PeekerReverted(SIMULATE_TRANSACTION, data);\\n        }\\n\\n        return abi.decode(data, (SimulateTransactionResult));\\n    }\\n\\n    function submitBundleJsonRPC(string memory url, string memory method, bytes memory params)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_BUNDLE_JSON_RPC.staticcall(abi.encode(url, method, params));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_BUNDLE_JSON_RPC, data);\\n        }\\n\\n        return data;\\n    }\\n\\n    function submitEthBlockToRelay(string memory relayUrl, bytes memory builderBid) internal view returns (bytes memory) {\\n        require(isConfidential());\\n        (bool success, bytes memory data) = SUBMIT_ETH_BLOCK_TO_RELAY.staticcall(abi.encode(relayUrl, builderBid));\\n        if (!success) {\\n            revert PeekerReverted(SUBMIT_ETH_BLOCK_TO_RELAY, data);\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0x54efb1edf83132bf4b1c7d1df6b370c57a8d2ad7c77c690bcd146df2d8c6d224\",\"license\":\"UNLICENSED\"},\"contracts/standard_peekers/bids.sol\":{\"content\":\"pragma solidity ^0.8.8;\\n\\nimport \\\"../libraries/Suave.sol\\\";\\n\\ncontract AnyBundleContract {\\n    event DataRecordEvent(Suave.DataId dataId, uint64 decryptionCondition, address[] allowedPeekers);\\n\\n    function fetchConfidentialBundleData() public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        bytes memory confidentialInputs = Suave.confidentialInputs();\\n        return abi.decode(confidentialInputs, (bytes));\\n    }\\n\\n    function emitDataRecord(Suave.DataRecord calldata dataRecord) public {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n    }\\n}\\n\\ncontract BundleContract is AnyBundleContract {\\n    function newBundle(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores\\n    ) external payable returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        bytes memory bundleData = this.fetchConfidentialBundleData();\\n\\n        uint64 egp = Suave.simulateBundle(bundleData);\\n\\n        Suave.DataRecord memory dataRecord =\\n            Suave.newDataRecord(decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"default:v0:ethBundles\\\");\\n\\n        Suave.confidentialStore(dataRecord.id, \\\"default:v0:ethBundles\\\", bundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"default:v0:ethBundleSimResults\\\", abi.encode(egp));\\n\\n        return emitAndReturn(dataRecord, bundleData);\\n    }\\n\\n    function emitAndReturn(Suave.DataRecord memory dataRecord, bytes memory) internal virtual returns (bytes memory) {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(dataRecord));\\n    }\\n}\\n\\ncontract EthBundleSenderContract is BundleContract {\\n    string[] public builderUrls;\\n\\n    constructor(string[] memory builderUrls_) {\\n        builderUrls = builderUrls_;\\n    }\\n\\n    function emitAndReturn(Suave.DataRecord memory dataRecord, bytes memory bundleData)\\n        internal\\n        virtual\\n        override\\n        returns (bytes memory)\\n    {\\n        for (uint256 i = 0; i < builderUrls.length; i++) {\\n            Suave.submitBundleJsonRPC(builderUrls[i], \\\"eth_sendBundle\\\", bundleData);\\n        }\\n\\n        return BundleContract.emitAndReturn(dataRecord, bundleData);\\n    }\\n}\\n\\ncontract MevShareContract is AnyBundleContract {\\n    event HintEvent(Suave.DataId dataId, bytes hint);\\n\\n    event MatchEvent(Suave.DataId matchDataId, bytes matchHint);\\n\\n    function newTransaction(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores\\n    ) external payable returns (bytes memory) {\\n        // 0. check confidential execution\\n        require(Suave.isConfidential());\\n\\n        // 1. fetch bundle data\\n        bytes memory bundleData = this.fetchConfidentialBundleData();\\n\\n        // 2. sim bundle\\n        uint64 egp = Suave.simulateBundle(bundleData);\\n\\n        // 3. extract hint\\n        bytes memory hint = Suave.extractHint(bundleData);\\n\\n        // // 4. store bundle and sim results\\n        Suave.DataRecord memory dataRecord = Suave.newDataRecord(\\n            decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"mevshare:v0:unmatchedBundles\\\"\\n        );\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundles\\\", bundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(egp));\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit HintEvent(dataRecord.id, hint);\\n\\n        // // 5. return \\\"callback\\\" to emit hint onchain\\n        return bytes.concat(this.emitDataRecordAndHint.selector, abi.encode(dataRecord, hint));\\n    }\\n\\n    function emitDataRecordAndHint(Suave.DataRecord calldata dataRecord, bytes memory hint) public {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit HintEvent(dataRecord.id, hint);\\n    }\\n\\n    function newMatch(\\n        uint64 decryptionCondition,\\n        address[] memory dataAllowedPeekers,\\n        address[] memory dataAllowedStores,\\n        Suave.DataId sharedataId\\n    ) external payable returns (bytes memory) {\\n        // WARNING : this function will copy the original mev share bid\\n        // into a new key with potentially different permsissions\\n\\n        require(Suave.isConfidential());\\n        // 1. fetch confidential data\\n        bytes memory matchBundleData = this.fetchConfidentialBundleData();\\n\\n        // 2. sim match alone for validity\\n        uint64 egp = Suave.simulateBundle(matchBundleData);\\n\\n        // 3. extract hint\\n        bytes memory matchHint = Suave.extractHint(matchBundleData);\\n\\n        Suave.DataRecord memory dataRecord = Suave.newDataRecord(\\n            decryptionCondition, dataAllowedPeekers, dataAllowedStores, \\\"mevshare:v0:matchDataRecords\\\"\\n        );\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundles\\\", matchBundleData);\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:ethBundleSimResults\\\", abi.encode(0));\\n\\n        //4. merge data records\\n        Suave.DataId[] memory dataRecords = new Suave.DataId[](2);\\n        dataRecords[0] = sharedataId;\\n        dataRecords[1] = dataRecord.id;\\n        Suave.confidentialStore(dataRecord.id, \\\"mevshare:v0:mergedDataRecords\\\", abi.encode(dataRecords));\\n\\n        return emitMatchDataRecordAndHint(dataRecord, matchHint);\\n    }\\n\\n    function emitMatchDataRecordAndHint(Suave.DataRecord memory dataRecord, bytes memory matchHint)\\n        internal\\n        virtual\\n        returns (bytes memory)\\n    {\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        emit MatchEvent(dataRecord.id, matchHint);\\n\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(dataRecord));\\n    }\\n}\\n\\ncontract MevShareBundleSenderContract is MevShareContract {\\n    string[] public builderUrls;\\n\\n    constructor(string[] memory builderUrls_) {\\n        builderUrls = builderUrls_;\\n    }\\n\\n    function emitMatchDataRecordAndHint(Suave.DataRecord memory dataRecord, bytes memory matchHint)\\n        internal\\n        virtual\\n        override\\n        returns (bytes memory)\\n    {\\n        bytes memory bundleData = Suave.fillMevShareBundle(dataRecord.id);\\n        for (uint256 i = 0; i < builderUrls.length; i++) {\\n            Suave.submitBundleJsonRPC(builderUrls[i], \\\"mev_sendBundle\\\", bundleData);\\n        }\\n\\n        return MevShareContract.emitMatchDataRecordAndHint(dataRecord, matchHint);\\n    }\\n}\\n\\n/* Not tested or implemented on the precompile side */\\nstruct EgpRecordPair {\\n    uint64 egp; // in wei, beware overflow\\n    Suave.DataId dataId;\\n}\\n\\ncontract EthBlockContract is AnyBundleContract {\\n    event BuilderBoostBidEvent(Suave.DataId dataId, bytes builderBid);\\n\\n    function idsEqual(Suave.DataId _l, Suave.DataId _r) public pure returns (bool) {\\n        bytes memory l = abi.encodePacked(_l);\\n        bytes memory r = abi.encodePacked(_r);\\n        for (uint256 i = 0; i < l.length; i++) {\\n            if (bytes(l)[i] != r[i]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function buildMevShare(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        Suave.DataRecord[] memory allShareMatchDataRecords =\\n            Suave.fetchDataRecords(blockHeight, \\\"mevshare:v0:matchDataRecords\\\");\\n        Suave.DataRecord[] memory allShareUserDataRecords =\\n            Suave.fetchDataRecords(blockHeight, \\\"mevshare:v0:unmatchedBundles\\\");\\n\\n        if (allShareUserDataRecords.length == 0) {\\n            revert Suave.PeekerReverted(address(this), \\\"no data records\\\");\\n        }\\n\\n        Suave.DataRecord[] memory allRecords = new Suave.DataRecord[](allShareUserDataRecords.length);\\n        for (uint256 i = 0; i < allShareUserDataRecords.length; i++) {\\n            // TODO: sort matches by egp first!\\n            Suave.DataRecord memory dataRecordToInsert = allShareUserDataRecords[i]; // will be updated with the best match if any\\n            for (uint256 j = 0; j < allShareMatchDataRecords.length; j++) {\\n                // TODO: should be done once at the start and sorted\\n                Suave.DataId[] memory mergeddataIds = abi.decode(\\n                    Suave.confidentialRetrieve(allShareMatchDataRecords[j].id, \\\"mevshare:v0:mergedDataRecords\\\"),\\n                    (Suave.DataId[])\\n                );\\n                if (idsEqual(mergeddataIds[0], allShareUserDataRecords[i].id)) {\\n                    dataRecordToInsert = allShareMatchDataRecords[j];\\n                    break;\\n                }\\n            }\\n            allRecords[i] = dataRecordToInsert;\\n        }\\n\\n        EgpRecordPair[] memory bidsByEGP = new EgpRecordPair[](allRecords.length);\\n        for (uint256 i = 0; i < allRecords.length; i++) {\\n            bytes memory simResults = Suave.confidentialRetrieve(allRecords[i].id, \\\"mevshare:v0:ethBundleSimResults\\\");\\n            uint64 egp = abi.decode(simResults, (uint64));\\n            bidsByEGP[i] = EgpRecordPair(egp, allRecords[i].id);\\n        }\\n\\n        // Bubble sort, cause why not\\n        uint256 n = bidsByEGP.length;\\n        for (uint256 i = 0; i < n - 1; i++) {\\n            for (uint256 j = i + 1; j < n; j++) {\\n                if (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n                    EgpRecordPair memory temp = bidsByEGP[i];\\n                    bidsByEGP[i] = bidsByEGP[j];\\n                    bidsByEGP[j] = temp;\\n                }\\n            }\\n        }\\n\\n        Suave.DataId[] memory alldataIds = new Suave.DataId[](allRecords.length);\\n        for (uint256 i = 0; i < bidsByEGP.length; i++) {\\n            alldataIds[i] = bidsByEGP[i].dataId;\\n        }\\n\\n        return buildAndEmit(blockArgs, blockHeight, alldataIds, \\\"mevshare:v0\\\");\\n    }\\n\\n    function buildFromPool(Suave.BuildBlockArgs memory blockArgs, uint64 blockHeight) public returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        Suave.DataRecord[] memory allRecords = Suave.fetchDataRecords(blockHeight, \\\"default:v0:ethBundles\\\");\\n        if (allRecords.length == 0) {\\n            revert Suave.PeekerReverted(address(this), \\\"no data records\\\");\\n        }\\n\\n        EgpRecordPair[] memory bidsByEGP = new EgpRecordPair[](allRecords.length);\\n        for (uint256 i = 0; i < allRecords.length; i++) {\\n            bytes memory simResults = Suave.confidentialRetrieve(allRecords[i].id, \\\"default:v0:ethBundleSimResults\\\");\\n            uint64 egp = abi.decode(simResults, (uint64));\\n            bidsByEGP[i] = EgpRecordPair(egp, allRecords[i].id);\\n        }\\n\\n        // Bubble sort, cause why not\\n        uint256 n = bidsByEGP.length;\\n        for (uint256 i = 0; i < n - 1; i++) {\\n            for (uint256 j = i + 1; j < n; j++) {\\n                if (bidsByEGP[i].egp < bidsByEGP[j].egp) {\\n                    EgpRecordPair memory temp = bidsByEGP[i];\\n                    bidsByEGP[i] = bidsByEGP[j];\\n                    bidsByEGP[j] = temp;\\n                }\\n            }\\n        }\\n\\n        Suave.DataId[] memory alldataIds = new Suave.DataId[](allRecords.length);\\n        for (uint256 i = 0; i < bidsByEGP.length; i++) {\\n            alldataIds[i] = bidsByEGP[i].dataId;\\n        }\\n\\n        return buildAndEmit(blockArgs, blockHeight, alldataIds, \\\"\\\");\\n    }\\n\\n    function buildAndEmit(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory records,\\n        string memory namespace\\n    ) public virtual returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        (Suave.DataRecord memory blockBid, bytes memory builderBid) =\\n            this.doBuild(blockArgs, blockHeight, records, namespace);\\n\\n        emit BuilderBoostBidEvent(blockBid.id, builderBid);\\n        emit DataRecordEvent(blockBid.id, blockBid.decryptionCondition, blockBid.allowedPeekers);\\n        return bytes.concat(this.emitBuilderBidAndBid.selector, abi.encode(blockBid, builderBid));\\n    }\\n\\n    function doBuild(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory records,\\n        string memory namespace\\n    ) public view returns (Suave.DataRecord memory, bytes memory) {\\n        address[] memory allowedPeekers = new address[](2);\\n        allowedPeekers[0] = address(this);\\n        allowedPeekers[1] = Suave.BUILD_ETH_BLOCK;\\n\\n        Suave.DataRecord memory blockBid =\\n            Suave.newDataRecord(blockHeight, allowedPeekers, allowedPeekers, \\\"default:v0:mergedDataRecords\\\");\\n        Suave.confidentialStore(blockBid.id, \\\"default:v0:mergedDataRecords\\\", abi.encode(records));\\n\\n        (bytes memory builderBid, bytes memory payload) = Suave.buildEthBlock(blockArgs, blockBid.id, namespace);\\n        Suave.confidentialStore(blockBid.id, \\\"default:v0:builderPayload\\\", payload); // only through this.unlock\\n\\n        return (blockBid, builderBid);\\n    }\\n\\n    function emitBuilderBidAndBid(Suave.DataRecord memory dataRecord, bytes memory builderBid)\\n        public\\n        returns (Suave.DataRecord memory, bytes memory)\\n    {\\n        emit BuilderBoostBidEvent(dataRecord.id, builderBid);\\n        emit DataRecordEvent(dataRecord.id, dataRecord.decryptionCondition, dataRecord.allowedPeekers);\\n        return (dataRecord, builderBid);\\n    }\\n\\n    function unlock(Suave.DataId dataId, bytes memory signedBlindedHeader) public view returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        // TODO: verify the header is correct\\n        // TODO: incorporate protocol name\\n        bytes memory payload = Suave.confidentialRetrieve(dataId, \\\"default:v0:builderPayload\\\");\\n        return payload;\\n    }\\n}\\n\\ncontract EthBlockBidSenderContract is EthBlockContract {\\n    string boostRelayUrl;\\n\\n    constructor(string memory boostRelayUrl_) {\\n        boostRelayUrl = boostRelayUrl_;\\n    }\\n\\n    function buildAndEmit(\\n        Suave.BuildBlockArgs memory blockArgs,\\n        uint64 blockHeight,\\n        Suave.DataId[] memory dataRecords,\\n        string memory namespace\\n    ) public virtual override returns (bytes memory) {\\n        require(Suave.isConfidential());\\n\\n        (Suave.DataRecord memory blockDataRecord, bytes memory builderBid) =\\n            this.doBuild(blockArgs, blockHeight, dataRecords, namespace);\\n        Suave.submitEthBlockToRelay(boostRelayUrl, builderBid);\\n\\n        emit DataRecordEvent(blockDataRecord.id, blockDataRecord.decryptionCondition, blockDataRecord.allowedPeekers);\\n        return bytes.concat(this.emitDataRecord.selector, abi.encode(blockDataRecord));\\n    }\\n}\\n\",\"keccak256\":\"0x69d1971b3f0841d3cc7c28122a240b06f1d28d71510bce6a7f915ee392f47918\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003ec438038062003ec48339818101604052810190620000379190620002a4565b80600090805190602001906200004f92919062000057565b505062000359565b828054620000659062000324565b90600052602060002090601f016020900481019282620000895760008555620000d5565b82601f10620000a457805160ff1916838001178555620000d5565b82800160010185558215620000d5579182015b82811115620000d4578251825591602001919060010190620000b7565b5b509050620000e49190620000e8565b5090565b5b8082111562000103576000816000905550600101620000e9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001708262000125565b810181811067ffffffffffffffff8211171562000192576200019162000136565b5b80604052505050565b6000620001a762000107565b9050620001b5828262000165565b919050565b600067ffffffffffffffff821115620001d857620001d762000136565b5b620001e38262000125565b9050602081019050919050565b60005b8381101562000210578082015181840152602081019050620001f3565b8381111562000220576000848401525b50505050565b60006200023d6200023784620001ba565b6200019b565b9050828152602081018484840111156200025c576200025b62000120565b5b62000269848285620001f0565b509392505050565b600082601f8301126200028957620002886200011b565b5b81516200029b84826020860162000226565b91505092915050565b600060208284031215620002bd57620002bc62000111565b5b600082015167ffffffffffffffff811115620002de57620002dd62000116565b5b620002ec8482850162000271565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200033d57607f821691505b602082108103620003535762000352620002f5565b5b50919050565b613b5b80620003696000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b33e471511610066578063b33e471514610159578063bcbb35971461018a578063dac44aef146101a6578063e829cd5d146101d6578063ff4aec7d1461020657610093565b80634a3540c0146100985780637df1cde2146100c8578063958adcdb146100f8578063aa8c95a614610129575b600080fd5b6100b260048036038101906100ad91906121ef565b610224565b6040516100bf9190612332565b60405180910390f35b6100e260048036038101906100dd9190612354565b6103f3565b6040516100ef9190612332565b60405180910390f35b610112600480360381019061010d91906121ef565b610453565b60405161012092919061258a565b60405180910390f35b610143600480360381019061013e91906125c1565b610662565b6040516101509190612332565b60405180910390f35b610173600480360381019061016e91906127d4565b610cae565b60405161018192919061258a565b60405180910390f35b6101a4600480360381019061019f9190612870565b610d49565b005b6101c060048036038101906101bb91906125c1565b610dbb565b6040516101cd9190612332565b60405180910390f35b6101f060048036038101906101eb91906128b9565b6111e4565b6040516101fd9190612908565b60405180910390f35b61020e6112eb565b60405161021b9190612332565b60405180910390f35b606061022e611324565b61023757600080fd5b6000803073ffffffffffffffffffffffffffffffffffffffff1663958adcdb888888886040518563ffffffff1660e01b81526004016102799493929190612c94565b600060405180830381865afa158015610296573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102bf9190612f98565b91509150610357600080546102d39061303f565b80601f01602080910402602001604051908101604052809291908181526020018280546102ff9061303f565b801561034c5780601f106103215761010080835404028352916020019161034c565b820191906000526020600020905b81548152906001019060200180831161032f57829003601f168201915b5050505050826113ec565b507ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb47826000015183604001518460600151604051610397939291906130ee565b60405180910390a163bcbb359760e01b826040516020016103b8919061312c565b6040516020818303038152906040526040516020016103d89291906131d7565b60405160208183030381529060405292505050949350505050565b60606103fd611324565b61040657600080fd5b6000610447846040518060400160405280601981526020017f64656661756c743a76303a6275696c6465725061796c6f6164000000000000008152506114e4565b90508091505092915050565b61045b611a86565b60606000600267ffffffffffffffff81111561047a57610479611b4d565b5b6040519080825280602002602001820160405280156104a85781602001602082028036833780820191505090505b50905030816000815181106104c0576104bf6131ff565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634210000181600181518110610513576105126131ff565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006105908783846040518060400160405280601c81526020017f64656661756c743a76303a6d6572676564446174615265636f726473000000008152506115cb565b90506105f581600001516040518060400160405280601c81526020017f64656661756c743a76303a6d6572676564446174615265636f72647300000000815250886040516020016105e1919061322e565b6040516020818303038152906040526116d1565b6000806106078a8460000151896117b4565b9150915061064f83600001516040518060400160405280601981526020017f64656661756c743a76303a6275696c6465725061796c6f616400000000000000815250836116d1565b8282955095505050505094509492505050565b606061066c611324565b61067557600080fd5b60006106b6836040518060400160405280601c81526020017f6d657673686172653a76303a6d61746368446174615265636f726473000000008152506118b5565b905060006106f9846040518060400160405280601c81526020017f6d657673686172653a76303a756e6d61746368656442756e646c6573000000008152506118b5565b9050600081510361074157306040517f75fff46700000000000000000000000000000000000000000000000000000000815260040161073891906132ab565b60405180910390fd5b6000815167ffffffffffffffff81111561075e5761075d611b4d565b5b60405190808252806020026020018201604052801561079757816020015b610784611a86565b81526020019060019003908161077c5790505b50905060005b82518110156108f85760008382815181106107bb576107ba6131ff565b5b6020026020010151905060005b85518110156108c45760006108308783815181106107e9576107e86131ff565b5b6020026020010151600001516040518060400160405280601d81526020017f6d657673686172653a76303a6d6572676564446174615265636f7264730000008152506114e4565b8060200190518101906108439190613370565b90506108888160008151811061085c5761085b6131ff565b5b6020026020010151878681518110610877576108766131ff565b5b6020026020010151600001516111e4565b156108b0578682815181106108a05761089f6131ff565b5b60200260200101519250506108c4565b5080806108bc906133f2565b9150506107c8565b50808383815181106108d9576108d86131ff565b5b60200260200101819052505080806108f0906133f2565b91505061079d565b506000815167ffffffffffffffff81111561091657610915611b4d565b5b60405190808252806020026020018201604052801561094f57816020015b61093c611aec565b8152602001906001900390816109345790505b50905060005b8251811015610a5a5760006109bd848381518110610976576109756131ff565b5b6020026020010151600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c7473008152506114e4565b90506000818060200190518101906109d5919061343a565b905060405180604001604052808267ffffffffffffffff168152602001868581518110610a0557610a046131ff565b5b6020026020010151600001516fffffffffffffffffffffffffffffffff1916815250848481518110610a3a57610a396131ff565b5b602002602001018190525050508080610a52906133f2565b915050610955565b5060008151905060005b600182610a719190613467565b811015610b8a576000600182610a87919061349b565b90505b82811015610b7657838181518110610aa557610aa46131ff565b5b60200260200101516000015167ffffffffffffffff16848381518110610ace57610acd6131ff565b5b60200260200101516000015167ffffffffffffffff161015610b63576000848381518110610aff57610afe6131ff565b5b60200260200101519050848281518110610b1c57610b1b6131ff565b5b6020026020010151858481518110610b3757610b366131ff565b5b602002602001018190525080858381518110610b5657610b556131ff565b5b6020026020010181905250505b8080610b6e906133f2565b915050610a8a565b508080610b82906133f2565b915050610a64565b506000835167ffffffffffffffff811115610ba857610ba7611b4d565b5b604051908082528060200260200182016040528015610bd65781602001602082028036833780820191505090505b50905060005b8351811015610c5e57838181518110610bf857610bf76131ff565b5b602002602001015160200151828281518110610c1757610c166131ff565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250508080610c56906133f2565b915050610bdc565b50610ca08989836040518060400160405280600b81526020017f6d657673686172653a7630000000000000000000000000000000000000000000815250610224565b965050505050505092915050565b610cb6611a86565b60607f67fa9c16cd72410c4cc1d47205b31852a81ec5e92d1c8cebc3ecbe98ed67fe3f846000015184604051610ced9291906134f1565b60405180910390a17ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb47846000015185604001518660600151604051610d34939291906130ee565b60405180910390a18383915091509250929050565b7ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb47816000016020810190610d7d9190613521565b826040016020810190610d90919061354e565b838060600190610da0919061358a565b604051610db09493929190613678565b60405180910390a150565b6060610dc5611324565b610dce57600080fd5b6000610e0f836040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152506118b5565b90506000815103610e5757306040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610e4e91906132ab565b60405180910390fd5b6000815167ffffffffffffffff811115610e7457610e73611b4d565b5b604051908082528060200260200182016040528015610ead57816020015b610e9a611aec565b815260200190600190039081610e925790505b50905060005b8251811015610fb8576000610f1b848381518110610ed457610ed36131ff565b5b6020026020010151600001516040518060400160405280601e81526020017f64656661756c743a76303a65746842756e646c6553696d526573756c747300008152506114e4565b9050600081806020019051810190610f33919061343a565b905060405180604001604052808267ffffffffffffffff168152602001868581518110610f6357610f626131ff565b5b6020026020010151600001516fffffffffffffffffffffffffffffffff1916815250848481518110610f9857610f976131ff565b5b602002602001018190525050508080610fb0906133f2565b915050610eb3565b5060008151905060005b600182610fcf9190613467565b8110156110e8576000600182610fe5919061349b565b90505b828110156110d457838181518110611003576110026131ff565b5b60200260200101516000015167ffffffffffffffff1684838151811061102c5761102b6131ff565b5b60200260200101516000015167ffffffffffffffff1610156110c157600084838151811061105d5761105c6131ff565b5b6020026020010151905084828151811061107a576110796131ff565b5b6020026020010151858481518110611095576110946131ff565b5b6020026020010181905250808583815181106110b4576110b36131ff565b5b6020026020010181905250505b80806110cc906133f2565b915050610fe8565b5080806110e0906133f2565b915050610fc2565b506000835167ffffffffffffffff81111561110657611105611b4d565b5b6040519080825280602002602001820160405280156111345781602001602082028036833780820191505090505b50905060005b83518110156111bc57838181518110611156576111556131ff565b5b602002602001015160200151828281518110611175576111746131ff565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505080806111b4906133f2565b91505061113a565b506111d887878360405180602001604052806000815250610224565b94505050505092915050565b600080836040516020016111f891906136d9565b604051602081830303815290604052905060008360405160200161121c91906136d9565b604051602081830303815290604052905060005b82518110156112dd5781818151811061124c5761124b6131ff565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828151811061128c5761128b6131ff565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146112ca57600093505050506112e5565b80806112d5906133f2565b915050611230565b506001925050505b92915050565b60606112f5611324565b6112fe57600080fd5b60006113086119af565b90508080602001905181019061131e91906136f4565b91505090565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff1660405161135090613763565b600060405180830381855afa9150503d806000811461138b576040519150601f19603f3d011682016040523d82523d6000602084013e611390565b606091505b5091509150816113dd576342010000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016113d4929190613778565b60405180910390fd5b80516020820151935050505090565b60606113f6611324565b6113ff57600080fd5b600080634210000273ffffffffffffffffffffffffffffffffffffffff1685856040516020016114309291906137a8565b60405160208183030381529060405260405161144c91906137df565b600060405180830381855afa9150503d8060008114611487576040519150601f19603f3d011682016040523d82523d6000602084013e61148c565b606091505b5091509150816114d9576342100002816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016114d0929190613778565b60405180910390fd5b809250505092915050565b6060600080634202000173ffffffffffffffffffffffffffffffffffffffff1685856040516020016115179291906137f6565b60405160208183030381529060405260405161153391906137df565b600060405180830381855afa9150503d806000811461156e576040519150601f19603f3d011682016040523d82523d6000602084013e611573565b606091505b5091509150816115c0576342020001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016115b7929190613778565b60405180910390fd5b809250505092915050565b6115d3611a86565b600080634203000073ffffffffffffffffffffffffffffffffffffffff16878787876040516020016116089493929190613826565b60405160208183030381529060405260405161162491906137df565b600060405180830381855afa9150503d806000811461165f576040519150601f19603f3d011682016040523d82523d6000602084013e611664565b606091505b5091509150816116b1576342030000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016116a8929190613778565b60405180910390fd5b808060200190518101906116c59190613880565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001611704939291906138c9565b60405160208183030381529060405260405161172091906137df565b600060405180830381855afa9150503d806000811461175b576040519150601f19603f3d011682016040523d82523d6000602084013e611760565b606091505b5091509150816117ad576342020000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016117a4929190613778565b60405180910390fd5b5050505050565b606080600080634210000173ffffffffffffffffffffffffffffffffffffffff168787876040516020016117ea9392919061390e565b60405160208183030381529060405260405161180691906137df565b600060405180830381855afa9150503d8060008114611841576040519150601f19603f3d011682016040523d82523d6000602084013e611846565b606091505b509150915081611893576342100001816040517f75fff46700000000000000000000000000000000000000000000000000000000815260040161188a929190613778565b60405180910390fd5b808060200190518101906118a79190613953565b935093505050935093915050565b6060600080634203000173ffffffffffffffffffffffffffffffffffffffff1685856040516020016118e89291906139cb565b60405160208183030381529060405260405161190491906137df565b600060405180830381855afa9150503d806000811461193f576040519150601f19603f3d011682016040523d82523d6000602084013e611944565b606091505b509150915081611991576342030001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611988929190613778565b60405180910390fd5b808060200190518101906119a59190613adc565b9250505092915050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff166040516020016040516020818303038152906040526040516119f191906137df565b600060405180830381855afa9150503d8060008114611a2c576040519150601f19603f3d011682016040523d82523d6000602084013e611a31565b606091505b509150915081611a7e576342010001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611a75929190613778565b60405180910390fd5b809250505090565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b6040518060400160405280600067ffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff191681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b8582611b3c565b810181811067ffffffffffffffff82111715611ba457611ba3611b4d565b5b80604052505050565b6000611bb7611b23565b9050611bc38282611b7c565b919050565b600080fd5b600067ffffffffffffffff82169050919050565b611bea81611bcd565b8114611bf557600080fd5b50565b600081359050611c0781611be1565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115611c3257611c31611b4d565b5b611c3b82611b3c565b9050602081019050919050565b82818337600083830152505050565b6000611c6a611c6584611c17565b611bad565b905082815260208101848484011115611c8657611c85611c12565b5b611c91848285611c48565b509392505050565b600082601f830112611cae57611cad611c0d565b5b8135611cbe848260208601611c57565b91505092915050565b6000819050919050565b611cda81611cc7565b8114611ce557600080fd5b50565b600081359050611cf781611cd1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d2882611cfd565b9050919050565b611d3881611d1d565b8114611d4357600080fd5b50565b600081359050611d5581611d2f565b92915050565b600067ffffffffffffffff821115611d7657611d75611b4d565b5b602082029050602081019050919050565b600080fd5b600060808284031215611da257611da1611b37565b5b611dac6080611bad565b90506000611dbc84828501611bf8565b6000830152506020611dd084828501611bf8565b6020830152506040611de484828501611d46565b6040830152506060611df884828501611bf8565b60608301525092915050565b6000611e17611e1284611d5b565b611bad565b90508083825260208201905060808402830185811115611e3a57611e39611d87565b5b835b81811015611e635780611e4f8882611d8c565b845260208401935050608081019050611e3c565b5050509392505050565b600082601f830112611e8257611e81611c0d565b5b8135611e92848260208601611e04565b91505092915050565b60008115159050919050565b611eb081611e9b565b8114611ebb57600080fd5b50565b600081359050611ecd81611ea7565b92915050565b60006101608284031215611eea57611ee9611b37565b5b611ef5610160611bad565b90506000611f0584828501611bf8565b600083015250602082013567ffffffffffffffff811115611f2957611f28611bc8565b5b611f3584828501611c99565b6020830152506040611f4984828501611ce8565b6040830152506060611f5d84828501611bf8565b6060830152506080611f7184828501611d46565b60808301525060a0611f8584828501611bf8565b60a08301525060c0611f9984828501611ce8565b60c08301525060e082013567ffffffffffffffff811115611fbd57611fbc611bc8565b5b611fc984828501611e6d565b60e08301525061010082013567ffffffffffffffff811115611fee57611fed611bc8565b5b611ffa84828501611c99565b6101008301525061012061201084828501611ce8565b6101208301525061014061202684828501611ebe565b6101408301525092915050565b600067ffffffffffffffff82111561204e5761204d611b4d565b5b602082029050602081019050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6120948161205f565b811461209f57600080fd5b50565b6000813590506120b18161208b565b92915050565b60006120ca6120c584612033565b611bad565b905080838252602082019050602084028301858111156120ed576120ec611d87565b5b835b81811015612116578061210288826120a2565b8452602084019350506020810190506120ef565b5050509392505050565b600082601f83011261213557612134611c0d565b5b81356121458482602086016120b7565b91505092915050565b600067ffffffffffffffff82111561216957612168611b4d565b5b61217282611b3c565b9050602081019050919050565b600061219261218d8461214e565b611bad565b9050828152602081018484840111156121ae576121ad611c12565b5b6121b9848285611c48565b509392505050565b600082601f8301126121d6576121d5611c0d565b5b81356121e684826020860161217f565b91505092915050565b6000806000806080858703121561220957612208611b2d565b5b600085013567ffffffffffffffff81111561222757612226611b32565b5b61223387828801611ed3565b945050602061224487828801611bf8565b935050604085013567ffffffffffffffff81111561226557612264611b32565b5b61227187828801612120565b925050606085013567ffffffffffffffff81111561229257612291611b32565b5b61229e878288016121c1565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b838110156122e45780820151818401526020810190506122c9565b838111156122f3576000848401525b50505050565b6000612304826122aa565b61230e81856122b5565b935061231e8185602086016122c6565b61232781611b3c565b840191505092915050565b6000602082019050818103600083015261234c81846122f9565b905092915050565b6000806040838503121561236b5761236a611b2d565b5b6000612379858286016120a2565b925050602083013567ffffffffffffffff81111561239a57612399611b32565b5b6123a685828601611c99565b9150509250929050565b60006123bb8261205f565b9050919050565b6123cb816123b0565b82525050565b6123da81611bcd565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61241581611d1d565b82525050565b6000612427838361240c565b60208301905092915050565b6000602082019050919050565b600061244b826123e0565b61245581856123eb565b9350612460836123fc565b8060005b83811015612491578151612478888261241b565b975061248383612433565b925050600181019050612464565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60006124c58261249e565b6124cf81856124a9565b93506124df8185602086016122c6565b6124e881611b3c565b840191505092915050565b600060c08301600083015161250b60008601826123c2565b50602083015161251e60208601826123c2565b50604083015161253160408601826123d1565b50606083015184820360608601526125498282612440565b915050608083015184820360808601526125638282612440565b91505060a083015184820360a086015261257d82826124ba565b9150508091505092915050565b600060408201905081810360008301526125a481856124f3565b905081810360208301526125b881846122f9565b90509392505050565b600080604083850312156125d8576125d7611b2d565b5b600083013567ffffffffffffffff8111156125f6576125f5611b32565b5b61260285828601611ed3565b925050602061261385828601611bf8565b9150509250929050565b600067ffffffffffffffff82111561263857612637611b4d565b5b602082029050602081019050919050565b600061265c6126578461261d565b611bad565b9050808382526020820190506020840283018581111561267f5761267e611d87565b5b835b818110156126a857806126948882611d46565b845260208401935050602081019050612681565b5050509392505050565b600082601f8301126126c7576126c6611c0d565b5b81356126d7848260208601612649565b91505092915050565b600060c082840312156126f6576126f5611b37565b5b61270060c0611bad565b90506000612710848285016120a2565b6000830152506020612724848285016120a2565b602083015250604061273884828501611bf8565b604083015250606082013567ffffffffffffffff81111561275c5761275b611bc8565b5b612768848285016126b2565b606083015250608082013567ffffffffffffffff81111561278c5761278b611bc8565b5b612798848285016126b2565b60808301525060a082013567ffffffffffffffff8111156127bc576127bb611bc8565b5b6127c8848285016121c1565b60a08301525092915050565b600080604083850312156127eb576127ea611b2d565b5b600083013567ffffffffffffffff81111561280957612808611b32565b5b612815858286016126e0565b925050602083013567ffffffffffffffff81111561283657612835611b32565b5b61284285828601611c99565b9150509250929050565b600080fd5b600060c082840312156128675761286661284c565b5b81905092915050565b60006020828403121561288657612885611b2d565b5b600082013567ffffffffffffffff8111156128a4576128a3611b32565b5b6128b084828501612851565b91505092915050565b600080604083850312156128d0576128cf611b2d565b5b60006128de858286016120a2565b92505060206128ef858286016120a2565b9150509250929050565b61290281611e9b565b82525050565b600060208201905061291d60008301846128f9565b92915050565b600082825260208201905092915050565b600061293f826122aa565b6129498185612923565b93506129598185602086016122c6565b61296281611b3c565b840191505092915050565b61297681611cc7565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6080820160008201516129be60008501826123d1565b5060208201516129d160208501826123d1565b5060408201516129e4604085018261240c565b5060608201516129f760608501826123d1565b50505050565b6000612a0983836129a8565b60808301905092915050565b6000602082019050919050565b6000612a2d8261297c565b612a378185612987565b9350612a4283612998565b8060005b83811015612a73578151612a5a88826129fd565b9750612a6583612a15565b925050600181019050612a46565b5085935050505092915050565b612a8981611e9b565b82525050565b600061016083016000830151612aa860008601826123d1565b5060208301518482036020860152612ac08282612934565b9150506040830151612ad5604086018261296d565b506060830151612ae860608601826123d1565b506080830151612afb608086018261240c565b5060a0830151612b0e60a08601826123d1565b5060c0830151612b2160c086018261296d565b5060e083015184820360e0860152612b398282612a22565b915050610100830151848203610100860152612b558282612934565b915050610120830151612b6c61012086018261296d565b50610140830151612b81610140860182612a80565b508091505092915050565b612b9581611bcd565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612bd383836123c2565b60208301905092915050565b6000602082019050919050565b6000612bf782612b9b565b612c018185612ba6565b9350612c0c83612bb7565b8060005b83811015612c3d578151612c248882612bc7565b9750612c2f83612bdf565b925050600181019050612c10565b5085935050505092915050565b600082825260208201905092915050565b6000612c668261249e565b612c708185612c4a565b9350612c808185602086016122c6565b612c8981611b3c565b840191505092915050565b60006080820190508181036000830152612cae8187612a8f565b9050612cbd6020830186612b8c565b8181036040830152612ccf8185612bec565b90508181036060830152612ce38184612c5b565b905095945050505050565b600081519050612cfd8161208b565b92915050565b600081519050612d1281611be1565b92915050565b600081519050612d2781611d2f565b92915050565b6000612d40612d3b8461261d565b611bad565b90508083825260208201905060208402830185811115612d6357612d62611d87565b5b835b81811015612d8c5780612d788882612d18565b845260208401935050602081019050612d65565b5050509392505050565b600082601f830112612dab57612daa611c0d565b5b8151612dbb848260208601612d2d565b91505092915050565b6000612dd7612dd28461214e565b611bad565b905082815260208101848484011115612df357612df2611c12565b5b612dfe8482856122c6565b509392505050565b600082601f830112612e1b57612e1a611c0d565b5b8151612e2b848260208601612dc4565b91505092915050565b600060c08284031215612e4a57612e49611b37565b5b612e5460c0611bad565b90506000612e6484828501612cee565b6000830152506020612e7884828501612cee565b6020830152506040612e8c84828501612d03565b604083015250606082015167ffffffffffffffff811115612eb057612eaf611bc8565b5b612ebc84828501612d96565b606083015250608082015167ffffffffffffffff811115612ee057612edf611bc8565b5b612eec84828501612d96565b60808301525060a082015167ffffffffffffffff811115612f1057612f0f611bc8565b5b612f1c84828501612e06565b60a08301525092915050565b6000612f3b612f3684611c17565b611bad565b905082815260208101848484011115612f5757612f56611c12565b5b612f628482856122c6565b509392505050565b600082601f830112612f7f57612f7e611c0d565b5b8151612f8f848260208601612f28565b91505092915050565b60008060408385031215612faf57612fae611b2d565b5b600083015167ffffffffffffffff811115612fcd57612fcc611b32565b5b612fd985828601612e34565b925050602083015167ffffffffffffffff811115612ffa57612ff9611b32565b5b61300685828601612f6a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061305757607f821691505b60208210810361306a57613069613010565b5b50919050565b613079816123b0565b82525050565b600082825260208201905092915050565b600061309b826123e0565b6130a5818561307f565b93506130b0836123fc565b8060005b838110156130e15781516130c8888261241b565b97506130d383612433565b9250506001810190506130b4565b5085935050505092915050565b60006060820190506131036000830186613070565b6131106020830185612b8c565b81810360408301526131228184613090565b9050949350505050565b6000602082019050818103600083015261314681846124f3565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6131956131908261314e565b61317a565b82525050565b600081905092915050565b60006131b1826122aa565b6131bb818561319b565b93506131cb8185602086016122c6565b80840191505092915050565b60006131e38285613184565b6004820191506131f382846131a6565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208201905081810360008301526132488184612bec565b905092915050565b61325981611d1d565b82525050565b7f6e6f2064617461207265636f7264730000000000000000000000000000000000600082015250565b6000613295600f836122b5565b91506132a08261325f565b602082019050919050565b60006040820190506132c06000830184613250565b81810360208301526132d181613288565b905092915050565b60006132ec6132e784612033565b611bad565b9050808382526020820190506020840283018581111561330f5761330e611d87565b5b835b8181101561333857806133248882612cee565b845260208401935050602081019050613311565b5050509392505050565b600082601f83011261335757613356611c0d565b5b81516133678482602086016132d9565b91505092915050565b60006020828403121561338657613385611b2d565b5b600082015167ffffffffffffffff8111156133a4576133a3611b32565b5b6133b084828501613342565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006133fd826133e8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361342f5761342e6133b9565b5b600182019050919050565b6000602082840312156134505761344f611b2d565b5b600061345e84828501612d03565b91505092915050565b6000613472826133e8565b915061347d836133e8565b9250828210156134905761348f6133b9565b5b828203905092915050565b60006134a6826133e8565b91506134b1836133e8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134e6576134e56133b9565b5b828201905092915050565b60006040820190506135066000830185613070565b818103602083015261351881846122f9565b90509392505050565b60006020828403121561353757613536611b2d565b5b6000613545848285016120a2565b91505092915050565b60006020828403121561356457613563611b2d565b5b600061357284828501611bf8565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126135a7576135a661357b565b5b80840192508235915067ffffffffffffffff8211156135c9576135c8613580565b5b6020830192506020820236038313156135e5576135e4613585565b5b509250929050565b6000819050919050565b60006136066020840184611d46565b905092915050565b6000602082019050919050565b6000613627838561307f565b9350613632826135ed565b8060005b8581101561366b5761364882846135f7565b613652888261241b565b975061365d8361360e565b925050600181019050613636565b5085925050509392505050565b600060608201905061368d6000830187613070565b61369a6020830186612b8c565b81810360408301526136ad81848661361b565b905095945050505050565b6000819050919050565b6136d36136ce826123b0565b6136b8565b82525050565b60006136e582846136c2565b60108201915081905092915050565b60006020828403121561370a57613709611b2d565b5b600082015167ffffffffffffffff81111561372857613727611b32565b5b61373484828501612f6a565b91505092915050565b50565b600061374d60008361319b565b91506137588261373d565b600082019050919050565b600061376e82613740565b9150819050919050565b600060408201905061378d6000830185613250565b818103602083015261379f81846122f9565b90509392505050565b600060408201905081810360008301526137c28185612c5b565b905081810360208301526137d681846122f9565b90509392505050565b60006137eb82846131a6565b915081905092915050565b600060408201905061380b6000830185613070565b818103602083015261381d8184612c5b565b90509392505050565b600060808201905061383b6000830187612b8c565b818103602083015261384d8186613090565b905081810360408301526138618185613090565b905081810360608301526138758184612c5b565b905095945050505050565b60006020828403121561389657613895611b2d565b5b600082015167ffffffffffffffff8111156138b4576138b3611b32565b5b6138c084828501612e34565b91505092915050565b60006060820190506138de6000830186613070565b81810360208301526138f08185612c5b565b9050818103604083015261390481846122f9565b9050949350505050565b600060608201905081810360008301526139288186612a8f565b90506139376020830185613070565b81810360408301526139498184612c5b565b9050949350505050565b6000806040838503121561396a57613969611b2d565b5b600083015167ffffffffffffffff81111561398857613987611b32565b5b61399485828601612f6a565b925050602083015167ffffffffffffffff8111156139b5576139b4611b32565b5b6139c185828601612f6a565b9150509250929050565b60006040820190506139e06000830185612b8c565b81810360208301526139f28184612c5b565b90509392505050565b600067ffffffffffffffff821115613a1657613a15611b4d565b5b602082029050602081019050919050565b6000613a3a613a35846139fb565b611bad565b90508083825260208201905060208402830185811115613a5d57613a5c611d87565b5b835b81811015613aa457805167ffffffffffffffff811115613a8257613a81611c0d565b5b808601613a8f8982612e34565b85526020850194505050602081019050613a5f565b5050509392505050565b600082601f830112613ac357613ac2611c0d565b5b8151613ad3848260208601613a27565b91505092915050565b600060208284031215613af257613af1611b2d565b5b600082015167ffffffffffffffff811115613b1057613b0f611b32565b5b613b1c84828501613aae565b9150509291505056fea2646970667358221220182bab83cd13831b3109e8be54ca77f6bdd7684fd586147bc54f2c942b10291a64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063b33e471511610066578063b33e471514610159578063bcbb35971461018a578063dac44aef146101a6578063e829cd5d146101d6578063ff4aec7d1461020657610093565b80634a3540c0146100985780637df1cde2146100c8578063958adcdb146100f8578063aa8c95a614610129575b600080fd5b6100b260048036038101906100ad91906121ef565b610224565b6040516100bf9190612332565b60405180910390f35b6100e260048036038101906100dd9190612354565b6103f3565b6040516100ef9190612332565b60405180910390f35b610112600480360381019061010d91906121ef565b610453565b60405161012092919061258a565b60405180910390f35b610143600480360381019061013e91906125c1565b610662565b6040516101509190612332565b60405180910390f35b610173600480360381019061016e91906127d4565b610cae565b60405161018192919061258a565b60405180910390f35b6101a4600480360381019061019f9190612870565b610d49565b005b6101c060048036038101906101bb91906125c1565b610dbb565b6040516101cd9190612332565b60405180910390f35b6101f060048036038101906101eb91906128b9565b6111e4565b6040516101fd9190612908565b60405180910390f35b61020e6112eb565b60405161021b9190612332565b60405180910390f35b606061022e611324565b61023757600080fd5b6000803073ffffffffffffffffffffffffffffffffffffffff1663958adcdb888888886040518563ffffffff1660e01b81526004016102799493929190612c94565b600060405180830381865afa158015610296573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102bf9190612f98565b91509150610357600080546102d39061303f565b80601f01602080910402602001604051908101604052809291908181526020018280546102ff9061303f565b801561034c5780601f106103215761010080835404028352916020019161034c565b820191906000526020600020905b81548152906001019060200180831161032f57829003601f168201915b5050505050826113ec565b507ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb47826000015183604001518460600151604051610397939291906130ee565b60405180910390a163bcbb359760e01b826040516020016103b8919061312c565b6040516020818303038152906040526040516020016103d89291906131d7565b60405160208183030381529060405292505050949350505050565b60606103fd611324565b61040657600080fd5b6000610447846040518060400160405280601981526020017f64656661756c743a76303a6275696c6465725061796c6f6164000000000000008152506114e4565b90508091505092915050565b61045b611a86565b60606000600267ffffffffffffffff81111561047a57610479611b4d565b5b6040519080825280602002602001820160405280156104a85781602001602082028036833780820191505090505b50905030816000815181106104c0576104bf6131ff565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050634210000181600181518110610513576105126131ff565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006105908783846040518060400160405280601c81526020017f64656661756c743a76303a6d6572676564446174615265636f726473000000008152506115cb565b90506105f581600001516040518060400160405280601c81526020017f64656661756c743a76303a6d6572676564446174615265636f72647300000000815250886040516020016105e1919061322e565b6040516020818303038152906040526116d1565b6000806106078a8460000151896117b4565b9150915061064f83600001516040518060400160405280601981526020017f64656661756c743a76303a6275696c6465725061796c6f616400000000000000815250836116d1565b8282955095505050505094509492505050565b606061066c611324565b61067557600080fd5b60006106b6836040518060400160405280601c81526020017f6d657673686172653a76303a6d61746368446174615265636f726473000000008152506118b5565b905060006106f9846040518060400160405280601c81526020017f6d657673686172653a76303a756e6d61746368656442756e646c6573000000008152506118b5565b9050600081510361074157306040517f75fff46700000000000000000000000000000000000000000000000000000000815260040161073891906132ab565b60405180910390fd5b6000815167ffffffffffffffff81111561075e5761075d611b4d565b5b60405190808252806020026020018201604052801561079757816020015b610784611a86565b81526020019060019003908161077c5790505b50905060005b82518110156108f85760008382815181106107bb576107ba6131ff565b5b6020026020010151905060005b85518110156108c45760006108308783815181106107e9576107e86131ff565b5b6020026020010151600001516040518060400160405280601d81526020017f6d657673686172653a76303a6d6572676564446174615265636f7264730000008152506114e4565b8060200190518101906108439190613370565b90506108888160008151811061085c5761085b6131ff565b5b6020026020010151878681518110610877576108766131ff565b5b6020026020010151600001516111e4565b156108b0578682815181106108a05761089f6131ff565b5b60200260200101519250506108c4565b5080806108bc906133f2565b9150506107c8565b50808383815181106108d9576108d86131ff565b5b60200260200101819052505080806108f0906133f2565b91505061079d565b506000815167ffffffffffffffff81111561091657610915611b4d565b5b60405190808252806020026020018201604052801561094f57816020015b61093c611aec565b8152602001906001900390816109345790505b50905060005b8251811015610a5a5760006109bd848381518110610976576109756131ff565b5b6020026020010151600001516040518060400160405280601f81526020017f6d657673686172653a76303a65746842756e646c6553696d526573756c7473008152506114e4565b90506000818060200190518101906109d5919061343a565b905060405180604001604052808267ffffffffffffffff168152602001868581518110610a0557610a046131ff565b5b6020026020010151600001516fffffffffffffffffffffffffffffffff1916815250848481518110610a3a57610a396131ff565b5b602002602001018190525050508080610a52906133f2565b915050610955565b5060008151905060005b600182610a719190613467565b811015610b8a576000600182610a87919061349b565b90505b82811015610b7657838181518110610aa557610aa46131ff565b5b60200260200101516000015167ffffffffffffffff16848381518110610ace57610acd6131ff565b5b60200260200101516000015167ffffffffffffffff161015610b63576000848381518110610aff57610afe6131ff565b5b60200260200101519050848281518110610b1c57610b1b6131ff565b5b6020026020010151858481518110610b3757610b366131ff565b5b602002602001018190525080858381518110610b5657610b556131ff565b5b6020026020010181905250505b8080610b6e906133f2565b915050610a8a565b508080610b82906133f2565b915050610a64565b506000835167ffffffffffffffff811115610ba857610ba7611b4d565b5b604051908082528060200260200182016040528015610bd65781602001602082028036833780820191505090505b50905060005b8351811015610c5e57838181518110610bf857610bf76131ff565b5b602002602001015160200151828281518110610c1757610c166131ff565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250508080610c56906133f2565b915050610bdc565b50610ca08989836040518060400160405280600b81526020017f6d657673686172653a7630000000000000000000000000000000000000000000815250610224565b965050505050505092915050565b610cb6611a86565b60607f67fa9c16cd72410c4cc1d47205b31852a81ec5e92d1c8cebc3ecbe98ed67fe3f846000015184604051610ced9291906134f1565b60405180910390a17ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb47846000015185604001518660600151604051610d34939291906130ee565b60405180910390a18383915091509250929050565b7ff7645ba1634d8aed79d5bd07dd401d4ef0860e018d7eb3949c3f4da8fa26fb47816000016020810190610d7d9190613521565b826040016020810190610d90919061354e565b838060600190610da0919061358a565b604051610db09493929190613678565b60405180910390a150565b6060610dc5611324565b610dce57600080fd5b6000610e0f836040518060400160405280601581526020017f64656661756c743a76303a65746842756e646c657300000000000000000000008152506118b5565b90506000815103610e5757306040517f75fff467000000000000000000000000000000000000000000000000000000008152600401610e4e91906132ab565b60405180910390fd5b6000815167ffffffffffffffff811115610e7457610e73611b4d565b5b604051908082528060200260200182016040528015610ead57816020015b610e9a611aec565b815260200190600190039081610e925790505b50905060005b8251811015610fb8576000610f1b848381518110610ed457610ed36131ff565b5b6020026020010151600001516040518060400160405280601e81526020017f64656661756c743a76303a65746842756e646c6553696d526573756c747300008152506114e4565b9050600081806020019051810190610f33919061343a565b905060405180604001604052808267ffffffffffffffff168152602001868581518110610f6357610f626131ff565b5b6020026020010151600001516fffffffffffffffffffffffffffffffff1916815250848481518110610f9857610f976131ff565b5b602002602001018190525050508080610fb0906133f2565b915050610eb3565b5060008151905060005b600182610fcf9190613467565b8110156110e8576000600182610fe5919061349b565b90505b828110156110d457838181518110611003576110026131ff565b5b60200260200101516000015167ffffffffffffffff1684838151811061102c5761102b6131ff565b5b60200260200101516000015167ffffffffffffffff1610156110c157600084838151811061105d5761105c6131ff565b5b6020026020010151905084828151811061107a576110796131ff565b5b6020026020010151858481518110611095576110946131ff565b5b6020026020010181905250808583815181106110b4576110b36131ff565b5b6020026020010181905250505b80806110cc906133f2565b915050610fe8565b5080806110e0906133f2565b915050610fc2565b506000835167ffffffffffffffff81111561110657611105611b4d565b5b6040519080825280602002602001820160405280156111345781602001602082028036833780820191505090505b50905060005b83518110156111bc57838181518110611156576111556131ff565b5b602002602001015160200151828281518110611175576111746131ff565b5b60200260200101906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff19168152505080806111b4906133f2565b91505061113a565b506111d887878360405180602001604052806000815250610224565b94505050505092915050565b600080836040516020016111f891906136d9565b604051602081830303815290604052905060008360405160200161121c91906136d9565b604051602081830303815290604052905060005b82518110156112dd5781818151811061124c5761124b6131ff565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828151811061128c5761128b6131ff565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146112ca57600093505050506112e5565b80806112d5906133f2565b915050611230565b506001925050505b92915050565b60606112f5611324565b6112fe57600080fd5b60006113086119af565b90508080602001905181019061131e91906136f4565b91505090565b6000806000634201000073ffffffffffffffffffffffffffffffffffffffff1660405161135090613763565b600060405180830381855afa9150503d806000811461138b576040519150601f19603f3d011682016040523d82523d6000602084013e611390565b606091505b5091509150816113dd576342010000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016113d4929190613778565b60405180910390fd5b80516020820151935050505090565b60606113f6611324565b6113ff57600080fd5b600080634210000273ffffffffffffffffffffffffffffffffffffffff1685856040516020016114309291906137a8565b60405160208183030381529060405260405161144c91906137df565b600060405180830381855afa9150503d8060008114611487576040519150601f19603f3d011682016040523d82523d6000602084013e61148c565b606091505b5091509150816114d9576342100002816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016114d0929190613778565b60405180910390fd5b809250505092915050565b6060600080634202000173ffffffffffffffffffffffffffffffffffffffff1685856040516020016115179291906137f6565b60405160208183030381529060405260405161153391906137df565b600060405180830381855afa9150503d806000811461156e576040519150601f19603f3d011682016040523d82523d6000602084013e611573565b606091505b5091509150816115c0576342020001816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016115b7929190613778565b60405180910390fd5b809250505092915050565b6115d3611a86565b600080634203000073ffffffffffffffffffffffffffffffffffffffff16878787876040516020016116089493929190613826565b60405160208183030381529060405260405161162491906137df565b600060405180830381855afa9150503d806000811461165f576040519150601f19603f3d011682016040523d82523d6000602084013e611664565b606091505b5091509150816116b1576342030000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016116a8929190613778565b60405180910390fd5b808060200190518101906116c59190613880565b92505050949350505050565b600080634202000073ffffffffffffffffffffffffffffffffffffffff16858585604051602001611704939291906138c9565b60405160208183030381529060405260405161172091906137df565b600060405180830381855afa9150503d806000811461175b576040519150601f19603f3d011682016040523d82523d6000602084013e611760565b606091505b5091509150816117ad576342020000816040517f75fff4670000000000000000000000000000000000000000000000000000000081526004016117a4929190613778565b60405180910390fd5b5050505050565b606080600080634210000173ffffffffffffffffffffffffffffffffffffffff168787876040516020016117ea9392919061390e565b60405160208183030381529060405260405161180691906137df565b600060405180830381855afa9150503d8060008114611841576040519150601f19603f3d011682016040523d82523d6000602084013e611846565b606091505b509150915081611893576342100001816040517f75fff46700000000000000000000000000000000000000000000000000000000815260040161188a929190613778565b60405180910390fd5b808060200190518101906118a79190613953565b935093505050935093915050565b6060600080634203000173ffffffffffffffffffffffffffffffffffffffff1685856040516020016118e89291906139cb565b60405160208183030381529060405260405161190491906137df565b600060405180830381855afa9150503d806000811461193f576040519150601f19603f3d011682016040523d82523d6000602084013e611944565b606091505b509150915081611991576342030001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611988929190613778565b60405180910390fd5b808060200190518101906119a59190613adc565b9250505092915050565b6060600080634201000173ffffffffffffffffffffffffffffffffffffffff166040516020016040516020818303038152906040526040516119f191906137df565b600060405180830381855afa9150503d8060008114611a2c576040519150601f19603f3d011682016040523d82523d6000602084013e611a31565b606091505b509150915081611a7e576342010001816040517f75fff467000000000000000000000000000000000000000000000000000000008152600401611a75929190613778565b60405180910390fd5b809250505090565b6040518060c0016040528060006fffffffffffffffffffffffffffffffff1916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff1681526020016060815260200160608152602001606081525090565b6040518060400160405280600067ffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff191681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b8582611b3c565b810181811067ffffffffffffffff82111715611ba457611ba3611b4d565b5b80604052505050565b6000611bb7611b23565b9050611bc38282611b7c565b919050565b600080fd5b600067ffffffffffffffff82169050919050565b611bea81611bcd565b8114611bf557600080fd5b50565b600081359050611c0781611be1565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115611c3257611c31611b4d565b5b611c3b82611b3c565b9050602081019050919050565b82818337600083830152505050565b6000611c6a611c6584611c17565b611bad565b905082815260208101848484011115611c8657611c85611c12565b5b611c91848285611c48565b509392505050565b600082601f830112611cae57611cad611c0d565b5b8135611cbe848260208601611c57565b91505092915050565b6000819050919050565b611cda81611cc7565b8114611ce557600080fd5b50565b600081359050611cf781611cd1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d2882611cfd565b9050919050565b611d3881611d1d565b8114611d4357600080fd5b50565b600081359050611d5581611d2f565b92915050565b600067ffffffffffffffff821115611d7657611d75611b4d565b5b602082029050602081019050919050565b600080fd5b600060808284031215611da257611da1611b37565b5b611dac6080611bad565b90506000611dbc84828501611bf8565b6000830152506020611dd084828501611bf8565b6020830152506040611de484828501611d46565b6040830152506060611df884828501611bf8565b60608301525092915050565b6000611e17611e1284611d5b565b611bad565b90508083825260208201905060808402830185811115611e3a57611e39611d87565b5b835b81811015611e635780611e4f8882611d8c565b845260208401935050608081019050611e3c565b5050509392505050565b600082601f830112611e8257611e81611c0d565b5b8135611e92848260208601611e04565b91505092915050565b60008115159050919050565b611eb081611e9b565b8114611ebb57600080fd5b50565b600081359050611ecd81611ea7565b92915050565b60006101608284031215611eea57611ee9611b37565b5b611ef5610160611bad565b90506000611f0584828501611bf8565b600083015250602082013567ffffffffffffffff811115611f2957611f28611bc8565b5b611f3584828501611c99565b6020830152506040611f4984828501611ce8565b6040830152506060611f5d84828501611bf8565b6060830152506080611f7184828501611d46565b60808301525060a0611f8584828501611bf8565b60a08301525060c0611f9984828501611ce8565b60c08301525060e082013567ffffffffffffffff811115611fbd57611fbc611bc8565b5b611fc984828501611e6d565b60e08301525061010082013567ffffffffffffffff811115611fee57611fed611bc8565b5b611ffa84828501611c99565b6101008301525061012061201084828501611ce8565b6101208301525061014061202684828501611ebe565b6101408301525092915050565b600067ffffffffffffffff82111561204e5761204d611b4d565b5b602082029050602081019050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6120948161205f565b811461209f57600080fd5b50565b6000813590506120b18161208b565b92915050565b60006120ca6120c584612033565b611bad565b905080838252602082019050602084028301858111156120ed576120ec611d87565b5b835b81811015612116578061210288826120a2565b8452602084019350506020810190506120ef565b5050509392505050565b600082601f83011261213557612134611c0d565b5b81356121458482602086016120b7565b91505092915050565b600067ffffffffffffffff82111561216957612168611b4d565b5b61217282611b3c565b9050602081019050919050565b600061219261218d8461214e565b611bad565b9050828152602081018484840111156121ae576121ad611c12565b5b6121b9848285611c48565b509392505050565b600082601f8301126121d6576121d5611c0d565b5b81356121e684826020860161217f565b91505092915050565b6000806000806080858703121561220957612208611b2d565b5b600085013567ffffffffffffffff81111561222757612226611b32565b5b61223387828801611ed3565b945050602061224487828801611bf8565b935050604085013567ffffffffffffffff81111561226557612264611b32565b5b61227187828801612120565b925050606085013567ffffffffffffffff81111561229257612291611b32565b5b61229e878288016121c1565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b838110156122e45780820151818401526020810190506122c9565b838111156122f3576000848401525b50505050565b6000612304826122aa565b61230e81856122b5565b935061231e8185602086016122c6565b61232781611b3c565b840191505092915050565b6000602082019050818103600083015261234c81846122f9565b905092915050565b6000806040838503121561236b5761236a611b2d565b5b6000612379858286016120a2565b925050602083013567ffffffffffffffff81111561239a57612399611b32565b5b6123a685828601611c99565b9150509250929050565b60006123bb8261205f565b9050919050565b6123cb816123b0565b82525050565b6123da81611bcd565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61241581611d1d565b82525050565b6000612427838361240c565b60208301905092915050565b6000602082019050919050565b600061244b826123e0565b61245581856123eb565b9350612460836123fc565b8060005b83811015612491578151612478888261241b565b975061248383612433565b925050600181019050612464565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60006124c58261249e565b6124cf81856124a9565b93506124df8185602086016122c6565b6124e881611b3c565b840191505092915050565b600060c08301600083015161250b60008601826123c2565b50602083015161251e60208601826123c2565b50604083015161253160408601826123d1565b50606083015184820360608601526125498282612440565b915050608083015184820360808601526125638282612440565b91505060a083015184820360a086015261257d82826124ba565b9150508091505092915050565b600060408201905081810360008301526125a481856124f3565b905081810360208301526125b881846122f9565b90509392505050565b600080604083850312156125d8576125d7611b2d565b5b600083013567ffffffffffffffff8111156125f6576125f5611b32565b5b61260285828601611ed3565b925050602061261385828601611bf8565b9150509250929050565b600067ffffffffffffffff82111561263857612637611b4d565b5b602082029050602081019050919050565b600061265c6126578461261d565b611bad565b9050808382526020820190506020840283018581111561267f5761267e611d87565b5b835b818110156126a857806126948882611d46565b845260208401935050602081019050612681565b5050509392505050565b600082601f8301126126c7576126c6611c0d565b5b81356126d7848260208601612649565b91505092915050565b600060c082840312156126f6576126f5611b37565b5b61270060c0611bad565b90506000612710848285016120a2565b6000830152506020612724848285016120a2565b602083015250604061273884828501611bf8565b604083015250606082013567ffffffffffffffff81111561275c5761275b611bc8565b5b612768848285016126b2565b606083015250608082013567ffffffffffffffff81111561278c5761278b611bc8565b5b612798848285016126b2565b60808301525060a082013567ffffffffffffffff8111156127bc576127bb611bc8565b5b6127c8848285016121c1565b60a08301525092915050565b600080604083850312156127eb576127ea611b2d565b5b600083013567ffffffffffffffff81111561280957612808611b32565b5b612815858286016126e0565b925050602083013567ffffffffffffffff81111561283657612835611b32565b5b61284285828601611c99565b9150509250929050565b600080fd5b600060c082840312156128675761286661284c565b5b81905092915050565b60006020828403121561288657612885611b2d565b5b600082013567ffffffffffffffff8111156128a4576128a3611b32565b5b6128b084828501612851565b91505092915050565b600080604083850312156128d0576128cf611b2d565b5b60006128de858286016120a2565b92505060206128ef858286016120a2565b9150509250929050565b61290281611e9b565b82525050565b600060208201905061291d60008301846128f9565b92915050565b600082825260208201905092915050565b600061293f826122aa565b6129498185612923565b93506129598185602086016122c6565b61296281611b3c565b840191505092915050565b61297681611cc7565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6080820160008201516129be60008501826123d1565b5060208201516129d160208501826123d1565b5060408201516129e4604085018261240c565b5060608201516129f760608501826123d1565b50505050565b6000612a0983836129a8565b60808301905092915050565b6000602082019050919050565b6000612a2d8261297c565b612a378185612987565b9350612a4283612998565b8060005b83811015612a73578151612a5a88826129fd565b9750612a6583612a15565b925050600181019050612a46565b5085935050505092915050565b612a8981611e9b565b82525050565b600061016083016000830151612aa860008601826123d1565b5060208301518482036020860152612ac08282612934565b9150506040830151612ad5604086018261296d565b506060830151612ae860608601826123d1565b506080830151612afb608086018261240c565b5060a0830151612b0e60a08601826123d1565b5060c0830151612b2160c086018261296d565b5060e083015184820360e0860152612b398282612a22565b915050610100830151848203610100860152612b558282612934565b915050610120830151612b6c61012086018261296d565b50610140830151612b81610140860182612a80565b508091505092915050565b612b9581611bcd565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612bd383836123c2565b60208301905092915050565b6000602082019050919050565b6000612bf782612b9b565b612c018185612ba6565b9350612c0c83612bb7565b8060005b83811015612c3d578151612c248882612bc7565b9750612c2f83612bdf565b925050600181019050612c10565b5085935050505092915050565b600082825260208201905092915050565b6000612c668261249e565b612c708185612c4a565b9350612c808185602086016122c6565b612c8981611b3c565b840191505092915050565b60006080820190508181036000830152612cae8187612a8f565b9050612cbd6020830186612b8c565b8181036040830152612ccf8185612bec565b90508181036060830152612ce38184612c5b565b905095945050505050565b600081519050612cfd8161208b565b92915050565b600081519050612d1281611be1565b92915050565b600081519050612d2781611d2f565b92915050565b6000612d40612d3b8461261d565b611bad565b90508083825260208201905060208402830185811115612d6357612d62611d87565b5b835b81811015612d8c5780612d788882612d18565b845260208401935050602081019050612d65565b5050509392505050565b600082601f830112612dab57612daa611c0d565b5b8151612dbb848260208601612d2d565b91505092915050565b6000612dd7612dd28461214e565b611bad565b905082815260208101848484011115612df357612df2611c12565b5b612dfe8482856122c6565b509392505050565b600082601f830112612e1b57612e1a611c0d565b5b8151612e2b848260208601612dc4565b91505092915050565b600060c08284031215612e4a57612e49611b37565b5b612e5460c0611bad565b90506000612e6484828501612cee565b6000830152506020612e7884828501612cee565b6020830152506040612e8c84828501612d03565b604083015250606082015167ffffffffffffffff811115612eb057612eaf611bc8565b5b612ebc84828501612d96565b606083015250608082015167ffffffffffffffff811115612ee057612edf611bc8565b5b612eec84828501612d96565b60808301525060a082015167ffffffffffffffff811115612f1057612f0f611bc8565b5b612f1c84828501612e06565b60a08301525092915050565b6000612f3b612f3684611c17565b611bad565b905082815260208101848484011115612f5757612f56611c12565b5b612f628482856122c6565b509392505050565b600082601f830112612f7f57612f7e611c0d565b5b8151612f8f848260208601612f28565b91505092915050565b60008060408385031215612faf57612fae611b2d565b5b600083015167ffffffffffffffff811115612fcd57612fcc611b32565b5b612fd985828601612e34565b925050602083015167ffffffffffffffff811115612ffa57612ff9611b32565b5b61300685828601612f6a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061305757607f821691505b60208210810361306a57613069613010565b5b50919050565b613079816123b0565b82525050565b600082825260208201905092915050565b600061309b826123e0565b6130a5818561307f565b93506130b0836123fc565b8060005b838110156130e15781516130c8888261241b565b97506130d383612433565b9250506001810190506130b4565b5085935050505092915050565b60006060820190506131036000830186613070565b6131106020830185612b8c565b81810360408301526131228184613090565b9050949350505050565b6000602082019050818103600083015261314681846124f3565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6131956131908261314e565b61317a565b82525050565b600081905092915050565b60006131b1826122aa565b6131bb818561319b565b93506131cb8185602086016122c6565b80840191505092915050565b60006131e38285613184565b6004820191506131f382846131a6565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208201905081810360008301526132488184612bec565b905092915050565b61325981611d1d565b82525050565b7f6e6f2064617461207265636f7264730000000000000000000000000000000000600082015250565b6000613295600f836122b5565b91506132a08261325f565b602082019050919050565b60006040820190506132c06000830184613250565b81810360208301526132d181613288565b905092915050565b60006132ec6132e784612033565b611bad565b9050808382526020820190506020840283018581111561330f5761330e611d87565b5b835b8181101561333857806133248882612cee565b845260208401935050602081019050613311565b5050509392505050565b600082601f83011261335757613356611c0d565b5b81516133678482602086016132d9565b91505092915050565b60006020828403121561338657613385611b2d565b5b600082015167ffffffffffffffff8111156133a4576133a3611b32565b5b6133b084828501613342565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006133fd826133e8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361342f5761342e6133b9565b5b600182019050919050565b6000602082840312156134505761344f611b2d565b5b600061345e84828501612d03565b91505092915050565b6000613472826133e8565b915061347d836133e8565b9250828210156134905761348f6133b9565b5b828203905092915050565b60006134a6826133e8565b91506134b1836133e8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134e6576134e56133b9565b5b828201905092915050565b60006040820190506135066000830185613070565b818103602083015261351881846122f9565b90509392505050565b60006020828403121561353757613536611b2d565b5b6000613545848285016120a2565b91505092915050565b60006020828403121561356457613563611b2d565b5b600061357284828501611bf8565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126135a7576135a661357b565b5b80840192508235915067ffffffffffffffff8211156135c9576135c8613580565b5b6020830192506020820236038313156135e5576135e4613585565b5b509250929050565b6000819050919050565b60006136066020840184611d46565b905092915050565b6000602082019050919050565b6000613627838561307f565b9350613632826135ed565b8060005b8581101561366b5761364882846135f7565b613652888261241b565b975061365d8361360e565b925050600181019050613636565b5085925050509392505050565b600060608201905061368d6000830187613070565b61369a6020830186612b8c565b81810360408301526136ad81848661361b565b905095945050505050565b6000819050919050565b6136d36136ce826123b0565b6136b8565b82525050565b60006136e582846136c2565b60108201915081905092915050565b60006020828403121561370a57613709611b2d565b5b600082015167ffffffffffffffff81111561372857613727611b32565b5b61373484828501612f6a565b91505092915050565b50565b600061374d60008361319b565b91506137588261373d565b600082019050919050565b600061376e82613740565b9150819050919050565b600060408201905061378d6000830185613250565b818103602083015261379f81846122f9565b90509392505050565b600060408201905081810360008301526137c28185612c5b565b905081810360208301526137d681846122f9565b90509392505050565b60006137eb82846131a6565b915081905092915050565b600060408201905061380b6000830185613070565b818103602083015261381d8184612c5b565b90509392505050565b600060808201905061383b6000830187612b8c565b818103602083015261384d8186613090565b905081810360408301526138618185613090565b905081810360608301526138758184612c5b565b905095945050505050565b60006020828403121561389657613895611b2d565b5b600082015167ffffffffffffffff8111156138b4576138b3611b32565b5b6138c084828501612e34565b91505092915050565b60006060820190506138de6000830186613070565b81810360208301526138f08185612c5b565b9050818103604083015261390481846122f9565b9050949350505050565b600060608201905081810360008301526139288186612a8f565b90506139376020830185613070565b81810360408301526139498184612c5b565b9050949350505050565b6000806040838503121561396a57613969611b2d565b5b600083015167ffffffffffffffff81111561398857613987611b32565b5b61399485828601612f6a565b925050602083015167ffffffffffffffff8111156139b5576139b4611b32565b5b6139c185828601612f6a565b9150509250929050565b60006040820190506139e06000830185612b8c565b81810360208301526139f28184612c5b565b90509392505050565b600067ffffffffffffffff821115613a1657613a15611b4d565b5b602082029050602081019050919050565b6000613a3a613a35846139fb565b611bad565b90508083825260208201905060208402830185811115613a5d57613a5c611d87565b5b835b81811015613aa457805167ffffffffffffffff811115613a8257613a81611c0d565b5b808601613a8f8982612e34565b85526020850194505050602081019050613a5f565b5050509392505050565b600082601f830112613ac357613ac2611c0d565b5b8151613ad3848260208601613a27565b91505092915050565b600060208284031215613af257613af1611b2d565b5b600082015167ffffffffffffffff811115613b1057613b0f611b32565b5b613b1c84828501613aae565b9150509291505056fea2646970667358221220182bab83cd13831b3109e8be54ca77f6bdd7684fd586147bc54f2c942b10291a64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7935,
        "contract": "contracts/standard_peekers/bids.sol:EthBlockBidSenderContract",
        "label": "boostRelayUrl",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}